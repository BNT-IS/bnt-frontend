{"version":3,"sources":["config.js","AppContexts/UserContext.js","Authentication/Login.js","SystemSetup/SystemSetup.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/BookingOverview.js","Ticketshop/Components/TicketBestellung.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","Entrance/Entrance.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/EntranceDashboard.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/Components/ShopManagementConfMaxTickets.js","EventManagement/Components/ShopManagementSalesStatistics.js","EventManagement/Components/ShopManagementViewBookings.js","EventManagement/Components/ShopManagementManageSalesStatus.js","EventManagement/Components/ShopManagamentAbsolventenListe.js","EventManagement/Components/ShopManagementPaymentOptions.js","EventManagement/Components/ShopManagementManageOTPS.js","EventManagement/Components/ShopManagementViewOTPs.js","EventManagement/Components/ShopManagement.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKEND_BASE_URI","INFURA_URI","IDB_NAME","UserContext","React","createContext","Login","props","createUser","bind","login","loginPassHandler","mailHandler","otpBestätigen","otpInputHandler","pass1Handler","pass2Handler","setState1","setState6","state","dhbw_mail","login_pass","new_pass","otp","pass1","pass2","step","access_token","tokenHandler","verifyPasswort","this","context","user","redirectUserToHome","event","setState","target","value","console","log","alert","pw","fetch","Config","method","mode","cache","headers","body","JSON","stringify","newPassword","catch","response","ok","json","rückgabe","message","handleFinalLogin","mose","email","password","status","userData","setUserContext","Box","className","gap","Header","background","justify","pad","Text","style","textDecoration","color","href","Heading","Button","label","onClick","TextInput","placeholder","onChange","classname","direction","Component","contextType","Hauptansicht","getConfigured","key","wert","statusMap","get","Ansicht","initializeStep","doneOnce","textAlign","weight","size","List","primaryKey","secondaryKey","data","doneSteps","AddWallet","httpProvider","created","deploymentPrice","configureTheAdminWallet","http_provider","setWalletAddress","wallet_address","changeValueOfStatusMap","changeValueOfGasprices","price_deployment","setHttpProvider","align","changeStep","DeploySmartContract","walletBalance","deployed","getBalanceFromWallet","checkBalancesAndExecute","walletAddress","Web3","require","web3","providers","HttpProvider","eth","getBalance","error","balance","utils","fromWei","getValueOfGasPrices","deploySmartContract","create_ticket_price","relinquish_place_price","ConfigureAdminAccount","configureTheAdminAcc","ConfigureDatabase","host","db","port","configureTheDatabase","database","ConfigureMailserver","conncetion","standardMail","standardPrefix","configureTheMailserver","secure","default_from","default_subject_prefix","textInput","Select","options","option","ConfigureShopConfig","maxPersonenProEvent","maxTicketProEvent","maxVIPPersonen","configureTheShopConfig","max_Person_pro_Event","max_Tickets_pro_Event","max_VIP_Person","setShopConfiguration","SystemSetup","goToStep","Map","gasPrices","shopConfig","price","set","address","values","window","location","assign","finishSystemSetup","UserMainMenu","wrap","to","SingleTicketViewer","identifier","hash","replace","ticket","forename","surename","ticketType","tempTicket","tickets","find","generateQRCode","id","sIG","secretIngredient","QRCode","toDataURL","then","url","qrcode","surname","width","height","src","alt","print","TicketListItem","TicketOverview","loading","fetchTickets","token","forEach","Token","localStorage","setItem","getItem","ticketElements","map","path","length","BuchungsItem","ticketsForBooking","push","buchung","booking","accPanelLabel","Date","createdAt","toLocaleDateString","paidAt","AccordionPanel","margin","BookingOverview","loadListHandler","loadTicketsHandler","buchungen","indexOfBooking","undefined","bookingId","findIndex","kopieTickets","concat","filteredTickets","filter","Accordion","onActive","activeItems","PersonInput","onInputHandler","onCheckBox","isWheelchairUser","stateCopy","name","onInput","CheckBox","checked","TicketBestellung","increment","property","guestcount","MaxAnzahBesuchertickets","personsIndex","persons","personInput","personName","personsList","personInputFields","parkcount","decrement","pop","windowAbsolventTicket","windowGuestTicket","windowParkTicket","toOverview","toPayment","createTickets","createBooking","ShopConfig","MaxAnzahlAbsolvententickets","graduate","bookingResult","type","configData","max_TicketType_0_pro_Absolvent","max_TicketType_1_pro_Absolvent","salesStatus","userId","result","element","anzahlparktick","i","Ticketshop","requireLogin","Menu","items","logout","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","canvas","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","contentType","match","groups","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","err","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","_messageHandler","requestMap","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","onReady","parse","reqId","callbacks","dataChannel","channel","dt","getTime","c","r","Math","random","floor","toString","Promise","resolve","reject","_createUUID","msg","params","send","e","signature","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","Entrance","connected","currentTicket","connectTicketReader","scanDoneHandler","capturedTicketHandler","obliterateTicketHandler","closeTicketViewHandler","ticketReader","connectTR","a","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","inflate","setMasterConfig","ticketData","Error","readTicketRemote","currentSecretIngredient","obliterateTicketRemote","translateTicketType","isValid","isUsed","LocalTicketMirror","_createDB","saveTicketMirror","getTicketList","indexedDB","waitingForIDBReadyQueue","_initDB","onTicketListChanged","request","open","ev","errorCode","objectStore","createObjectStore","keyPath","createIndex","unique","_getIDB","transaction","clear","add","getAll","onerror","onsuccess","valuesForHash","sha3","requestUpdate","put","EntranceDashboard","lockDataset","handleDumpMirror","showTickets","lockHandler","usedTicketsCount","localTicketMirror","ltm","confirm","unusedTicketsCount","Clock","alignSelf","disabled","toggle","Stack","Meter","aria-label","max","thickness","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","rtr","onClickItem","onRemoveRTR","ShopManagementConfMaxTickets","Absolvententickets","Begleitertickets","setValuesAndChangeStep","setConfMaxTicketsFromConf","ShopManagementSalesStatistics","ShopManagementViewBookings","paid","searchOpen","searchPaid","headline1","approve","cancel","headline2","componentDidMount","getBookings","searchOpenHandler","searchPaidHandler","lauf2","lauf3","speicher","speicher2","lauf","canceled","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","mail","toLowerCase","includes","mail2","openBooking","finishedBooking","test","ShopManagementManageSalesStatus","switchSalesStatus","salesStatusBoolean","setConfSalesStatus","position","left","top","ShopManagamentAbsolventenListe","handleOnDrop","eingleseneListe","liste","eMail","newElement","Name","listeEingelesen","initialeListe","handleOnError","file","inputElem","reason","handleOnRemoveFile","transferListForCreation","switchBackToShopmanagament","emailList","counter","createOTPwithEmailAndRole","setShopConfigInitialList","onDrop","onError","delimiter","header","addRemoveButton","onRemoveFile","ShopManagementPaymentOptions","receiverName","bankName","iban","bic","verwendung","bankAktiviert","payPalLink","payPalMail","payPalVerwendung","payPalAktiviert","bankStatus","payPalStatus","receiverNameHandler","bankNameHandler","ibanHandler","bicHandler","verwendungHandler","assignBankValues","payPalLinkHandler","payPalMailHandler","payPalVerwendungHandler","assignPayPalValues","switchBankStatus","setBankValuesAndChangeStep","switchPayPalStatus","setPayPalValuesAndChangeStep","empfänger","name_der_bank","verwendungszweck","Bank","Empfänger","Name_der_Bank","IBAN","BIC","Verwendungszweck","Aktiviert","PayPal","PayPal_Link","PayPal_Mail","PayPal_Verwendung","bankStatusBoolean","setConfBankStatus","payPalStatusBoolean","setConfPayPalStatus","ShopManagementManageOTPS","OTP","role","lastEmail","lastRole","changeToShopMangement","addOTP","ShopManagementViewOTPs","OTPs","searchOTP","targetRole","getOTPs","searchOTPHandler","deleteOtp","otps","otpsRole","optId","DataQuickViewMaxTickets","callShopManagamentConfTickets","DataTable","columns","primary","maxTicketmenge","DataQuickViewPayment","getBankStatus","getPayPalStatus","bezahl","BezahlOption","Status","callConfiguratePaymentMethods","DataQuickViewBookings","callShopManagementViewBookings","statusBookings","DataQuickViewSalesStatistics","statusSales","DataQuickViewManageSales","callShopManagementManageSales","Beschreibung","Class-Name","DataQuickViewCreateOTPS","callShopManagementCreateOTPS","initialList","switchInitialList","DataQuickViewManageOTPS","DataQuickViewViewOTPs","callShopManagementViewOTPS","ShopManagement","openBookings","maxTicketsProEvent","Tickettype","Anzahl","changeInitializeStep","getValuesFromConfig","setMaxTicketMenge","setBankStatus","setPayPalStatus","getTickets","setTickets","res","bezahlt","unbezahlt","storniert","setBookings","verfügbar","verkauft","rollstuhlFahrer","maxTickets","initialeOPTListe","absolvententickets","begleitertickets","Number","newSalesStatus","setSalesStatus","intialListStatus","newBankStatus","paymentOptions","response2","newPayPalStatus","ClassName","EventManagement","rTRHandler","removeRTR","forceUpdate","getTicket","obliterateTicket","idx","indexOf","splice","App","userContext","setupMode","initUserContext","checkUserContext","detectSystemState","setInterval","detectAuthState","Authorization","clearUserContext","deleteDatabase","requiredRole","Provider","Object","Grommet","theme","grommet","eigenschaft1","alignContent","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a5da90a7.chunk.js","sourcesContent":["module.exports = {\n    BACKEND_BASE_URI: \"http://localhost:3000\",\n    INFURA_URI: \"https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171\",\n    IDB_NAME: \"TicketMirror\"\n};","import React from 'react';\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React from 'react';\nimport { Box, Button, TextInput, Text, Header, Heading } from 'grommet';\nimport Config from '../config';\nimport UserContext from '../AppContexts/UserContext';\n\nclass Login extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.createUser = this.createUser.bind(this);\n        this.login = this.login.bind(this);\n        this.loginPassHandler = this.loginPassHandler.bind(this);\n        this.mailHandler = this.mailHandler.bind(this);\n        this.otpBestätigen = this.otpBestätigen.bind(this);\n        this.otpInputHandler = this.otpInputHandler.bind(this);\n        this.pass1Handler = this.pass1Handler.bind(this);\n        this.pass2Handler = this.pass2Handler.bind(this);\n        this.setState1 = this.setState1.bind(this);\n        this.setState6 = this.setState6.bind(this);\n        this.state = { dhbw_mail: \"\", login_pass: \"\", new_pass: \"\", otp: \"\", pass1: \"\", pass2: \"\", step: 0, access_token: \"\" };\n        this.tokenHandler = this.tokenHandler.bind(this);\n        this.verifyPasswort = this.verifyPasswort.bind(this);\n    }\n\n    componentDidUpdate(){\n        if(this.context.user){\n            this.context.redirectUserToHome();\n        }\n    }\n\n    otpInputHandler(event) {\n        //Liest das eingegebene OTP aus dem Input-Feld aus und speichert es zwischen\n        this.setState({ otp: event.target.value });\n    }\n\n    tokenHandler(event) {\n        //Liest den eingegebenen Token aus dem Input-Feld aus und speichert diesen zwischen\n        this.setState({ access_token: event.target.value });\n    }\n\n    otpBestätigen() {\n        //Gibt das OTP aus und springt zum nächsten Schritt\n        console.log(this.state.otp);\n        this.setState({ step: 2 });\n    }\n\n    pass1Handler(event) {\n        //Aktualisiert das eingegebene Passwort im TextInput\n        this.setState({ pass1: event.target.value });\n    }\n\n    pass2Handler(event) {\n        //Aktualisiert das eingegebene Passwort zur Bestätigung im TextInput\n        this.setState({ pass2: event.target.value });\n    }\n\n    mailHandler(event) {\n        //Aktualisiert die eingegebene E-Mail-Adresse im TextInput\n        this.setState({ dhbw_mail: event.target.value });\n    }\n\n    loginPassHandler(event) {\n        //Aktualisiert das eingegebene Passwort zur Anmeldung im TextInput\n        this.setState({ login_pass: event.target.value });\n    }\n\n    verifyPasswort() {\n        //Überprüft, ob Passwort1 und Passwort2 übereinstimmen\n        if (this.state.pass1 === this.state.pass2) {\n            alert(\"Die angegebenen Passwörter stimmen überein!\");\n            this.createUser(this.state.pass2);\n        }\n        else {\n            alert(\"Die angegebenen Passwörter stimmen nicht überein!\");\n            this.setState({ pass1: \"\" });\n            this.setState({ pass2: \"\" });\n        }\n    }\n\n    displayError() {\n        //Wirft eine Standardfehlermeldung aus\n        alert(\"Ups, das hat leider nicht funktioniert. Bitte versuchen Sie es erneut.\")\n    }\n\n    async createUser(pw) {\n        //Legt anhand des eingegebenen OTP's einen User mit dem gewählten Passwort an\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/createUser/' + this.state.otp, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ newPassword: pw })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Für das eingegebene OTP konnte kein User angelegt werden.\");\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe.message) {\n                alert(rückgabe.message + \" Ihr angegebenes OTP scheint nicht zu exisitieren. Bitte überprüfen Sie die Eingabe.\");\n                this.setState({ step: 1 });\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                alert(\"Der Nutzer wurde erfolgreich angelegt.\");\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    async login() {\n        //Führt anhand der eingegebenen Mail-Adresse und des eingegebenen Passworts eine Anmeldung aus\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/login', {\n            method: 'POST',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email: this.state.dhbw_mail, password: this.state.login_pass })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 401:\n                    alert(\"Ihre Anmeldedaten scheinen nicht zu stimmen. Bitte überprüfen Sie ihre Angaben.\");\n                    break;\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                default:\n                    alert(rückgabe.message);\n            }\n            this.setState({ step: 6 });\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    handleFinalLogin(userData) {\n        //Schreibt nach der Anmeldung die spezifischen Userdaten in den UserContext und leitet ihn auf die Startseite weiter\n        this.context.setUserContext(userData);\n        this.context.redirectUserToHome();\n    }\n\n    setState1() {\n        //Springt zur Eingabe des OTP's im Erstellungsprozess\n        this.setState({ step: 1 });\n    }\n\n    setState6() {\n        //Springt zur Anmeldung mit einem vorhandenen Wallet\n        this.setState({ step: 6 });\n    }\n\n    render() {\n        //Stellt die jeweiligen Schritte für den Benutzer dar\n        return (\n\n            <Box className=\"AccountManagement\" gap=\"small\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Text><a style={{textDecoration: \"none\", color: \"white\"}} href=\"./\">BNT Ticketsystem</a></Text>\n                </Header>\n                <Box pad=\"small\">\n                    {this.state.step === 0 &&\n                        //Startseite des Accountmanagements, Auswahl zwischen Neuanlage eines Áccounts und Anmeldung mit einem bestehenden Account\n                        <Box gap=\"small\">\n                            <Heading>Login</Heading>\n                            <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                            <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                            <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                            <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 1 &&\n                        //Eingabe des persönlichen OTP's\n                        <Box gap=\"small\">\n                            <Heading>Angabe des Einmal-Passworts</Heading>\n                            <Text>Bitte geben Sie das OneTime-Passwort ein, das wir an Ihre DHBW-Mailadresse versendet haben, und bestätigen Sie die Eingabe</Text>\n                            <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                            <Button label=\"Eingabe bestätigen\" onClick={this.otpBestätigen}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 2 &&\n                        //Vergabe eines neuen Passwortes, muss durch zweifache Eingabe bestätigt werden\n                        <Box classname=\"Passwortvergabe\" direction=\"column\" gap=\"small\">\n                            <Heading>Passwortvergabe</Heading>\n                            <Text>Bitte vergeben Sie ein neues Passwort für Ihren Account</Text>\n                            <TextInput placeholder=\"Neues Passwort vergeben\" value={this.state.pass1} onChange={this.pass1Handler}></TextInput>\n                            <TextInput placeholder=\"Neues Passwort bestätigen\" value={this.state.pass2} onChange={this.pass2Handler}></TextInput>\n                            <Button label=\"Passwort bestätigen\" onClick={this.verifyPasswort}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 6 &&\n                        //Anmeldefenster für bestehende Accounts\n                        <Box gap=\"small\">\n                            <Heading>Anmeldung mit einem vorhandenen Account</Heading>\n                            <TextInput placeholder=\"DHBW-Mailadresse eingeben\" value={this.state.dhbw_mail} onChange={this.mailHandler}></TextInput>\n                            <TextInput placeholder=\"Account-Passwort eingeben\" value={this.state.login_pass} onChange={this.loginPassHandler}></TextInput>\n                            <Button label=\"Anmelden\" onClick={this.login}></Button>\n                        </Box>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\nexport default Login;\n\n\n","import React from 'react';\nimport { Box, Button, Select, Text, List, TextInput } from 'grommet';\nimport Config from '../config';\n\nclass Hauptansicht extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.getConfigured = this.getConfigured.bind(this);\n\n    }\n\n    //Function to Switch Boolean Values from statusMap into Text\n    getConfigured(key) {\n        var wert = this.props.statusMap.get(key);\n        if (!wert)\n            return <Text key={key}>Nicht erledigt</Text>;\n        if (wert)\n            return <Text key={key}>Erledigt</Text>;\n    }\n\n    render() {\n        var Ansicht = [];\n        //Start Text\n        if (this.props.initializeStep === 0 && this.props.doneOnce === false) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"start\">\n                <Text textAlign=\"center\" weight=\"bold\" size=\"xxlarge\">\n                    Herzlich Wilkommen zum Bachelors-Night Ticketsystem.\n                </Text>\n                <Box pad=\"medium\"></Box>\n                <Text>\n                    Die nächsten Schritte dienen zur Initalisierung des Systems.\n                    Sie werden durch die notwendigen Vorbereitungsschritte geführt.\n                </Text>\n                <Text textAlign=\"center\">\n                    Für die Initalisierung sind folgende Schritte notwendig\n                </Text>\n            </Box>\n        }\n        // Text if Steps are Finished\n        if (this.props.initializeStep === 7 || this.props.doneOnce) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"end\">\n                <Text weight=\"bold\" size=\"xxlarge\" textAlign=\"center\">Konfiguration abgeschlossen</Text>\n                <Box pad=\"medium\"></Box>\n                <Text textAlign=\"center\">\n                    Herzlich Glückwunsch Sie haben das Ticketsystem erfolgreich konfiguriert!\n                    Mit \"Zurück\" gelangen Sie wieder zur ersten Ansicht und können erneut durch die Konfiguration navigieren.\n                    Mit \"Initalisierung abschließen\" können Sie zur Login-Seite zurück.\n                </Text>\n            </Box>\n        }\n        Ansicht[1] =\n            <Box>\n                <List\n                    primaryKey=\"initializeStep\"\n                    secondaryKey=\"doneSteps\"\n                    data={[\n                        { initializeStep: <Text size=\"large\" weight=\"bold\" key=\"header\">Vorbereitsungsschritt</Text>, doneSteps: <Text size=\"large\" weight=\"bold\" key=\"headerZustand\">Zustand</Text> },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusDB\"> Initalisieren der Datenbank</Text>, doneSteps: this.getConfigured(\"DB\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminAccount\" >Hinzufügen eines Administratorbenutzers</Text>, doneSteps: this.getConfigured(\"AA\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusMS\">Initialisieren des Mailservers</Text>, doneSteps: this.getConfigured(\"MS\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminWallet\">Einrichten des Master-Wallets</Text>, doneSteps: this.getConfigured(\"AW\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusSmartContract\">Veröffentlichen des Smart Contracts</Text>, doneSteps: this.getConfigured(\"DC\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusShopConfig\">Anzahl der Plätze, Tickets und VIP-Plätze festlegen</Text>, doneSteps: this.getConfigured(\"SC\") },\n                    ]}\n                />\n            </Box>\n        return Ansicht;\n    }\n}\n\nclass AddWallet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            httpProvider: \"\",\n            created: false,\n            deploymentPrice: \"\",\n        };\n        this.configureTheAdminWallet = this.configureTheAdminWallet.bind(this);\n    }\n\n    //Function to Send the HTTP-Request to gernerate a New Wallet \n    async configureTheAdminWallet() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/generateWallet\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                http_provider: this.state.httpProvider,\n            })\n\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            alert(rückgabe.message);\n        }\n\n        if (response.ok) {\n            console.log(response)\n            var data = await response.json().catch(console.log)\n            this.props.setWalletAddress(data.wallet_address);\n            this.props.changeValueOfStatusMap(\"AW\");\n            this.props.changeValueOfGasprices(\"deployContract\", data.price_deployment)\n            this.setState({ deploymentPrice: data.price_deployment })\n            this.setState({ created: true });\n            this.props.setHttpProvider(this.state.httpProvider)\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        //View if the Admin Wallet isnt created yet.\n        if (!this.state.created) {\n            Ansicht = <Box>\n                <Box pad=\"medium\"></Box>\n                <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Hinzufügen des Wallets für den Master-User</Text>\n                <Box pad=\"medium\"></Box>\n                <Box pad=\"medium\">\n                    <TextInput\n                        placeholder=\"HTTP-Provider DNS:Port\"\n                        value={this.state.httpProvider}\n                        onChange={(event) => { this.setState({ httpProvider: event.target.value }) }}\n                    />\n                </Box>\n                <Button onClick={this.configureTheAdminWallet} label=\"Hinzufügen\"></Button>\n            </Box>\n        }\n        //View if the Admin Wallet ist created\n        if (this.state.created) {\n            Ansicht = <Box>\n                <Box pad=\"medium\">\n                    <Text size=\"large\" weight=\"bold\">Hinzufügen des Wallets für den Master-User:</Text>\n                </Box>\n                <Box pad=\"medium\">\n                    <Text>Die Einrichtung wurde Erfolgreich abgeschlossen. Für die Veröffentlichung des Smart Contracts wird</Text>\n                    <Box pad=\"medium\"></Box>\n                    <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Ethereum: {this.state.deploymentPrice}</Text><Text>benötigt.</Text>\n                    <Box pad=\"medium\"></Box>\n                    <Text>Im nächsten Schritt wird zusätzlich noch eine geringe Menge Ethereum für die Erstellung eines Testtickets benötigt.</Text>\n                    <Text>Laden Sie daher etwas mehr Ethereum in das Wallet!</Text>\n                </Box>\n                <Button label=\"Guthaben aufgeladen\" onClick={this.props.changeStep}></Button>\n            </Box>\n        }\n        return Ansicht;\n    }\n}\n\nclass DeploySmartContract extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            walletBalance: \"\",\n            deployed: false\n        };\n        this.getBalanceFromWallet = this.getBalanceFromWallet.bind(this);\n        this.checkBalancesAndExecute = this.checkBalancesAndExecute.bind(this);\n    }\n    // Get Balance From Adrress and calculate Wei -> Ether from Response this.props.walletAddress\n    async getBalanceFromWallet() {\n        if (this.props.httpProvider !== \"\" || this.props.walletAddress !== \"\") {\n            var Web3 = require('web3');\n            var web3 = new Web3(new Web3.providers.HttpProvider(this.props.httpProvider));\n            web3.eth.getBalance(this.props.walletAddress, (error, response) => {\n                if (error) {\n                    console.log(error);\n                }\n                if (!response) {\n                    console.log(\"Fehler beim Abruf der Balance des Wallets\");\n                    alert(response.message);\n                }\n\n                if (response) {\n                    var balance = web3.utils.fromWei(response, \"ether\")\n                    this.setState({ walletBalance: balance });\n                }\n            });\n        } else {\n        }\n    }\n\n    //Function to Compare the Amount of Ether from the Wallet and the needed Ether to deploy the Contract -> If Enough Call the Deployment Function\n    checkBalancesAndExecute() {\n        this.getBalanceFromWallet();\n        console.log(this.state.walletBalance);\n        console.log(this.props.getValueOfGasPrices(\"deployContract\"))\n        if (this.state.walletBalance > this.props.getValueOfGasPrices(\"deployContract\")) {\n            this.deploySmartContract();\n            console.log(\"Deployment Done\")\n        }\n        else if (this.state.walletBalance < this.props.getValueOfGasPrices(\"deployContract\")) {\n            alert(\"Bitte zuerst das Wallet aufladen!\")\n        }\n        else {\n            alert(\"Ein unbestimmter Fehler ist aufgetreten! Das Deployment konnte nicht durchgeführt werden!\")\n        }\n    }\n\n    //Function to publish Contract on Blockchain and get Prices \n    async deploySmartContract() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/deployContract\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            console.log(\"Fehler im Deployment\")\n            const rückgabe = await response.json().catch(console.log);\n            alert(rückgabe.message);\n            console.log(rückgabe.message)\n        }\n\n        if (response.ok) {\n            var data = await response.json();\n            this.props.changeValueOfGasprices(\"createTicket\", data.create_ticket_price);\n            this.props.changeValueOfGasprices(\"relinquishPlace\", data.relinquish_place_price);\n            this.props.changeValueOfStatusMap(\"DC\");\n            this.setState({ deployed: true })\n            this.getBalanceFromWallet();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        this.getBalanceFromWallet();\n        if (!this.state.deployed) {\n            Ansicht = <Box>\n                <Box pad=\"medium\"></Box>\n                <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Veröffentlichen des Smart Contracts</Text>\n                <Box pad=\"medium\"></Box>\n                <Text weight=\"bold\" size=\"large\">Wallet-Daten</Text>\n                <Text>Die Wallet-Adresse ist: {this.props.walletAddress}</Text>\n                <Text> Das Guthaben des Wallets beträgt: {this.state.walletBalance}</Text>\n                <Box pad=\"medium\"></Box>\n                <Text size=\"large\" weight=\"bold\">Smart Contract auf der Blockchain veröffentlichen:</Text>\n                <Box pad=\"medium\"></Box>\n                <Button onClick={this.checkBalancesAndExecute} label=\"Hinzufügen\"></Button>\n            </Box>\n        }\n\n        if (this.state.deployed) {\n            Ansicht = <Box>\n                <Text>Der Contract wurde erfolgreich deployed.</Text>\n                <Box pad=\"medium\"></Box>\n                <Text> Das Guthaben des Wallets beträgt: {this.state.walletBalance}</Text>\n                <Text> Der Preis für die Erstellung eines Tickets beträgt: {this.props.getValueOfGasPrices(\"createTicket\")}</Text>\n                <Text> Der Preis für die Übertragung eines Tickets beträgt: {this.props.getValueOfGasPrices(\"relinquishPlace\")}</Text>\n                <Button onClick={this.props.changeStep} label=\"Weiter\"></Button>\n            </Box>\n        }\n        return Ansicht;\n    }\n};\n\nclass ConfigureAdminAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { email: \"\", password: \"\" };\n        this.configureTheAdminAcc = this.configureTheAdminAcc.bind(this);\n    }\n\n    //Function to Confiugre Admin Account in Database \n    async configureTheAdminAcc() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/adminUser\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: this.state.email,\n                password: this.state.password,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            if (!response.ok) {\n                alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfStatusMap(\"AA\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\"></Box>\n            <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Hinzufügen des Administratorbenutzers</Text>\n            <Box pad=\"medium\"></Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">E-Mail-Adresse</Text>\n                <TextInput\n                    placeholder=\"E-Mail\"\n                    value={this.state.email}\n                    onChange={(event) => { this.setState({ email: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Passwort\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminAcc} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureDatabase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", user: \"\", password: \"\", db: \"\", port: \"\" };\n        this.configureTheDatabase = this.configureTheDatabase.bind(this);\n    }\n\n    //Function to send HTTP-Request to Configure Database\n    async configureTheDatabase() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/database\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                host: this.state.host,\n                user: this.state.user,\n                password: this.state.password,\n                database: this.state.db,\n                port: this.state.port,\n            })\n        }).catch(console.log)\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            alert(rückgabe.message)\n        }\n        if (response.ok) {\n            this.props.changeValueOfStatusMap(\"DB\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\"></Box>\n            <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Konfigurieren der Datenbank</Text>\n            <Box pad=\"medium\"></Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Datenbank-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Datenbank-Host eingeben\"\n                    value={this.state.host}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Datenbank:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Datenbank eingeben\"\n                    value={this.state.db}\n                    onChange={(event) => { this.setState({ db: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Button onClick={this.configureTheDatabase} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureMailserver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", port: \"\", conncetion: 'true', user: \"\", password: \"\", standardMail: \"\", standardPrefix: \"\" };\n        this.configureTheMailserver = this.configureTheMailserver.bind(this);\n    }\n\n    //Function for HTTP-Request to Configure Mail Server\n    async configureTheMailserver() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/mailserver\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify({\n                host: this.state.host,\n                port: this.state.port,\n                secure: this.state.conncetion,\n                user: this.state.user,\n                password: this.state.password,\n                default_from: this.state.standardMail,\n                default_subject_prefix: this.state.standardPrefix,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            if (!response.ok) {\n                alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfStatusMap(\"MS\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\"></Box>\n            <Text weight=\"bold\" size=\"xxlarge\" align=\"center\">Konfigurieren des Mailservers</Text>\n            <Box pad=\"medium\"></Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Mailserver-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Mailserver-Host eingeben\"\n                    value={this.state.textInput}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Sichere Verbindung:</Text>\n                <Select\n                    options={['true', 'false']}\n                    value={this.state.conncetion}\n                    onChange={({ value, option }) => { this.setState({ conncetion: option }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort: </Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Mail:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Standard Mail eingeben\"\n                    value={this.state.standardMail}\n                    onChange={(event) => { this.setState({ standardMail: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Subject Prefix:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Standard Prefix eingeben\"\n                    value={this.state.standardPrefix}\n                    onChange={(event) => { this.setState({ standardPrefix: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Button onClick={this.configureTheMailserver} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureShopConfig extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            maxPersonenProEvent: \"\",\n            maxTicketProEvent: \"\",\n            maxVIPPersonen: \"\"\n        };\n\n        this.configureTheShopConfig = this.configureTheShopConfig.bind(this);\n    }\n\n    //Function for HTTP-Request to set Shop Configuration\n    async configureTheShopConfig() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/shopConfig\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify({\n                max_Person_pro_Event: this.state.maxPersonenProEvent,\n                max_Tickets_pro_Event: this.state.maxTicketProEvent,\n                max_VIP_Person: this.state.maxVIPPersonen\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            if (!response.ok) {\n                alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.setShopConfiguration(this.state.maxPersonenProEvent, this.state.maxTicketProEvent, this.state.maxVIPPersonen);\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = []\n        Ansicht[0] = <Box>\n            <Box pad=\"medium\"></Box>\n            <Text weight=\"bold\" size=\"xxlarge\">Konfigurieren der Shop Grundeinstellungen:</Text>\n            <Box pad=\"medium\"></Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Maximale Personen pro Event:</Text>\n                <TextInput\n                    placeholder=\"Max Personen pro Event\"\n                    value={this.state.maxPersonenProEvent}\n                    onChange={(event) => { this.setState({ maxPersonenProEvent: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Maximale Anzahl an Tickets pro Event:</Text>\n                <TextInput\n                    placeholder=\"Max Tickets pro Event\"\n                    value={this.state.maxTicketProEvent}\n                    onChange={(event) => { this.setState({ maxTicketProEvent: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Maximale Anzahl der VIP-Personen pro Event:</Text>\n                <TextInput\n                    placeholder=\"Max VIP-Personen pro Event\"\n                    value={this.state.maxVIPPersonen}\n                    onChange={(event) => { this.setState({ maxVIPPersonen: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Button onClick={this.configureTheShopConfig} label=\"Hinzufügen\"></Button>\n            </Box>\n        </Box>\n\n\n        return Ansicht;\n    }\n\n}\n\nclass SystemSetup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeStep = this.changeStep.bind(this);\n        this.changeValueOfStatusMap = this.changeValueOfStatusMap.bind(this);\n        this.setWalletAddress = this.setWalletAddress.bind(this);\n        this.changeValueOfGasprices = this.changeValueOfGasprices.bind(this);\n        this.getValueOfGasPrices = this.getValueOfGasPrices.bind(this);\n        this.setShopConfiguration = this.setShopConfiguration.bind(this);\n        this.goToStep = this.goToStep.bind(this);\n        this.state = {\n            initializeStep: 0,\n            doneOnce: false,\n            statusMap: new Map([[\"AW\", false], [\"DB\", false], [\"MS\", false], [\"AL\", false], [\"AA\", false], [\"DC\", false], [\"SC\", false]]),\n            gasPrices: new Map([[\"deployContract\", \"\"], [\"createTicket\", \"\"], [\"relinquishPlace\", \"\"]]),\n            shopConfig: new Map([[\"MaxPersonProEvent\", \"\"], [\"MaxTicketProEvent\", \"\"], [\"MaxVIPPersonen\", \"\"]]),\n            walletAddress: \"\",\n            httpProvider: \"\",\n        };\n    }\n\n    //Function to Set GasPrices in gasPriceMap\n    changeValueOfGasprices(key, price) {\n        this.setState(this.state.gasPrices.set(key, price));\n    }\n\n    getValueOfGasPrices(key) {\n        var price = this.state.gasPrices.get(key);\n        return price;\n    }\n\n    //Function to change Value of StatusMap \n    changeValueOfStatusMap(key) {\n        this.setState(this.state.statusMap.set(key, true));\n    }\n\n    //Function to set WalletAddress as State\n    setWalletAddress(address) {\n        this.setState({ walletAddress: address });\n    }\n\n    //FUnction to set HTTP-Provider as State\n    setHttpProvider(httpProvider) {\n        this.setState({ httpProvider: httpProvider });\n    }\n\n    //Function to set Shop-Configuration Values into Map\n    setShopConfiguration(maxPersonenProEvent, maxTicketProEvent, maxVIPPersonen) {\n        let values = this.state.shopConfig\n        values = new Map([[\"MaxPersonProEvent\", maxPersonenProEvent], [\"MaxTicketProEvent\", maxTicketProEvent], [\"MaxVIPPersonen\", maxVIPPersonen]])\n        this.setState({ shopConfig: values })\n    }\n\n    // Function to Change the Value of the state of Configuration\n    changeStep() {\n        var value;\n        var doneOnceBooolean;\n\n        // Set Initialize Step to 0 to Start a new Process flow\n        if (this.state.initializeStep > 6) {\n            value = 0;\n            this.setState({\n                initializeStep: value,\n            });\n        }\n        // Finished all Configuration once - Set Boolean to true and switch to last View\n        if (this.state.initializeStep === 6) {\n            value = 1 + this.state.initializeStep;\n            doneOnceBooolean = true;\n\n            this.setState({\n                initializeStep: value,\n                doneOnce: doneOnceBooolean\n            });\n        }\n        // Normal Process Flow - Add 1 to Initialize Step \n        if (this.state.initializeStep < 7) {\n            value = 1 + this.state.initializeStep;\n            this.setState({\n                initializeStep: value,\n            });\n        }\n    }\n\n    finishSystemSetup() {\n        window.location.assign(\"#/login\")\n    }\n\n    goToStep(value) {\n        this.setState({ initializeStep: value })\n    }\n\n    render() {\n        return (\n            <Box className=\"SystemSetup\" direction=\"column\" gap=\"medium\" pad=\"medium\" align=\"center\">\n                {this.state.initializeStep === 0 && <Hauptansicht goToStep={this.goToStep.bind(this)} doneOnce={this.state.doneOnce} statusMap={this.state.statusMap} initializeStep={this.state.initializeStep}></Hauptansicht>}\n\n                {this.state.initializeStep === 1 && <ConfigureDatabase changeValueOfStatusMap={this.changeValueOfStatusMap.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureDatabase>}\n\n                {this.state.initializeStep === 2 && <ConfigureAdminAccount changeValueOfStatusMap={this.changeValueOfStatusMap.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureAdminAccount>}\n\n                {this.state.initializeStep === 3 && <ConfigureMailserver changeValueOfStatusMap={this.changeValueOfStatusMap.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureMailserver>}\n\n                {this.state.initializeStep === 4 && <AddWallet setWalletAddress={this.setWalletAddress.bind(this)} changeValueOfStatusMap={this.changeValueOfStatusMap.bind(this)}\n                    changeStep={this.changeStep.bind(this)} changeValueOfGasprices={this.changeValueOfGasprices.bind(this)} getValueOfGasPrices={this.getValueOfGasPrices.bind(this)} setHttpProvider={this.setHttpProvider.bind(this)}></AddWallet>}\n\n                {this.state.initializeStep === 5 && <DeploySmartContract httpProvider={this.state.httpProvider} walletAddress={this.state.walletAddress} changeValueOfStatusMap={this.changeValueOfStatusMap.bind(this)}\n                    changeStep={this.changeStep.bind(this)} getValueOfGasPrices={this.getValueOfGasPrices.bind(this)} changeValueOfGasprices={this.changeValueOfGasprices.bind(this)}></DeploySmartContract>}\n\n                {this.state.initializeStep === 6 && <ConfigureShopConfig setShopConfiguration={this.setShopConfiguration.bind(this)} changeStep={this.changeStep.bind(this)}></ConfigureShopConfig>}\n                {this.state.initializeStep === 7 && <Hauptansicht goToStep={this.goToStep.bind(this)} doneOnce={this.state.doneOnce} statusMap={this.state.statusMap} initializeStep={this.state.initializeStep}\n                    changeStep={this.changeStep.bind(this)}></Hauptansicht>}\n\n                {this.state.initializeStep === 0 && this.state.doneOnce === false && <Button onClick={this.changeStep} label=\"Konfiguration beginnen\"></Button>}\n                {this.state.initializeStep === 0 && this.state.doneOnce === true && <Button onClick={this.changeStep} label=\"Erneuter Durchlauf\"></Button>}\n                {this.state.initializeStep !== 7 && this.state.initializeStep !== 0 && this.state.initializeStep < 7 && <Button onClick={this.changeStep} label=\"Schritt überspringen\"></Button>}\n                {this.state.initializeStep === 7 && <Box pad=\"medium\"> <Button label=\"Zurück\" onClick={this.changeStep}></Button></Box>}\n                {this.state.doneOnce === true && (this.state.initializeStep === 0 || this.state.initializeStep === 7) && <Button label=\"Initialisierung abschließen\" onClick={this.finishSystemSetup}></Button>}\n            </Box>\n        );\n    }\n}\n\nexport default SystemSetup;\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"row\" pad=\"medium\" wrap={true}>\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/buy\">Tickets Buchen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/bookings\">Buchungen Anzeigen</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Text } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport QRCode from 'qrcode';\nimport Config from '../../config';\n\nimport UserContext from '../../AppContexts/UserContext';\n\nclass SingleTicketViewer extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.identifier = window.location.hash.replace(\"#/guest/tickets/\", \"\");\n        this.ticket = { forename: null, surename: null, ticketType: null };\n        let tempTicket = this.props.tickets.find(ticket => ticket.identifier === this.identifier);\n        if (tempTicket) {\n            this.ticket = tempTicket;\n        }\n    }\n\n    componentDidMount() {\n        this.generateQRCode(this.ticket);\n    }\n\n    async generateQRCode(ticket) {\n        // Generate code\n        let data = { id: ticket.identifier, sIG: this.context.user.secretIngredient };\n        QRCode.toDataURL(JSON.stringify(data)).then((url) => {\n            this.setState({ qrcode: url });\n        }).catch(console.log);\n    }\n\n    render() {\n        return (\n            <Box className=\"SingleTicket\">\n                <Box pad=\"small\">\n                    <p>{this.ticket.forename}</p>\n                    <p>{this.ticket.surname}</p>\n                    <p>{this.ticket.ticketType}</p>\n                </Box>\n                <Box pad=\"small\">\n                    <img width=\"300\" height=\"300\" src={this.state.qrcode} alt=\"Hier sollte ein QR-Code stehen\"></img>\n                    <Button onClick={window.print} label=\"Drucken\"></Button>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nfunction TicketListItem(props) {\n    return (\n        <Box className=\"TicketListItem\" direction=\"row\" gap=\"small\" pad=\"small\">\n            <Text className=\"Name\">{props.ticket.forename} {props.ticket.surname}</Text>\n            <Text className=\"Type\">{props.ticket.ticketType}</Text>\n            <Button label=\"Anzeigen\" onClick={() => { window.location.assign('#/guest/tickets/' + props.ticket.identifier); }}></Button>\n        </Box>\n    );\n}\n\nclass TicketOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [], loading: false }\n    }\n\n    componentDidMount() {\n        this.fetchTickets();\n    }\n\n    async fetchTickets() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/tickets\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            this.setState({ loading: false });\n            alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n            return;\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return;\n\n        tickets.forEach((ticket) => {\n            switch (ticket.ticketType) {\n                case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                default: break;\n            }\n        });\n\n        this.setState({ tickets: tickets, loading: false });\n    }\n\n    setToken(Token) {\n        localStorage.setItem('Tokenwert', Token);\n    }\n    getToken() {\n        var value = localStorage.getItem('Tokenwert');\n        console.log(value);\n    }\n\n    render() {\n        let ticketElements = this.state.tickets.map((ticket) => <TicketListItem key={ticket.identifier} ticket={ticket}></TicketListItem>);\n\n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Switch>\n                    <Route path=\"/guest/tickets/:identifier\">\n                        <Link to=\"/guest/tickets/\">Alle Tickets anzeigen</Link>\n                        <SingleTicketViewer tickets={this.state.tickets}></SingleTicketViewer>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <Box>\n                            <Box>\n                                <h1 className=\"NumberOfTickets\">{this.state.tickets.length}</h1>\n                            </Box>\n                            <Box className=\"TicketList\">\n                                {this.state.loading && <p className=\"loader\"></p>}\n                                {ticketElements}\n                            </Box>\n                        </Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Text, Accordion, AccordionPanel } from 'grommet';\nimport Config from '../../config';\nimport UserContext from '../../AppContexts/UserContext';\n\nclass BuchungsItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        var ticketsForBooking = [];\n        this.props.tickets.forEach((ticket) => {\n            ticketsForBooking.push(\n                <Box key={ticket.identifier} pad=\"small\">\n                    <span>Ticket Identifier: {ticket.identifier}</span>\n                    <span>Nachname: {ticket.surname}</span>\n                    <span>Vorname: {ticket.forename}</span>\n                    <span>Ticket Typ: {ticket.ticketType}</span>\n                </Box>\n            )\n        });\n        var buchung = this.props.booking;\n        var accPanelLabel = \"Buchung \" + buchung.id + \", gebucht am \" + (new Date(buchung.createdAt).toLocaleDateString()) + \" - \" + (buchung.paidAt ? 'Bezahlt' : 'Zahlung ausstehend');\n        return (\n            <AccordionPanel label={accPanelLabel}>\n                {ticketsForBooking.length > 0 &&\n                    <Text margin=\"small\">Folgende Tickets wurden gebucht:</Text>\n                }\n                {ticketsForBooking.length > 0 && ticketsForBooking}\n                {ticketsForBooking.length === 0 && <Text margin=\"small\">Keine Daten vorhanden.</Text>}\n            </AccordionPanel >\n        )\n    }\n\n}\n\nclass BookingOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this);\n        this.loadTicketsHandler = this.loadTicketsHandler.bind(this);\n        this.state = { buchungen: [], tickets: [] };\n    }\n\n    componentDidMount() {\n        this.loadListHandler();\n    }\n\n    async loadListHandler() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/bookings\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert('Buchungen konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n        if (!data) return;\n\n        this.setState({ buchungen: data, loading: false })\n    }\n\n    async loadTicketsHandler(indexOfBooking) {\n        if (indexOfBooking === undefined) return;\n\n        let bookingId = this.state.buchungen[indexOfBooking].id;\n        let ticketsLoaded = this.state.tickets.findIndex((ticket) => {\n            return ticket.bookingId === bookingId\n        })\n\n        if (ticketsLoaded !== -1) return;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings/\" + bookingId + \"/ticketsBooked\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            alert('Gebuchte Tickets konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n    }\n\n    render() {\n        var buchungen = [];\n        this.state.buchungen.forEach((buchung) => {\n            var filteredTickets = this.state.tickets.filter((ticket) => {\n                return ticket.bookingId === buchung.id\n            })\n            buchungen.push(<BuchungsItem key={buchung.id} booking={buchung} tickets={filteredTickets}></BuchungsItem>)\n        });\n\n        return (\n            <Box className=\"BookingOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    {this.state.loading && <p className=\"loader\"></p>}\n                    {buchungen.length > 0 &&\n                        <Accordion onActive={(activeItems) => { this.loadTicketsHandler(activeItems[0]) }}>\n                            {buchungen}\n                        </Accordion>\n                    }\n                    {buchungen.length === 0 &&\n                        <Text>Keine Buchungen vorhanden</Text>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default BookingOverview;\n","import React from 'react';\nimport { Box, Button, Text, TextInput, CheckBox, Heading } from 'grommet';\nimport Config from '../../config';\n\nimport UserContext from '../../AppContexts/UserContext';\n\nclass PersonInput extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInputHandler = this.onInputHandler.bind(this);\n        this.onCheckBox = this.onCheckBox.bind(this)\n        this.state = {\n            forename: \"\",\n            surname: \"\",\n            isWheelchairUser: false,\n        }\n    }\n\n    onInputHandler(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = event.target.value;\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    onCheckBox(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = !stateCopy[event.target.name];\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    render() {\n        return (\n            <Box>\n                <TextInput name=\"forename\" placeholder=\"Vorname des Gastes\" value={this.state.forename} onChange={this.onInputHandler}></TextInput>\n                <TextInput name=\"surname\" placeholder=\"Nachname des Gastes\" value={this.state.surname} onChange={this.onInputHandler}></TextInput>\n                <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n            </Box>\n        );\n    }\n\n}\n\nclass TicketBestellung extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.windowAbsolventTicket = this.windowAbsolventTicket.bind(this);\n        this.windowGuestTicket = this.windowGuestTicket.bind(this);\n        this.windowParkTicket = this.windowParkTicket.bind(this);\n        this.toOverview = this.toOverview.bind(this);\n        this.toPayment = this.toPayment.bind(this);\n        this.createTickets = this.createTickets.bind(this);\n        this.createBooking = this.createBooking.bind(this);\n        this.onInputHandler = this.onInputHandler.bind(this);\n        this.ShopConfig = this.ShopConfig.bind(this);\n\n\n        this.state = {\n            MaxAnzahlAbsolvententickets: 0,\n            MaxAnzahBesuchertickets: 0,\n            guestcount: 0,\n            parkcount: 0,\n            step: 0,\n            persons: [],\n            personInputFields: [],\n            graduate: {\n                forename: \"\",\n                surname: \"\",\n                isWheelchairUser: false\n            },\n            bookingResult: null\n        };\n\n\n    }\n\n    onInputHandler(event, type) {\n        if (type === \"forename\") {\n            this.setState({\n                graduate: {\n                    forename: event.target.value,\n                    surname: this.state.graduate.surname\n                }\n            })\n        } else {\n            this.setState({\n                graduate: {\n                    surname: event.target.value,\n                    forename: this.state.graduate.forename\n                }\n            })\n        }\n\n\n    }\n\n    componentDidMount() {\n        this.ShopConfig();\n    }\n    //Wechsel der Ansichtenfenster\n    windowAbsolventTicket() {\n        this.setState({ step: 0 })\n    }\n    windowGuestTicket() {\n        this.setState({ step: 1 })\n    }\n    windowParkTicket() {\n        this.setState({ step: 2 })\n    }\n    toOverview() {\n        this.setState({ step: 3 })\n    }\n    toPayment() {\n        this.createBooking();\n        this.setState({ step: 4 })\n    }\n\n\n    //Funktion für die Counter und der Namen der Gäste\n    increment = (property) => {\n        if (property === \"guest\" && this.state.guestcount < this.state.MaxAnzahBesuchertickets) {\n\n            let personsIndex = this.state.persons.length;\n            let personInput = <PersonInput key={personsIndex} onInput={(personName) => { let personsList = this.state.persons; personsList[personsIndex] = personName; this.setState({ persons: personsList }) }}></PersonInput>\n            let personsList = this.state.persons;\n            personsList[personsIndex] = {};\n            this.state.personInputFields.push(personInput);\n            this.setState({ persons: personsList, personInputFields: this.state.personInputFields, guestcount: this.state.guestcount + 1 });\n\n        }\n        else if (property === \"park\" && this.state.parkcount < 3) {\n            this.setState({ parkcount: this.state.parkcount + 1 });\n        }\n    }\n    decrement = (property) => {\n        if (property === \"guest\" && this.state.guestcount > 0) {\n\n            this.state.personInputFields.pop();\n            this.state.persons.pop();\n\n            this.setState({ guestcount: this.state.guestcount - 1, personInputFields: this.state.personInputFields, persons: this.state.persons });\n        }\n        else if (property === \"park\" && this.state.parkcount > 0) {\n            this.setState({ parkcount: this.state.parkcount - 1 });\n        }\n    }\n\n    //Abfragen Backend\n    async ShopConfig() {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/shopConfig', {\n            method: 'GET',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n        if (!response.ok) {\n            alert(response.message);\n            //Error Handling\n        }\n        if (response.ok) {\n            var configData = await response.json();\n            this.state.MaxAnzahlAbsolvententickets = configData.max_TicketType_0_pro_Absolvent;\n            this.state.MaxAnzahBesuchertickets = configData.max_TicketType_1_pro_Absolvent;\n            if (!configData.salesStatus) {\n                alert(\"Der Ticketverkauf ist derzeit nicht aktiv!\");\n                this.context.redirectUserToHome();\n            }\n        }\n    }\n\n\n\n    //Buchung erstellen\n    async createBooking() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            },\n            body: JSON.stringify({ userId: this.context.user.id })\n        }).catch(console.log);\n        // Error Handling für Benutzer\n        if (!response.ok) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n\n        var result = await response.json().catch(console.log);\n        this.setState({ bookingResult: result });\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n        await this.createTickets();\n    }\n\n    async createTickets() {\n        let bookingResult = this.state.bookingResult.id;\n        for (let element of this.state.persons) {\n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.context.token\n                },\n                body: JSON.stringify({\n                    bookingId: bookingResult,\n                    ticketType: 1,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: element.isWheelchairUser,\n                })\n            }).catch(console.log);\n\n            // Error Handling für Benutzer\n            if (!response.ok) {\n                this.setState({ step: 100 });\n                return;\n            }\n            var result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n        }\n\n        //Ticket für Absolvent in DB schreiben\n        response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            },\n            body: JSON.stringify({\n                bookingId: bookingResult,\n                ticketType: 0,\n                forename: this.state.graduate.forename,\n                surname: this.state.graduate.surname,\n                isWheelchairUser: false,\n            })\n        }).catch(console.log);\n\n        // Error Handling für Benutzer\n        if (!response.ok) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n        result = await response.json().catch(console.log);\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n        //Parkticket in DB schreiben\n        let anzahlparktick = this.state.parkcount;\n        for (var i = 0; i < anzahlparktick; i++) {\n            response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.context.token\n                },\n                body: JSON.stringify({\n                    bookingId: bookingResult,\n                    ticketType: 2,\n                    forename: this.state.graduate.forename + \" \" + i,\n                    surname: this.state.graduate.surname,\n                    isWheelchairUser: false,\n                })\n            }).catch(console.log);\n\n            // Error Handling für Benutzer\n            if (!response.ok) {\n                this.setState({ step: 100 });\n                return;\n            }\n            result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n        }\n\n    }\n\n\n    render() {\n        return (\n            <Box className=\"TicketBestellung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n\n                {this.state.step === 0 &&\n                    <Box gap=\"small\">\n                        <Heading>Angaben zu Ihnen</Heading>\n                        <Text>Bitte tragen Sie Ihren vollständigen Namen ein.</Text>\n                        <TextInput name=\"forename\" placeholder=\"Vorname des Absolventen\" value={this.state.graduate.forename} onChange={(event) => this.onInputHandler(event, \"forename\")}></TextInput>\n                        <TextInput name=\"surname\" placeholder=\"Nachname des Absolventen\" value={this.state.graduate.surname} onChange={(event) => this.onInputHandler(event, \"surname\")}></TextInput>\n                        <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" value={this.state.graduate.isWheelchairUser} onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n                        <Button label=\"Weiter\" onClick={this.windowGuestTicket} gap=\"small\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 1 &&\n                    <Box gap=\"small\">\n                        <Heading>Angaben zu Begleitpersonen</Heading>\n                        <Text>Bitte geben Sie an, wie viele Begleitpersonen Sie mitnehmen wollen.</Text>\n                        <Button onClick={() => this.increment(\"guest\")} className=\"guestcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"guest\")} className=\"guestcount\" label=\"-\"></Button>\n                        <h2>Anzahl der Begleitpersonen: {this.state.guestcount}</h2>\n                        {this.state.personInputFields}\n                        <Button onClick={this.windowAbsolventTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.windowParkTicket} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 2 &&\n                    <Box gap=\"small\">\n                        <Heading>Parktickets</Heading>\n                        <Text>Bitte geben Sie an, wie viele Parktickets Sie benötigen.</Text>\n                        <Button onClick={() => this.increment(\"park\")} className=\"parkcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"park\")} className=\"parkcount\" label=\"-\"></Button>\n                        <h2>Anzahl der Parktickets: {this.state.parkcount}</h2>\n                        <Button onClick={this.windowGuestTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.toOverview} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 3 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                            Absolventent: 1 <br />\n                            Begleitpersonen: {this.state.guestcount} <br />\n                            Parkticket: {this.state.parkcount}\n                        </Text>\n                        <Button onClick={this.windowParkTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.toPayment} label=\"Zahlungspflichtig bestellen\"></Button>\n                    </Box>\n                }\n                {this.state.step === 4 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets Zahlungspflichtig bestellt.  <br />\n                            Bitte überweisen Sie folgenden Betrag auf das Konto: XXXXYYYYZZZZ.<br />\n                            Geben Sie ihren Namen als Verwendungszweck an.<br />\n                            Nach Rechnungseingang erhalten Sie Ihre Tickets an ihr Wallet gesendet.<br />\n                        </Text>\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                            Absolventent: 1 <br />\n                            Begleitpersonen: {this.state.guestcount} <br />\n                            Parkticket: {this.state.parkcount}\n                        </Text>\n                    </Box>\n                }\n\n                {this.state.step === 100 &&\n                    <Box gap=\"small\">\n                        <Text>Es ist ein Fehler beim Bestellvorgang aufgetreten. Bitte versuche Sie es später erneut.</Text>\n                    </Box>\n                }\n\n            </Box>\n        );\n    }\n}\n\nexport default TicketBestellung;\n","import React from 'react';\n\nimport UserContext from '../AppContexts/UserContext';\n\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport BookingOverview from './Components/BookingOverview';\nimport TicketBestellung from './Components/TicketBestellung';\n\nclass Ticketshop extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    // FOR LOGIN\n\n    componentDidMount() {\n        this.context.requireLogin(1);\n    }\n\n    componentDidUpdate() {\n        this.context.requireLogin(1);\n    }\n\n    // END: FOR LOGIN\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    <Menu label=\"Account\" items={[{ label: 'Logout', onClick: this.context.logout }]} />\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/buy\">\n                        <TicketBestellung></TicketBestellung>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/bookings\">\n                        <BookingOverview></BookingOverview>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterstützt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n        this._messageHandler = this._messageHandler.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        try{\n            let response = JSON.parse(event.data);\n            if(response.reqId){\n                let callbacks = this.requestMap.get(response.reqId);\n                if(response.error){\n                    callbacks['reject'](response.error);\n                } else {\n                    callbacks['resolve'](response.result);\n                }\n            }\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button, Text } from 'grommet';\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass Entrance extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null, currentTicket: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        this.capturedTicketHandler = this.capturedTicketHandler.bind(this);\n        this.obliterateTicketHandler = this.obliterateTicketHandler.bind(this);\n        this.closeTicketViewHandler = this.closeTicketViewHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    translateTicketType(ticketType){\n        switch (ticketType) {\n            case \"0\": return \"Absolvent\";\n            case \"1\": return \"Begleitperson\";\n            case \"2\": return \"Parkticket\";\n            default: break;\n        }\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    /**\n     * @typedef TicketCodeData\n     * @property {String} id - Hex string of the identifier\n     * @property {String} sIG - Secret ingredient of the user to calculate the hash \n     */\n\n    /**\n     * Handler for the scanner when the ticket was scanned\n     * @param {TicketCodeData} data - The data from the QR-Code of the ticket\n     */\n    async capturedTicketHandler(data) {\n        try {\n            let ticketData = JSON.parse(data);\n            if (!ticketData.id || !ticketData.sIG) throw Error(\"Fehlende Angaben im Ticket-QR-Code. Möglicherweise liegt eine Fälschung vor.\");\n            let ticket = await this.ticketReader.readTicketRemote(ticketData.id);\n            this.setState({ currentTicket: ticket, currentSecretIngredient: ticketData.sIG });\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    /**\n     * Obliterates a ticket in the IDB\n     */\n    async obliterateTicketHandler() {\n        try {\n            await this.ticketReader.obliterateTicketRemote(this.state.currentTicket.identifier, this.state.currentSecretIngredient);\n            alert('Erfolgreich entwertet!');\n            this.closeTicketViewHandler();\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    closeTicketViewHandler() {\n        this.setState({ currentTicket: null, currentSecretIngredient: null });\n    }\n\n    render() {\n        return (\n            <Box className=\"Entrance\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Gerät als Ticket Leser verwenden möchten, müssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Gerät mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Gerät scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Box>\n                        <p>Sie sind verbunden</p>\n                        {this.state.currentTicket === null && <QRScanner onDone={this.capturedTicketHandler} label=\"Scanvorgang starten\"></QRScanner>}\n                        {this.state.currentTicket &&\n                            <Box>\n                                <h1>{this.state.currentTicket.surname}, {this.state.currentTicket.forename}</h1>\n                                <Text size=\"2em\" pad=\"small\">{this.translateTicketType(this.state.currentTicket.ticketType)}</Text>\n                                <Text size=\"2em\" pad=\"small\">{(this.state.currentTicket.isValid && !this.state.currentTicket.isUsed) ? 'OK' : 'Ungültiges Ticket!'}</Text>\n                                <Box gap=\"small\">\n                                    <Button label=\"Entwerte Ticket\" onClick={this.obliterateTicketHandler}></Button>\n                                    <Button label=\"Schließen\" onClick={this.closeTicketViewHandler}></Button>\n                                </Box>\n                            </Box>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte warten Sie einen Moment...</p>\n                        <p className=\"loader\"></p>\n                    </Box>\n                }\n                {this.state.connected === 'failed' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte aktivieren Sie den Reader erneut.</p>\n                        <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                    </Box>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default Entrance;\n","import Web3 from 'web3';\nimport Config from '../../config';\n\n/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.saveTicketMirror = this.saveTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket list were updated. Please implement externally.\n         * @param {Array} tickets - New ticket list.\n         */\n        this.onTicketListChanged = function (tickets) { };\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(Config.IDB_NAME, 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        var objectStore = this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n        objectStore.createIndex(\"forename\", \"forename\", { unique: false });\n        objectStore.createIndex(\"surname\", \"surname\", { unique: false });\n        objectStore.createIndex(\"ticketType\", \"ticketType\", { unique: false });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async saveTicketMirror(tickets) {\n        try {\n            var db = await this._getIDB();\n\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            objectStore.clear();\n\n            tickets.forEach((ticket) => {\n                objectStore.add(ticket);\n            });\n\n            this.onTicketListChanged();\n        } catch (error) {\n            console.error(error);\n            alert('Es ist ein Fehler bei der Indexed DB aufgetreten');\n        }\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The secretIngredient of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} secretIngredient - Specific secretIngredient of the user that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, secretIngredient) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Das Ticket existiert nicht.\");\n\n                // Check secretIngredient and identifier hash\n                var valuesForHash = secretIngredient + ticket.forename + ticket.surname + ticket.ticketType;\n                var checkSum = Web3.utils.sha3(valuesForHash);\n\n                if (checkSum !== identifier) return reject(\"Die Identität des Tickets konnte nicht verifiziert werden.\");\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Das Ticket ist nicht gültig.\");\n                if (ticket.isUsed) return reject(\"Das Ticket wurde breits entwertet.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = async (event) => {\n                    resolve(event);\n                    this.onTicketListChanged();\n                };\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button, List, CheckBox, Clock, Meter, Stack, Text } from 'grommet';\n\n// eslint-disable-next-line\nimport LocalTicketMirror from '../Classes/LocalTicketMirror';\n\nimport UserContext from '../../AppContexts/UserContext';\nimport Config from '../../config';\n\nclass EntranceDashboard extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { lockDataset: false, tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        this.lockHandler = this.lockHandler.bind(this);\n        this.usedTicketsCount = this.usedTicketsCount.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n\n        // Reloading ticket list at each db change\n        // This could be inperformant with more ticket-reader at once\n        // Maybe a frequent polling mechanism would be better\n        this.props.localTicketMirror.onTicketListChanged = this.showTickets;\n    }\n\n    componentDidMount() {\n        this.showTickets();\n    }\n\n    translateTicketType(ticketType) {\n        switch (ticketType) {\n            case \"0\": return \"Absolvent\";\n            case \"1\": return \"Begleitperson\";\n            case \"2\": return \"Parkticket\";\n            default: break;\n        }\n    }\n\n    async handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/tickets/\", {\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n\n        ltm.saveTicketMirror(tickets);\n\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets: tickets.filter(ticket => ticket.isValid && ticket.ticketType < 2), lockDataset: (tickets.length > 0 ? true : false) });\n    }\n\n    lockHandler(event) {\n        if (!event.target.checked) {\n            let ok = window.confirm('Sind Sie sich sicher, dass sie den Datensatz erneut herunterladen möchten? Sie werden alle Daten zu bisher eingelösten Tickets verlieren.');\n            if (ok) {\n                this.setState({ lockDataset: event.target.checked });\n            }\n        } else {\n            this.setState({ lockDataset: event.target.checked });\n        }\n    }\n\n    usedTicketsCount() {\n        let usedTicketsCount = this.state.tickets.filter(ticket => ticket.isUsed);\n        return usedTicketsCount.length;\n    }\n\n    render() {\n\n        const usedTicketsCount = this.usedTicketsCount();\n        const unusedTicketsCount = this.state.tickets.length - usedTicketsCount;\n\n        return (\n            <Box className=\"EntranceDashboard\" pad=\"medium\" gap=\"small\" direction=\"column\" wrap={true}>\n                <Box className=\"dashboardHead\" direction=\"row\" wrap={true} justify=\"center\">\n                    <Clock type=\"digital\" size=\"xxlarge\" />\n                </Box>\n                <Box className=\"dashboardRow1\" direction=\"row\" wrap={true} justify=\"center\" gap=\"small\">\n                    <Box className=\"dataControls\" direction=\"column\" gap=\"small\" justify=\"center\">\n                        <Button alignSelf=\"center\" label=\"Ticketdaten für den Offline-Einlass herunterladen\" onClick={this.handleDumpMirror} disabled={this.state.lockDataset}></Button>\n                        <CheckBox label=\"Datensatz schützen\" toggle={true} onChange={this.lockHandler} checked={this.state.lockDataset}></CheckBox>\n                    </Box>\n                    <Box className=\"StatisticalSummary\" direction=\"column\" wrap={false}>\n                        <p>Anzahl noch gültiger Personen-Tickets</p>\n                        <Stack>\n                            <Meter\n                                type=\"bar\"\n                                values={[{\n                                    value: unusedTicketsCount,\n                                    label: 'Anzahl noch gültiger Personen-Tickets'\n                                }]}\n                                aria-label=\"meter\"\n                                max={this.state.tickets.length}\n                                thickness=\"large\"\n                            />\n                            <Text size=\"2em\" margin=\"0.2em\" alignSelf=\"center\">{unusedTicketsCount}</Text>\n                        </Stack>\n                        <p>Anzahl eingetretener Personen</p>\n                        <Stack>\n                            <Meter\n                                type=\"bar\"\n                                values={[{\n                                    value: usedTicketsCount,\n                                    label: 'Anzahl eingetretener Personen'\n                                }]}\n                                aria-label=\"meter\"\n                                max={this.state.tickets.length}\n                                thickness=\"large\"\n                            />\n                            <Text size=\"2em\" margin=\"0.2em\" alignSelf=\"center\">{usedTicketsCount}</Text>\n                        </Stack>\n                    </Box>\n                </Box>\n                <Box className=\"TicketList\">\n                    <List\n                        primaryKey={(ticket) => { return <b key={ticket.identifier + 't'}>{ticket.surname || 'Unkown'}, {ticket.forename || 'Unkown'} - {this.translateTicketType(ticket.ticketType)} {ticket.isWheelchairUser ? '!Rollstuhlfahrer!' : ''}</b> }}\n                        secondaryKey={(ticket) => { return <span key={ticket.identifier + 's'}>{ticket.isUsed ? 'benutzt' : 'unbenutzt'}</span> }}\n                        data={this.state.tickets}\n                    />\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default EntranceDashboard;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and the secret ingredient and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} secretIngredient - Secret ingredient used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, secretIngredient, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any,\n               error: String\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: ticket,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: success,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button, List } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <List\n                    primaryKey={(rtr) => { return <b key={rtr.uuid + 't'}> {rtr.uuid} - {rtr.localPeerConnection.connectionState} </b> }}\n                    secondaryKey={(rtr) => { return <span key={rtr.uuid + 's'}> Click to remove </span> }}\n                    onClickItem={this.props.onRemoveRTR}\n                    data={this.props.RTRList}\n                />\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzufügen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzufügen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Gehen Sie mit dem Zielgerät auf die Unterseite #/entrance/</p>\n                                    <p>Scannen Sie den angezeigten QR-Code anschließend mit dem Zielgerät</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielgeräts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\nimport UserContext from '../../AppContexts/UserContext'\n\nclass ShopManagementConfMaxTickets extends React.Component {\n\n    static contextType = UserContext;\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            Absolvententickets: \"\",\n            Begleitertickets: \"\",           \n        }\n\n        this.setValuesAndChangeStep = this.setValuesAndChangeStep.bind(this)\n    }\n\n    setValuesAndChangeStep (){\n        this.props.setConfMaxTicketsFromConf(this.state.Absolvententickets, this.state.Begleitertickets);\n        window.location.assign(\"#/eventmgmt/shop\");\n    }\n\n    render() {\n        var Ansicht = [];\n        return (\n            Ansicht[0]=\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xxlarge\">Ticketkonfiguration</Text>\n                <Box pad=\"medium\"></Box>\n                Hier können die maximalen Tickets, die ein Benutzer (Absolvent) erwerben kann, konfiguriert werden. \n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Absolvententickets:</Text>\n                    <TextInput\n                        placeholder=\"Absolvententickets\"\n                        value={this.state.Absolvententickets}\n                        onChange={(event) => { this.setState({ Absolvententickets: event.target.value }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Begleitertickets:</Text>\n                    <TextInput\n                        placeholder=\"Begleitertickets\"\n                        value={this.state.Begleitertickets}\n                        onChange={(event) => { this.setState({ Begleitertickets: event.target.value }) }}\n                    />\n                </Box>\n                <Button label=\"Bestätigen\" onClick={this.setValuesAndChangeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementConfMaxTickets;\n","import React from 'react';\nimport { Box, Button } from 'grommet';\n\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementSalesStatistics extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.changeStep = this.changeStep.bind(this);\n    }\n\n    changeStep (){\n        window.location.assign('#/eventmgmt/shop');\n    }\n    \n\n    render() {\n        return (\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                \n                <Button label=\"Bestätigen\" onClick={this.changeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementSalesStatistics;\n","import React from 'react';\nimport { Box, Button, Text, List, TextInput } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\nimport UserContext from '../../AppContexts/UserContext'\n\n\nclass ShopManagementViewBookings extends React.Component {\n\n    static contextType = UserContext;\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: [], paid: [], searchOpen: \"\", searchPaid: \"\",\n            headline1: [{ id: \"ID der Buchung\", email: \"E-Mail-Adresse des Absolventen\", createdAt: \"Erstellungsdatum\", approve: \"Buchung freigeben\", cancel: \"Buchung stornieren\" }],\n            headline2: [{ id: \"ID der Buchung\", email: \"E-Mail-Adresse des Absolventen\", createdAt: \"Erstellungsdatum\", cancel: \"Buchung stornieren\" }]\n        };\n        this.changeStep = this.changeStep.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.getBookings = this.getBookings.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.approve = this.approve.bind(this);\n        this.searchOpenHandler = this.searchOpenHandler.bind(this);\n        this.searchPaidHandler = this.searchPaidHandler.bind(this);\n    }\n\n    componentDidMount() {\n        //Ruft beim Laden der Komponente die aktuellen Buchungen ab, indem die Funktion getBookings aufgerufen wird\n        this.getBookings();\n    }\n\n\n    async getBookings() {\n        //Ruft die aktuellen Buchungen aus der Datenbank ab und speichert diese lokal ab\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/', {\n            method: 'GET',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            switch (response.status) {\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                case 501:\n                    alert(\"Der Server kann die gewünschte Anfrage nicht ausführen.\");\n                    break;\n                default:\n                    alert(response.message);\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                var lauf2 = 0;\n                var lauf3 = 0;\n                var speicher = [];\n                var speicher2 = [];\n                for (var lauf = 0; lauf < rückgabe.length; lauf++) {\n\n                    if (rückgabe[lauf].paidAt !== null && rückgabe[lauf].canceled === false) {\n                        if (rückgabe[lauf] !== null) {\n                            speicher[lauf2] = rückgabe[lauf];\n                        }\n                        lauf2 = lauf2 + 1;\n                    }\n                    if (rückgabe[lauf].paidAt === null && rückgabe[lauf].canceled === false) {\n                        if (rückgabe[lauf] !== null) {\n                            speicher2[lauf3] = rückgabe[lauf];\n                        }\n                        lauf3 = lauf3 + 1;\n                    }\n                }\n            }\n            this.setState({ paid: speicher })\n            this.setState({ open: speicher2 })\n        }\n    }\n\n    async cancel(bookingId) {  \n        //Storniert eine Buchung mit der angegebenen Buchungs-ID\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/' + bookingId, {\n            method: 'PUT',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({ canceled: 1 })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Die Stornierung ist Fehlgeschlagen\");\n            return\n        } else {\n            alert(\"Die Buchung mit der Buchungs-ID \" + bookingId + \" wurde storniert.\");\n            this.componentDidMount();\n        }\n    }\n\n    async approve(bookingId) {\n        //Gibt die Buchung mit der angegebenen Buchungs-ID frei\n        var today = new Date();\n        today = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + ' ' + (today.getHours() + 2) + ':' + today.getMinutes() + ':' + today.getSeconds();\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/' + bookingId, {\n            method: 'PUT',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({ paidAt: today })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Die Bestätigung ist fehlgeschlagen\");\n            return\n        } else {\n            alert(\"Die Buchung mit der Buchungs-ID \" + bookingId + \" wurde bestätigt.\");\n            this.componentDidMount();\n        }\n    }\n\n    changeStep() {\n        //Leitet den Besucher auf die allgemeine Übersichtsseite des Eventmanagements weiter\n        window.location.assign('#/eventmgmt/shop');\n    }\n\n    searchOpenHandler(event) {\n        //Speichert die Suchanfrage des TextInput-Feldes in den offenen Buchungen  \n        this.setState({ searchOpen: event.target.value });\n    }\n\n    searchPaidHandler(event) {\n        //Speichert die Suchanfrage des TextInput-Feldes in den bezahlten Buchungen\n        this.setState({ searchPaid: event.target.value });\n    }\n\n\n    render() {\n        //stellt die Buchungen und Filterfunktionen im Browser dar. Trennung zwischen offenen und bezahlten Buchungen\n        var ansicht = [];\n        let open;\n        var mail = this.state.searchOpen;\n        if (mail !== \"\") {\n            open = this.state.open.filter((booking) => { return booking.user.email.toLowerCase().includes(mail.toLowerCase()) });\n        } else {\n            open = this.state.open;\n        }\n\n        let paid;\n        var mail2 = this.state.searchPaid;\n        if (mail2 !== \"\") {\n            paid = this.state.paid.filter((booking) => { return booking.user.email.toLowerCase().includes(mail2.toLowerCase()) });\n        } else {\n            paid = this.state.paid;\n        }\n        return (\n            ansicht[0] =\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xlarge\">Bestellungsübersicht</Text>\n                <Box pad=\"medium\">\n                    <Text>Hier können die Bestellungen eingesehen, freigegeben und storniert werden.</Text>\n                    <Button label=\"Zurück zur Übersichtsseite\" onClick={this.changeStep} pad=\"small\"></Button>\n                </Box>\n                <Box pad=\"medium\">\n                    <Text>Offene Bestellungen: </Text>\n                    <Box pad=\"small\">\n                        <List\n                            pad=\"medium\"\n                            alignSelf=\"stretch\"\n                            margin=\"small\"\n                            primaryKey={(headline1) => { return <b key={headline1.id + 't'}> {headline1.id || 'Unknown'} </b> }}\n                            secondaryKey={(headline1) => { return <span key={headline1.id + 's'}> {\"|   \" + headline1.email + \"   |\" || 'Unknown'} {headline1.createdAt + \"   |\" || 'Unknown'} {headline1.approve + \"   |\" || 'Unknown'} {headline1.cancel + \"   |\" || 'Unknown'} </span> }}\n                            data={this.state.headline1}\n                        />\n                        <TextInput gap=\"small\" placeholder=\"Zum Suchen in den offenen Buchungen bitte eine E-Mail-Adresse eingeben\" value={this.state.searchOpen} onChange={this.searchOpenHandler}></TextInput>\n                        <List\n                            pad=\"medium\"\n                            alignSelf=\"stretch\"\n                            margin=\"small\"\n                            primaryKey={(openBooking) => { return <b key={openBooking.id + 't'}> {openBooking.id || 'Unknown'} </b> }}\n                            secondaryKey={(openBooking) => { return <span key={openBooking.id + 's'}> {\"|  \" + openBooking.user.email + \"    |\" || 'Unknown'}     {(new Date(openBooking.createdAt).toLocaleDateString()) + \"    |\" || 'Unknown'} <Button label=\"Buchung freigeben\" onClick={() => { this.approve(openBooking.id) }}></Button> | <Button label=\"Buchung stornieren\" onClick={() => { this.cancel(openBooking.id) }}></Button></span> }}\n                            data={open}\n                        />\n                    </Box>\n                </Box>\n                <Box pad=\"medium\">\n                    <Text>Abgeschlossene Bestellungen: </Text>\n                    <Box pad=\"small\">\n                        <List\n                            pad=\"medium\"\n                            alignSelf=\"stretch\"\n                            margin=\"small\"\n                            primaryKey={(headline2) => { return <b key={headline2.id + 't'}> {headline2.id || 'Unknown'} </b> }}\n                            secondaryKey={(headline2) => { return <span key={headline2.id + 's'}> {\"|   \" + headline2.email + \"   |\" || 'Unknown'} {headline2.createdAt + \"   |\" || 'Unknown'} {headline2.cancel + \"   |\" || 'Unknown'} </span> }}\n                            data={this.state.headline2}\n                        />\n                        <TextInput gap=\"small\" placeholder=\"Zum Suchen in den bezahlten Buchungen bitte eine E-Mail-Adresse eingeben\" value={this.state.searchPaid} onChange={this.searchPaidHandler}></TextInput>\n                        <List pad=\"medium\"\n                            alignSelf=\"stretch\"\n                            margin=\"small\"\n                            primaryKey={(finishedBooking) => { return <b key={finishedBooking.id + 't'}> {finishedBooking.id || 'Unknown'} </b> }}\n                            secondaryKey={(finishedBooking, test) => { return <span key={finishedBooking.id + 's'}> {\"|  \" + finishedBooking.user.email + \"    |\" || 'Unknown'}     {(new Date(finishedBooking.createdAt).toLocaleDateString()) + \"    |\" || 'Unknown'} <Button label=\"Buchung stornieren\" onClick={() => { this.cancel(finishedBooking.id) }}></Button></span> }}\n                            data={paid}\n                        />\n                    </Box>\n                </Box>\n            </Box>\n        );\n    }\n}\nexport default ShopManagementViewBookings;","import React from 'react';\nimport { Box, Button, Text, Select } from 'grommet';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\nimport UserContext from '../../AppContexts/UserContext';\n\nclass ShopManagementManageSalesStatus extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            salesStatus: \"Aktivieren\"\n        }\n\n        this.setValuesAndChangeStep = this.setValuesAndChangeStep.bind(this);\n        this.switchSalesStatus = this.switchSalesStatus.bind(this)\n    }\n\n    switchSalesStatus() {\n        if (this.props.salesStatus) {\n            return <Text weight=\"bold\">Aktiv</Text>\n        }\n        if (!this.props.salesStatus) {\n            return <Text weight=\"bold\">Nicht Aktiv</Text>\n        }\n    }\n\n    //Change Values of State into Boolean, compare new Sales Status with props. If Sales Status has changed Execute props Function to Change. \n    setValuesAndChangeStep() {\n        var salesStatusBoolean = \"\"\n        if (this.state.salesStatus === \"Aktivieren\") {\n            salesStatusBoolean = true;\n        }\n        if (this.state.salesStatus === \"Deaktivieren\") {\n            salesStatusBoolean = false;\n        }\n\n\n        if (salesStatusBoolean === this.props.salesStatus) {\n            console.log(\"Der Sales Status wurde wurde nicht verändert! Es wird keine Nachricht an das Backend gesendet\")\n            window.location.assign(\"#/eventmgmt/shop\");\n            return;\n        }\n        if (salesStatusBoolean !== this.props.salesStatus) {\n            this.props.setConfSalesStatus(salesStatusBoolean);\n            window.location.assign(\"#/eventmgmt/shop\");\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        return (\n            Ansicht[0] =\n            <Box pad=\"medium\" align=\"center\" style={{ position: 'absolute', left: '40%', top: '10%' }}>\n                <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                    <Text weight=\"bold\" size=\"xxlarge\">Status des Verkaufs ändern</Text>\n                    <Box pad=\"medium\">\n                        <Text>Der Verkauf ist derzeit: {this.switchSalesStatus()}</Text>\n                    </Box>\n                    <Box>\n                        <Select\n                            options={['Aktivieren', 'Deaktivieren']}\n                            value={this.state.salesStatus}\n                            onChange={({ option }) => { this.setState({ salesStatus: option }) }}\n                        />\n\n                    </Box>\n                    <Button label=\"Bestätigen\" onClick={this.setValuesAndChangeStep}></Button>\n                </Box >\n            </Box>\n        );\n    }\n}\nexport default ShopManagementManageSalesStatus;\n","import { CSVReader } from 'react-papaparse';\nimport React from 'react';\nimport { Box, Button, Text, List} from 'grommet';\n\nclass ShopManagamentAbsolventenListe extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { listeEingelesen: false, initialeListe: [] };\n        this.transferListForCreation = this.transferListForCreation.bind(this);\n        this.switchBackToShopmanagament = this.switchBackToShopmanagament.bind(this)\n    }\n\n    //Clean Data from CSV-Reader and Save cleaned List into Componentstate \n    handleOnDrop = (eingleseneListe) => {\n        var liste = [];\n        var gefilterteListe = eingleseneListe.filter(data => data.data.eMail.match(\"@\"))\n        gefilterteListe.forEach((element) => {\n            var newElement = {eMail: element.data.eMail, Name: element.data.Name};\n            liste.push(newElement);\n        }\n        )\n        this.setState({ listeEingelesen: true, initialeListe: liste })\n    }\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    handleOnRemoveFile = (data) => {\n\n    }\n\n    //Send Request from ShopManagement for each E-Mail-Address in List\n    async transferListForCreation() {\n        var emailList = this.state.initialeListe;\n        var counter = 0\n        for (const element of emailList) {\n            var response = await this.props.createOTPwithEmailAndRole(element.eMail, 1);\n            console.log(response);\n            if (response === 1){\n                counter = counter + response   \n            }\n            if(response !== 1){\n                console.log(\"Fehler beim Senden der One Time Passwörter in Unterkomponentte: \" + response);\n            }  \n        }\n        console.log(\"One Time Passwörter für: \" + counter + \" E-Mail-Adressen erstellt!\");\n        this.props.setShopConfigInitialList(true);\n        window.location.assign(\"#/eventmgmt/shop\");\n    }\n\n    //Change View to ShopManagement\n    switchBackToShopmanagament() {\n        window.location.assign(\"#/eventmgmt/shop\")\n    }\n\n    render() {\n        var Ansicht = [];\n        var emailList = this.state.initialeListe;\n        Ansicht =\n            <Box style={{ position: 'absolute', left: '40%', top: '10%' }}>\n                <Box pad=\"medium\">\n                    <Text size=\"large\" weight=\"bold\">Einlesen der Absolventen Liste</Text>\n                </Box>\n\n                <Box className=\"Eingaben\">\n                    <Box pad=\"medium\">\n                        <Text>Bitte eine Liste in der folgenden Darstellung einlesen:</Text>\n                        <span><Text weight=\"bold\">Header: </Text><Text>eMail; Name</Text></span>\n                        <span><Text weight=\"bold\">Datensatz 1: </Text><Text>Beispiel@web.de; Mustermann, Max</Text></span>\n                    </Box>\n                    <CSVReader\n                        onDrop={this.handleOnDrop}\n                        onError={this.handleOnError}\n                        config={{\n                            delimiter: \";\",\n                            header: true\n                        }}\n                        addRemoveButton\n                        onRemoveFile={this.handleOnRemoveFile}\n                    >\n                        <span>Drop CSV file here or click to upload.</span>\n                    </CSVReader>\n                </Box>\n\n\n                <List className=\"langeListe\" pad=\"medium\"\n                    primaryKey=\"eMail\"\n                    secondaryKey=\"Name\"\n                    data={emailList}\n                />\n\n                <Box pad=\"medium\">\n                    <Button onClick={this.transferListForCreation} label=\"Passwörter erstellen\"></Button>\n                </Box>\n\n                <Box pad=\"medium\">\n                    <Button onClick={this.switchBackToShopmanagament} label=\"Zurück\" ></Button>\n                </Box>\n\n            </Box>\n        return Ansicht;\n    }\n}\nexport default ShopManagamentAbsolventenListe;","import React from 'react';\nimport { Box, Button, Heading, Text, TextInput, Select } from 'grommet';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\nimport Config from '../../config';\nimport UserContext from '../../AppContexts/UserContext';\n\nclass ShopManagementPaymentOptions extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            receiverName: \"\", bankName: \"\", iban: \"\", bic: \"\", verwendung: \"\", bankAktiviert: false, payPalLink: \"\", payPalMail: \"\", payPalVerwendung: \"\",\n            payPalAktiviert: false, bankStatus: 'Deaktiviert', payPalStatus: 'Deaktiviert'\n        }\n        this.changeStep = this.changeStep.bind(this);\n        this.receiverNameHandler = this.receiverNameHandler.bind(this);\n        this.bankNameHandler = this.bankNameHandler.bind(this);\n        this.ibanHandler = this.ibanHandler.bind(this);\n        this.bicHandler = this.bicHandler.bind(this);\n        this.verwendungHandler = this.verwendungHandler.bind(this);\n        this.assignBankValues = this.assignBankValues.bind(this);\n        this.payPalLinkHandler = this.payPalLinkHandler.bind(this);\n        this.payPalMailHandler = this.payPalMailHandler.bind(this);\n        this.payPalVerwendungHandler = this.payPalVerwendungHandler.bind(this);\n        this.assignPayPalValues = this.assignPayPalValues.bind(this);\n        this.switchBankStatus = this.switchBankStatus.bind(this);\n        this.setBankValuesAndChangeStep = this.setBankValuesAndChangeStep.bind(this);\n        this.switchPayPalStatus = this.switchPayPalStatus.bind(this);\n        this.setPayPalValuesAndChangeStep = this.setPayPalValuesAndChangeStep.bind(this);\n    }\n\n    changeStep() {\n        //Leitet den Besucher auf die Übersichtsseite des Eventmanagements weiter\n        window.location.assign('#/eventmgmt/shop');\n    }\n\n    componentDidMount(){\n        //Lädt die aktuellen Stati der Zahlungsmethoden (Aktiviert / Deaktiviert)\n        if(this.props.bankStatus){\n            this.setState({ bankStatus: 'Aktiviert' });\n        }\n        if(!this.props.bankStatus){\n            this.setState({ bankStatus : 'Deaktiviert' });\n        }\n        if(this.props.payPalStatus){\n            this.setState({ payPalStatus: 'Aktiviert' });\n        }\n        if(!this.props.payPalStatus){\n            this.setState({ payPalStatus: 'Deaktiviert' });\n        }\n    }\n\n    receiverNameHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Empfänger einer Bankverbindung\n        this.setState({ receiverName: event.target.value });\n    }\n\n    bankNameHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Namen einer Bank \n        this.setState({ bankName: event.target.value });\n    }\n\n    ibanHandler(event) {\n        //Aktualisiert den Wert des InputFields für die IBAN einer Bank\n        this.setState({ iban: event.target.value });\n    }\n\n    bicHandler(event) {\n        //Aktualisiert den Wert des InputFields für die BIC einer Bank\n        this.setState({ bic: event.target.value });\n    }\n\n    verwendungHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Verwendungszweck bei Banküberweisungen\n        this.setState({ verwendung: event.target.value });\n    }\n\n    async assignBankValues() {\n        //Schreibt die festgelegten Werte für die Bankverbindung ins Backend\n        var empfänger = this.state.receiverName;\n        var name_der_bank = this.state.bankName;\n        var iban = this.state.iban;\n        var bic = this.state.bic;\n        var verwendungszweck = this.state.verwendung;\n        var bankAktiviert = this.state.bankAktiviert;\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                Bank: {\n                    Empfänger: empfänger,\n                    Name_der_Bank: name_der_bank,\n                    IBAN: iban,\n                    BIC: bic,\n                    Verwendungszweck: verwendungszweck,\n                    Aktiviert: bankAktiviert\n                },\n            }\n            )\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Konfigurieren der Bankverbindung vom Backend-Server erhalten!\");\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Setzten der Werte für die Bankverbindung: \" + response.message);\n            return;\n        }\n\n        if (response.ok) {\n            console.log(\"Die Konfiguration der Bankverbindung wurde erfolgreich geändert. Die gesetzten Werte sind: Empfänger: \" + empfänger + \", Name der Bank: \" + name_der_bank +\n                \", IBAN: \" + iban + \", BIC: \" + bic + \", Verwendungszweck: \" + verwendungszweck);\n        }\n    }\n\n    payPalLinkHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Link zum PayPal-Konto\n        this.setState({ payPalLink: event.target.value });\n    }\n\n    payPalMailHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Mail des PayPal-Kontos\n        this.setState({ payPalMail: event.target.value });\n    }\n\n    payPalVerwendungHandler(event) {\n        //Aktualisiert den Wert des InputFields für den Verwendungszweck, welcher bei der Zahlung über Paypal angegeben werden soll\n        this.setState({ payPalVerwendung: event.target.value });\n    }\n\n    async assignPayPalValues() {\n        //Schreibt die festgelegten Werte für die PayPal-Verbindung ins Backend\n        var payPalLink = this.state.payPalLink;\n        var payPalMail = this.state.payPalMail;\n        var payPalVerwendung = this.state.payPalVerwendung;\n        var payPalAktiviert = this.state.payPalAktiviert;\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                PayPal: {\n                    PayPal_Link: payPalLink,\n                    PayPal_Mail: payPalMail,\n                    PayPal_Verwendung: payPalVerwendung,\n                    Aktiviert: payPalAktiviert\n                }\n\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Konfigurieren der PayPal-Verbindung vom Backend-Server erhalten!\");\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Setzten der Werte für die PayPal-Verbindung: \" + response.message);\n            return;\n        }\n\n        if (response.ok) {\n            console.log(\"Die Konfiguration der PayPal-Verbindung wurde erfolgreich geändert. Die gesetzten Werte sind: PayPal-Link: \" + payPalLink + \", PayPal-Mail: \" + payPalMail +\n                \", PayPal-Verwendungszweck: \" + payPalVerwendung);\n        }\n    }\n\n    switchBankStatus() {\n        //Ändert den angezeigten Status, wenn der Status der Bankverbindung geändert wird\n        if (this.props.bankStatus) {\n            return <Text weight=\"bold\"> Aktiviert </Text>\n        }\n        if (!this.props.bankStatus) {\n            return <Text weight=\"bold\"> Deaktiviert </Text>\n        }\n    }\n\n    setBankValuesAndChangeStep() {\n        //Setzt den Status für die QuickView der Bankverbindung in der Shopmanagement-Startseite\n        var bankStatusBoolean = \"\";\n        if (this.state.bankStatus === 'Deaktiviert') {\n            bankStatusBoolean = false;\n        }\n        if (this.state.bankStatus === 'Aktiviert') {\n            bankStatusBoolean = true;\n        }\n        if (bankStatusBoolean === this.props.bankStatus) {\n            alert(\"Der Status der Bankverbindung wurde wurde nicht verändert! Es wird keine Nachricht an das Backend gesendet\")\n            return;\n        }\n        if (bankStatusBoolean !== this.props.bankStatus) {\n            this.props.setConfBankStatus(bankStatusBoolean);\n        }\n\n    }\n\n    switchPayPalStatus() {\n        //Ändert den angezeigten Status, wenn der Status der PayPal-Verbindung geändert wird\n        if (this.props.payPalStatus) {\n            return <Text weight=\"bold\"> Aktiviert </Text>\n        }\n        if (!this.props.payPalStatus) {\n            return <Text weight=\"bold\"> Deaktiviert </Text>\n        }\n    }\n\n    setPayPalValuesAndChangeStep() {\n        //Setzt den Status für die QuickView der PayPal-Verbindung in der Shopmanagement-Startseite\n        var payPalStatusBoolean = \"\";\n        if (this.state.payPalStatus === 'Deaktiviert') {\n            payPalStatusBoolean = false;\n        }\n        if (this.state.payPalStatus === 'Aktiviert') {\n            payPalStatusBoolean = true;\n        }\n        if (payPalStatusBoolean === this.props.payPalStatus) {\n            alert(\"Der Status der Bankverbindung wurde wurde nicht verändert! Es wird keine Nachricht an das Backend gesendet\");\n            return;\n        }\n        if (payPalStatusBoolean !== this.props.payPalStatus) {\n            this.props.setConfPayPalStatus(payPalStatusBoolean);\n        }\n\n    }\n\n\n    render() {\n        //Stellt die Festlegung und Aktivierung bzw. Deaktivierung von Zahlungsmethoden im Browser dar\n        var ansicht = [];\n        return (\n            ansicht[0] =\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Heading align=\"center\" size=\"small\">Konfiguration der Zahlungsmethoden</Heading>\n                <Box pad=\"small\" gap=\"small\" align=\"center\">\n                    <Box pad=\"medium\" gap=\"small\">\n                        <Text><b>Konfiguration einer Bankverbindung</b></Text>\n                        <TextInput placeholder=\"Name des Empfängers\" value={this.state.receiverName} onChange={this.receiverNameHandler}></TextInput>\n                        <TextInput placeholder=\"Name der Bank\" value={this.state.bankName} onChange={this.bankNameHandler}></TextInput>\n                        <TextInput placeholder=\"IBAN\" value={this.state.iban} onChange={this.ibanHandler}></TextInput>\n                        <TextInput placeholder=\"BIC\" value={this.state.bic} onChange={this.bicHandler}></TextInput>\n                        <TextInput placeholder=\"Verwendungszweck\" value={this.state.verwendung} onChange={this.verwendungHandler}></TextInput>\n                        <Button label=\"Angaben für die Bankverbindung bestätigen\" onClick={this.assignBankValues}></Button>\n                        <Box>\n                            <Text>Die Bankverbindung ist derzeit: {this.switchBankStatus()} </Text>\n                        </Box>\n                        <Box>\n                            <Select\n                                options={['Aktiviert', 'Deaktiviert']}\n                                value={this.state.bankStatus}\n                                onChange={({ option }) => { this.setState({ bankStatus: option }) }}\n                            />\n                            <Button label=\"Auswahl bestätigen\" onClick={this.setBankValuesAndChangeStep}></Button>\n                        </Box>\n                    </Box>\n                    <Box pad=\"medium\" gap=\"small\">\n                        <Text><b>Konfiguration einer PayPal-Verbindung</b></Text>\n                        <TextInput placeholder=\"PayPal.me-Link\" value={this.state.payPalLink} onChange={this.payPalLinkHandler}></TextInput>\n                        <TextInput placeholder=\"PayPal Mail-Adresse\" value={this.state.payPalMail} onChange={this.payPalMailHandler}></TextInput>\n                        <TextInput placeholder=\"PayPal Verwendungszweck\" value={this.state.payPalVerwendung} onChange={this.payPalVerwendungHandler}></TextInput>\n                        <Button label=\"Angaben für die PayPal-Verbindung bestätigen\" onClick={this.assignPayPalValues}></Button>\n                        <Box>\n                        <Text>Die PayPal-Verbindung ist derzeit: {this.switchPayPalStatus()} </Text>\n                        </Box>\n                        <Box>\n                            <Select\n                                options={['Aktiviert', 'Deaktiviert']}\n                                value={this.state.payPalStatus}\n                                onChange={({ option }) => { this.setState({ payPalStatus: option }) }}\n                            />\n                            <Button label=\"Auswahl bestätigen\" onClick={this.setPayPalValuesAndChangeStep}></Button>\n                        </Box>\n                    </Box>\n                    <Button label=\"Zurück zur Übersicht\" onClick={this.changeStep}></Button>\n                </Box>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementPaymentOptions;","import React from 'react';\nimport { Box, Button, Text, TextInput, Select } from 'grommet';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementManageOTPS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            OTP: \"\",\n            role: 1,\n            lastEmail: \"\",\n            lastRole: \"\"\n        }\n\n        this.changeToShopMangement = this.changeToShopMangement.bind(this)\n        this.addOTP = this.addOTP.bind(this);\n    }\n\n    changeToShopMangement() {\n        window.location.assign(\"#/eventmgmt/shop\");\n    }\n\n    async addOTP() {\n        var role;\n        if (this.state.role === \"Administrator\") {\n            role = 0;\n        }\n        if (this.state.salesStatus === \"Absolvent\") {\n            role = 1;\n        }\n        var response = await this.props.createOTPwithEmailAndRole(this.state.OTP, role)\n        if (response === 1) {\n            this.setState({ lastEmail: this.state.OTP, lastRole: this.state.role })\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        return (\n            Ansicht[0] =\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\" style={{ position: 'absolute', left: '40%', top: '10%' }}>\n                <Text weight=\"bold\" size=\"xxlarge\">Verwaltung der One Time Passwörter</Text>\n                <Box pad=\"medium\" direction=\"column\">\n                    <Text>Letzter hinzugefügter Datensatz</Text>\n                    <Text weight=\"bold\">E-Mail-Adresse: {this.state.lastEmail} </Text>\n                    <Text weight=\"bold\">Rolle: {this.state.lastRole} </Text>\n\n\n                </Box>\n                <Box pad=\"medium\" direction=\"row\">\n                    <TextInput\n                        placeholder=\"Hier E-Mail-Adresse eingeben\"\n                        value={this.state.OTP}\n                        onChange={(event) => { this.setState({ OTP: event.target.value }) }}\n                    />\n                    <Select\n                        placeholder=\"Rolle auswählen\"\n                        options={['Administrator', 'Absolvent']}\n                        value={this.state.role}\n                        onChange={({ option }) => { this.setState({ role: option }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\" direction=\"row\">\n                    <Button label=\"Zurück\" onClick={this.changeToShopMangement}></Button>\n                    <Button label=\"Hinzufügen\" onClick={this.addOTP}></Button>\n                </Box>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementManageOTPS;\n","import React from 'react';\nimport { Box, Button, Text, List, TextInput } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\nimport UserContext from '../../AppContexts/UserContext'\n\n\nclass ShopManagementViewOTPs extends React.Component {\n\n    static contextType = UserContext;\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            OTPs: [],\n            searchOTP: \"\",\n            headline1: [{\n                id: \"ID des One Time Passworts\", email: \"E-Mail-Adresse des Benutzers\",\n                targetRole: \"Rolle für den Benutzer\", createdAt: \"Erstellungsdatum\", cancel: \"OTP löschen\"\n            }],\n        };\n        this.getOTPs = this.getOTPs.bind(this);\n        this.changeStep = this.changeStep.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.searchOTPHandler = this.searchOTPHandler.bind(this);\n        this.deleteOtp = this.deleteOtp.bind(this);\n    }\n\n    componentDidMount() {\n        this.getOTPs();\n    }\n\n    //Get all OTPs from Database\n    async getOTPs() {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/oneTimePasses/', {\n            method: 'GET',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            console.log(response.message)\n            return;\n        } else {\n\n            //Change Value from Roles to String\n            var otps = await response.json().catch(console.log);\n            var otpsRole = []\n            otps.forEach(otp => {\n                if(otp.targetRole === 1){ \n                    otp.targetRole = \"Absolvent\";\n                }\n                else if(otp.targetRole === 0){\n                    otp.targetRole = \"Administrator\"\n                }else{\n                    otp.targetRole = \"Undefined\"\n                }\n                otpsRole.push(otp)\n                \n            });\n            this.setState({ OTPs: otpsRole })\n        }\n    }\n    //Delete OTP from Database\n    async deleteOtp(optId) {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/oneTimePasses/' + optId, {\n            method: 'DELETE',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Die Lösung des One Time Passworts ist Fehlgeschlagen\");\n            return\n        } else {\n            alert(\"Das One Time Passwort mit der: \" + optId + \" wurde gelöscht.\");\n            this.componentDidMount();\n        }\n    }\n\n    //Switch View to ShopManagement\n    changeStep() {\n        window.location.assign('#/eventmgmt/shop');\n    }\n\n    //Get ChangeEvent from Select and Set to component state\n    searchOTPHandler(event) {\n        this.setState({ searchOTP: event.target.value });\n    }\n\n    render() {\n        var ansicht = [];\n        let otps;\n        var mail = this.state.searchOTP;\n        if (mail !== \"\") {\n            otps = this.state.OTPs.filter((otp) => { return otp.email.toLowerCase().includes(mail.toLowerCase()) });\n        } else {\n            otps = this.state.OTPs;\n        }\n\n        return (\n            ansicht[0] =\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xlarge\">One Time Passwort Übersicht</Text>\n                <Box pad=\"medium\"></Box>\n                    <Text>Hier können die One Time Passwörter angezeigt und gelöscht werden.</Text>\n                <Box pad=\"medium\"></Box>\n                    <Button label=\"Zurück zur Übersichtsseite\" onClick={this.changeStep} pad=\"small\"></Button>\n                    <Box pad=\"medium\"></Box>\n                        <Box pad=\"small\">\n                            <List\n                                pad=\"medium\"\n                                alignSelf=\"stretch\"\n                                margin=\"small\"\n                                primaryKey={(headline1) => { return <b key={headline1.id + 't'}> {headline1.id || 'Unknown'} </b> }}\n                                secondaryKey={(headline1) => {\n                                    return <span key={headline1.id + 's'}> {\"|   \" + headline1.email + \"   |\" || 'Unknown'}\n                                        {headline1.createdAt + \"   |\" || 'Unknown'} {headline1.cancel + \"   |\" || 'Unknown'} </span>\n                                }}\n                                data={this.state.headline1}\n                            />\n                            <TextInput gap=\"small\" placeholder=\"Zum Suchen in den offenen Buchungen bitte eine E-Mail-Adresse eingeben\" value={this.state.searchOTP} onChange={this.searchOTPHandler}></TextInput>\n                            <List\n                                pad=\"medium\"\n                                alignSelf=\"stretch\"\n                                margin=\"small\"\n                                primaryKey={(otp) => { return <b key={otp.id + 't'}> {otp.id || 'Unknown'} </b> }}\n                                secondaryKey={(otp) => { return <span key={otp.id + 's'}> {\"|  \" + otp.email + \"    |\" || 'Unknown'} {otp.targetRole + \"    |\" || 'Unknown'}   {(new Date(otp.createdAt).toLocaleDateString()) || 'Unknown'} | <Button label=\"OTP löschen\" onClick={() => { this.deleteOtp(otp.id) }}></Button></span> }}\n                                data={otps}\n                            />\n                        </Box>\n            </Box>\n        );\n    }\n}\nexport default ShopManagementViewOTPs;","import React from 'react';\nimport { Box, Button, Text, DataTable } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport ShopManagementConfMaxTickets from './ShopManagementConfMaxTickets';\nimport ShopManagementSalesStatistics from './ShopManagementSalesStatistics';\nimport ShopManagementViewBookings from './ShopManagementViewBookings';\nimport ShopManagementManageSalesStatus from './ShopManagementManageSalesStatus';\nimport ShopManagamentAbsolventenListe from './ShopManagamentAbsolventenListe';\nimport ShopManagementPaymentOptions from './ShopManagementPaymentOptions';\nimport { Switch, Route } from \"react-router-dom\";\nimport UserContext from '../../AppContexts/UserContext';\nimport ShopManagementManageOTPS from './ShopManagementManageOTPS'\nimport ShopManagementViewOTPs from './ShopManagementViewOTPs'\n\nclass DataQuickViewMaxTickets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagamentConfTickets = this.callShopManagamentConfTickets.bind(this);\n    }\n\n    //Switch to Component ConfMaxTickets\n    callShopManagamentConfTickets() {\n        window.location.assign(\"#/eventmgmt/shop/ConfMaxTickets\")\n    }\n\n    render() {\n        return (\n            <Box name=\"purchaseableTicketsPerPerson\" className=\"quickViewOuterBox\" >\n                <Text>Ticketanzahl die ein Absolvent erwerben kann:</Text>\n                <Box className=\"platzhalter\" ></Box>\n                <DataTable className=\"quickViewDatatables\"\n                    columns={[\n                        {\n                            property: 'Tickettype',\n                            header: <Text weight=\"bold\">Tickettyp</Text>,\n                            primary: true,\n                        },\n                        {\n                            property: 'Anzahl',\n                            header: <Text weight=\"bold\">freigebene Anzahl</Text>,\n                        },\n                    ]}\n                    data={this.props.maxTicketmenge}\n                />\n                <Box className=\"platzhalter\" ></Box>\n                <Box className=\"ButtonBox\">\n                    <Button className=\"buttonInDash\" label=\"Ticketanzahl konfigurieren\" onClick={this.callShopManagamentConfTickets}></Button>\n                </Box>\n            </Box>\n        )\n    }\n}\n\nclass DataQuickViewPayment extends React.Component {\n    //Gibt einen Schnellüberblick über die eingestellten Zahlungsmethoden und deren Status\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    //Leitet den User zur Konfiguration der Zahlungmethoden weiter\n    callConfiguratePaymentMethods() {\n        window.location.assign(\"#/eventmgmt/shop/paymentOptions\")\n    }\n\n    componentDidMount() {\n        //Ruft beim Laden der Komponente den Aktuellen Status der Bank- und PayPal-Verbindung ab\n        this.props.getBankStatus();\n        this.props.getPayPalStatus();\n    }\n\n\n    render() {\n        //Stellt den Schnellüberblick für die Zahlungsmethoden im Browser dar\n        var bezahl = [];\n        if (this.props.bankStatus) { bezahl.push({ BezahlOption: \"Banküberweisung\", Status: \"Aktiv\" }) };\n        if (!this.props.bankStatus) { bezahl.push({ BezahlOption: \"Banküberweisung\", Status: \"Deaktiviert\" }) };\n        if (this.props.payPalStatus) { bezahl.push({ BezahlOption: \"PayPal\", Status: \"Aktiv\" }) };\n        if (!this.props.payPalStatus) { bezahl.push({ BezahlOption: \"PayPal\", Status: \"Deaktiviert\" }) };\n\n        return (\n            <Box name=\"paymentOptions\" className=\"quickViewOuterBox\">\n                <Text>Übersicht der konfigurierten Bezahloptionen:</Text>\n                <Box className=\"platzhalter\" ></Box>\n                <DataTable className=\"quickViewDatatables\"\n                    columns={[\n                        {\n                            property: 'BezahlOption',\n                            header: <Text weight=\"bold\">Bezahloption</Text>,\n                            primary: true,\n                        },\n                        {\n                            property: 'Status',\n                            header: <Text weight=\"bold\">Status?</Text>,\n                        },\n                    ]}\n                    data={bezahl}\n                />\n                <Box className=\"platzhalter\" ></Box>\n                <Box className=\"ButtonBox\">\n                    <Button className=\"buttonInDash\" label=\"Bezahloptionen konfigurieren\" onClick={this.callConfiguratePaymentMethods}></Button>\n                </Box>\n            </Box>\n        )\n    }\n}\nclass DataQuickViewBookings extends React.Component {\n    //Gibt einen Schnellüberblick über die im System vorhandenen Buchungen\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagementViewBookings = this.callShopManagementViewBookings.bind(this);\n    }\n\n    callShopManagementViewBookings() {\n        //Leitet den User zur detailierten Buchungsübersicht und -freigabe weiter\n        window.location.assign('#/eventmgmt/shop/viewBookings')\n    }\n\n    render() {\n        //Stellt den Schnellüberblick für die Buchungen im Browser dar\n        return (\n            <Box name=\"statusBookings\" className=\"quickViewOuterBox\">\n                <Text>Anzahl und Status der Buchungen im System:</Text>\n                <Box className=\"platzhalter\" ></Box>\n                <DataTable className=\"quickViewDatatables\"\n                    columns={[\n                        {\n                            property: 'status',\n                            header: <Text weight=\"bold\">Status</Text>,\n                            primary: true,\n                        },\n                        {\n                            property: 'Anzahl',\n                            header: <Text weight=\"bold\">Anzahl</Text>,\n                        },\n                    ]}\n                    data={this.props.statusBookings}\n                />\n                <Box className=\"platzhalter\" ></Box>\n                <Box className=\"ButtonBox\">\n                    <Button className=\"buttonInDash\" label=\"Buchungen \" onClick={this.callShopManagementViewBookings}></Button>\n                </Box>\n            </Box>\n        )\n    }\n}\n\nclass DataQuickViewSalesStatistics extends React.Component {\n    //Schnellüberblick über die Anzahl der Tickets, die Vorhanden/Verkauft/Storniert sind, sowie über die Anzahl der Rollstuhlfahrer\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n    }\n\n\n    render() {\n        //Stellt den Schnellüberblick über die Tickets im Browser dar\n        return (\n            <Box name=\"statusSales\" className=\"quickViewOuterBox\">\n                <Text>Anzahl und Status der Ticketbuchungen im System:</Text>\n                <Box pad=\"small\"></Box>\n                <DataTable className=\"quickViewDatatables\"\n                    columns={[\n                        {\n                            property: 'status',\n                            header: <Text weight=\"bold\">Status</Text>,\n                            primary: true,\n                        },\n                        {\n                            property: 'Anzahl',\n                            header: <Text weight=\"bold\">Anzahl</Text>,\n                        },\n                    ]}\n                    data={this.props.statusSales}\n                />\n                <Box className=\"platzhalter\" ></Box>\n            </Box>\n        )\n    }\n}\n\nclass DataQuickViewManageSales extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagementManageSales = this.callShopManagementManageSales.bind(this);\n    }\n\n\n    callShopManagementManageSales() {\n        window.location.assign(\"#/eventmgmt/shop/ManageSalesStatus\")\n    }\n\n\n    render() {\n        var salesStatus;\n        if (this.props.salesStatus) { salesStatus = [{ Beschreibung: \"Ticketverkauf\", Status: \"Aktiv\" }]; };\n        if (!this.props.salesStatus) { salesStatus = [{ Beschreibung: \"Ticketverkauf\", Status: \"Deaktiviert\" }]; };\n\n        return (\n            <Box name=\"boxManageSales\" className=\"quickViewOuterBox\">\n                <Text>Anzeige für den Status und das aktivieren und\n                deaktivieren des Ticketverkaufs</Text>\n                <Box pad=\"small\"></Box>\n                <DataTable className=\"quickViewDatatables\"\n                    columns={[\n                        {\n                            property: 'Beschreibung',\n                            header: <Text weight=\"bold\">Status</Text>,\n                            primary: true,\n                        },\n                        {\n                            property: 'Status',\n                            header: <Text weight=\"bold\">Anzahl</Text>,\n                        },\n                    ]}\n                    data={salesStatus}\n                />\n                <Box className=\"platzhalter\" ></Box>\n                <Box Class-Name=\"ButtonBox\">\n                    <Button className=\"buttonInDash\" label=\"Status ändern\" onClick={this.callShopManagementManageSales}></Button>\n                </Box>\n            </Box>\n        )\n    }\n}\n\nclass DataQuickViewCreateOTPS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.callShopManagementCreateOTPS = this.callShopManagementCreateOTPS.bind(this)\n    }\n\n    callShopManagementCreateOTPS() {\n        window.location.assign(\"#/eventmgmt/shop/createOTPS\")\n    }\n\n    switchInitialList() {\n        if (this.props.initialList) {\n            return \"Eingelesen\"\n        }\n        if (!this.props.initialList) {\n            return \"Nicht Eingelesen\"\n        }\n\n    }\n\n    render() {\n        return (\n            <Box name=\"CreateOTPS\" className=\"quickViewOuterBox\">\n                <Text>Einlesen einer E-Mail Liste zum Erstellen von One Time Passwörtern:</Text>\n                <Box pad=\"small\"></Box>\n\n                <Text>Initiale Erstellung durchgeführt: </Text><Text weight=\"bold\">{this.switchInitialList()}</Text>\n                <Box className=\"platzhalter\" ></Box>\n                <Box Class-Name=\"ButtonBox\">\n                    <Button className=\"buttonInDash\" label=\"Liste einlesen\" onClick={this.callShopManagementCreateOTPS}></Button>\n                </Box>\n            </Box>\n        )\n    }\n}\nclass DataQuickViewManageOTPS extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.callShopManagementCreateOTPS = this.callShopManagementCreateOTPS.bind(this)\n    }\n\n    callShopManagementCreateOTPS() {\n        window.location.assign(\"#/eventmgmt/shop/ManageOTPS\")\n    }\n\n    render() {\n        return (\n            <Box name=\"CreateOTPS\" className=\"quickViewOuterBox\">\n                <Text weight=\"bold\" size=\"large\">Erstellen neuer One Time Passwörter</Text>\n                <Box pad=\"small\" align=\"center\">\n                    <Text>Zum Erstellen neuer One Time Passwörter für:</Text>\n                    <Text weight=\"bold\">- Administratoren</Text>\n                    <Text weight=\"bold\">- Absolventen</Text>\n                </Box>\n                <Button className=\"buttonInDash\" label=\"One Time Passwort verwalten\" onClick={this.callShopManagementCreateOTPS}></Button>\n            </Box>\n        )\n    }\n}\n\nclass DataQuickViewViewOTPs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.callShopManagementViewOTPS = this.callShopManagementViewOTPS.bind(this)\n    }\n\n    callShopManagementViewOTPS() {\n        window.location.assign(\"#/eventmgmt/shop/ViewOTPs\")\n    }\n\n    render() {\n        return (\n            <Box name=\"CreateOTPS\" className=\"quickViewOuterBox\">\n                <Text weight=\"bold\" size=\"large\">Vorhandene One Time Passwörter</Text>\n                <Box pad=\"small\" align=\"center\">\n                    <Text>Liste mit den existierenden One Time Passwörtern und die Möglichkeit einzelne zu löschen.</Text>\n                </Box>\n                <Button className=\"buttonInDash\" label=\"One Time Passwort verwalten\" onClick={this.callShopManagementViewOTPS}></Button>\n            </Box>\n        )\n    }\n}\n\nclass ShopManagement extends React.Component {\n    //Stellt die Übersichtsseite des Shopmanagements im Browser dar\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            initializeStep: 0,\n            openBookings: 0,\n            initialList: false,\n            salesStatus: true,\n            bankStatus: false,\n            payPalStatus: false,\n            maxPersonenProEvent: 0,\n            maxTicketsProEvent: 0,\n            maxTicketmenge: [{ Tickettype: \"Absolvententickets\", Anzahl: 1 },\n            { Tickettype: \"Begleitertickets\", Anzahl: 2 }],\n            statusBookings:\n                [{ status: \"Gebucht\", Anzahl: 0 },\n                { status: \"Offen\", Anzahl: 0 },\n                { status: \"Storniert\", Anzahl: 0 }],\n            statusSales:\n                [{ status: \"Verfügbar\", Anzahl: 0 },\n                { status: \"Verkauft\", Anzahl: 0 },\n                { status: \"Storniert\", Anzahl: 0 },\n                { status: \"Rollstuhlfahrer\", Anzahl: 0 }],\n        }\n        this.changeInitializeStep = this.changeInitializeStep.bind(this);\n        this.getValuesFromConfig = this.getValuesFromConfig.bind(this);\n        this.setConfMaxTicketsFromConf = this.setConfMaxTicketsFromConf.bind(this);\n        this.setMaxTicketMenge = this.setMaxTicketMenge.bind(this);\n        this.getBookings = this.getBookings.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n        this.setConfSalesStatus = this.setConfSalesStatus.bind(this);\n        this.createOTPwithEmailAndRole = this.createOTPwithEmailAndRole.bind(this);\n        this.setShopConfigInitialList = this.setShopConfigInitialList.bind(this);\n        this.setBankStatus = this.setBankStatus.bind(this);\n        this.setPayPalStatus = this.setPayPalStatus.bind(this);\n        this.setConfBankStatus = this.setConfBankStatus.bind(this);\n        this.setConfPayPalStatus = this.setConfPayPalStatus.bind(this);\n        this.getPayPalStatus = this.getPayPalStatus.bind(this);\n        this.getBankStatus = this.getBankStatus.bind(this);\n        this.getTickets = this.getTickets.bind(this);\n        this.setTickets = this.setTickets.bind(this);\n    }\n\n    changeInitializeStep(value) {\n        this.setState({ initializeStep: value });\n    }\n\n    // Initialize Component - Execute Functions for 1. Get Bookings 2. Get Max Tickets\n    componentDidMount() {\n        this.getBookings();\n        this.getTickets();\n        this.getValuesFromConfig();\n    }\n\n    async getBookings() {\n        //Ruft die Buchungen aus dem Backend ab, um diese in der Schnellübersicht darstellen zu können\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/', {\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            switch (response.status) {\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                case 501:\n                    alert(\"Der Server kann die gewünschte Anfrage nicht ausführen.\");\n                    break;\n                default:\n                    let res = await response.json().catch(console.log);\n                    alert(res.message);\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                var bezahlt = 0;\n                var unbezahlt = 0;\n                var storniert = 0;\n                for (var test = 0; test < rückgabe.length; test++) {\n                    if (rückgabe[test].paidAt !== null && rückgabe[test].canceled === false) {\n                        bezahlt = bezahlt + 1;\n                    }\n                    if (rückgabe[test].paidAt === null && rückgabe[test].canceled === false) {\n                        unbezahlt = unbezahlt + 1;\n                    }\n                    if (rückgabe[test].canceled === true) {\n                        storniert = storniert + 1;\n                    }\n                }\n                this.setBookings(bezahlt, unbezahlt, storniert);\n            }\n        }\n    }\n\n    async getTickets() {\n        //Ruft die Tickets aus dem Backend ab, um diese in der Schnellübersicht darstellen zu können\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/ticketsBooked', {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abruf der Tickets erhalten\");\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Abruf der Tickets: \" + response.message);\n            return;\n        }\n        if (response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                var verfügbar = this.state.maxTicketsProEvent;\n                var verkauft = 0;\n                var storniert = 0;\n                var rollstuhlFahrer = 0;\n                \n                    if (verfügbar) {\n                        for (var lauf = 0; lauf < rückgabe.length; lauf++) {\n                            if (rückgabe[lauf].createdAt && rückgabe[lauf].canceled !== true) {\n                                verkauft = verkauft + 1;\n                            }\n                            if (rückgabe[lauf].createdAt && rückgabe[lauf].canceled === true) {\n                                storniert = storniert + 1;\n                            }\n                            if (rückgabe[lauf].isWheelchairUser === true) {\n                                rollstuhlFahrer = rollstuhlFahrer + 1;\n                            }\n                        }\n                        verfügbar = verfügbar - verkauft;\n                        this.setTickets(verfügbar, verkauft, storniert, rollstuhlFahrer);\n                    }\n            }\n        }\n    }\n\n    //Get Max Tickets Configured form Configuration\n    async getValuesFromConfig() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abruf der Konfiguration erhalten!\")\n            return;\n        }\n\n        if (!response.ok) {\n            console.log(\"Fehler beim Abrufen der Konfiguration: \" + response.message)\n            return;\n        }\n        if (response.ok) {\n            var data = await response.json().catch(console.log)\n\n            if (!data) {\n                console.log(\"Keine Daten beim Abruf der Konfiugration erhalten!\")\n                return;\n            }\n            else {\n                var maxTickets = [{ Tickettype: \"Absolvententickets\", Anzahl: data.max_TicketType_0_pro_Absolvent },\n                { Tickettype: \"Begleitertickets\", Anzahl: data.max_TicketType_1_pro_Absolvent }]\n                this.setState({\n                    salesStatus: data.salesStatus,\n                    maxPersonenProEvent: data.max_Person_pro_Event,\n                    maxTicketsProEvent: data.max_Tickets_pro_Event,\n                    initialList: data.initialeOPTListe,\n                    maxTicketmenge: maxTickets\n                })\n                console.log(\"Die Konfiguration wurde erfolgreich eingelesen!\");\n            }\n        }\n    }\n\n    // Write new Max Tickets into Configuration \n    async setConfMaxTicketsFromConf(absolvententickets, begleitertickets) {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                max_TicketType_0_pro_Absolvent: absolvententickets,\n                max_TicketType_1_pro_Absolvent: begleitertickets\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Setzen der maximalen Ticketanzahl vom Backend-Server erhalten!\");\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Setzten der Werte für die maximale Ticketanzahl: \" + response.message);\n            return;\n        }\n\n        if (response.ok) {\n            this.setMaxTicketMenge(absolvententickets, begleitertickets)\n            console.log(\"Die Anzahl der Maximalen Tickets pro Absolvent wurde erfolgreich geändert!\")\n        }\n    };\n\n    //Write max Tickets into Component State \n    setMaxTicketMenge(Absolvententickets, Begleitertickets) {\n        var data = [{ Tickettype: \"Absolvententickets\", Anzahl: typeof Absolvententickets === Number ? Absolvententickets : 0 },\n        { Tickettype: \"Begleitertickets\", Anzahl: typeof Begleitertickets === Number ? Begleitertickets : 0 }]\n        this.setState({ maxTicketmenge: data })\n    }\n\n    setBookings(bezahlt, unbezahlt, storniert) {\n        var data = [{ status: \"Gebucht\", Anzahl: bezahlt},\n        { status: \"Offen\", Anzahl: unbezahlt},\n        { status: \"Storniert\", Anzahl: storniert}];\n        this.setState({ statusBookings: data });\n    }\n\n    setTickets(verfügbar, verkauft, storniert, rollstuhlFahrer) {\n        var data = [{ status: \"Verfügbar\", Anzahl: verfügbar},\n        { status: \"Verkauft\", Anzahl: verkauft},\n        { status: \"Storniert\", Anzahl: storniert},\n        { status: \"Rollstuhlfahrer\", Anzahl: rollstuhlFahrer}];\n        this.setState({ statusSales: data });\n    }\n\n    // Write Sales Status to Config \n    async setConfSalesStatus(newSalesStatus) {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                salesStatus: newSalesStatus\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Setzen des Verkaufsstatus vom Backend-Server erhalten!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Setzten des Wertes für den Verkaufsstatus: \" + response.message)\n            return;\n        }\n\n        if (response.ok) {\n            this.setSalesStatus(newSalesStatus)\n            if (newSalesStatus) { console.log(\"Der Verkauf wurde aktiviert!\") };\n            if (!newSalesStatus) { console.log(\"Der Verkauf wurde deaktiviert!\") };\n        }\n    };\n\n    // Write salesStatus into Component State\n    setSalesStatus(status) {\n        this.setState({ salesStatus: status });\n    }\n\n    //Send E-Mail and Role to create a One Time Passwort\n    async createOTPwithEmailAndRole(eMail, role) {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/oneTimePasses\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                email: eMail,\n                targetRole: role\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort vom Backend bei der Erstellung des One Time Passworts für die E-Mail:\" + eMail)\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler bei der Erstellung eines One Time Passwortes: \" + response.message)\n            return;\n        }\n        if (response.ok) {\n            console.log(\"One Time Passwort für die E-Mail: \" + eMail + \" und der Rolle: \" + role + \" erstellt!\")\n            return 1;\n        }\n    };\n\n    //TODO: DELETE OTPS \n    async deleteOTPwithEmail(eMail) {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/oneTimePasses\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                email: eMail\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort vom Backend bei der Erstellung des One Time Passworts für die E-Mail:\" + eMail)\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler bei der Erstellung eines One Time Passwortes: \" + response.message)\n            return;\n        }\n        if (response.ok) {\n            console.log(\"One Time Passwort mit der E-Mail: \" + eMail + \" gelöscht\")\n            return 1;\n        }\n\n\n    }\n    //TODO CHECK\n    async setShopConfigInitialList(intialListStatus) {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                initialeOPTListe: intialListStatus\n            })\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Setzen des Wertes für die intiale OTP-Liste!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Setzten des Wertes für die intiale OTP-Liste: \" + response.message)\n        }\n\n        if (response.ok) {\n            if (intialListStatus) { console.log(\"Intiale OTP-Liste wurde eingelesen\") };\n            this.setState({ initialList: true })\n        }\n    };\n\n    async setConfBankStatus(newBankStatus) {\n        //Ändert den Status der Bankverbindung in der Schnellübersicht, wenn diese in den PaymentOptions verändert wird\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abrufen der Bankverbindung vom Backend-Server erhalten!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Abrufen der Bankverbindung vom Backendserver: \" + response.message)\n            return;\n        }\n\n        if (response.ok) {\n            var paymentOptions = await response.json();\n            paymentOptions.Bank.Aktiviert = newBankStatus;\n            var response2 = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n                method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + this.context.token,\n                },\n                body: JSON.stringify({\n                    Bank: {\n                        Empfänger: paymentOptions.Bank.Empfänger,\n                        Name_der_Bank: paymentOptions.Bank.Name_der_Bank,\n                        IBAN: paymentOptions.Bank.IBAN,\n                        BIC: paymentOptions.Bank.BIC,\n                        Verwendungszweck: paymentOptions.Bank.Verwendungszweck,\n                        Aktiviert: paymentOptions.Bank.Aktiviert\n                    }\n                })\n            }).catch(console.log)\n\n            if (!response2) {\n                console.log(\"Keine Antwort beim Schreiben der Bankverbindung auf den Backend-Server!\");\n                return;\n            }\n            if (!response2.ok) {\n                console.log(\"Fehler beim Schreiben der Bankverbindung auf den Backend-Server: \" + response2.message);\n                return;\n            }\n            if (response2.ok) {\n                this.setBankStatus(newBankStatus)\n                if (newBankStatus) { console.log(\"Die Bankverbindung wurde aktiviert!\") };\n                if (!newBankStatus) { console.log(\"Die Bankverbindung wurde deaktiviert!\") };\n            }\n        }\n    };\n\n\n    async setConfPayPalStatus(newPayPalStatus) {\n        //Ändert den Status der PayPal-Verbindung in der Schnellübersicht, wenn diese in den PaymentOptions verändert wird\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abrufen der PayPal-Verbindung vom Backend-Server erhalten!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Abrufen der PayPal-Verbindung vom Backendserver: \" + response.message)\n            return;\n        }\n        var paymentOptions = await response.json();\n        paymentOptions.PayPal.Aktiviert = newPayPalStatus;\n        var response2 = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n            body: JSON.stringify({\n                PayPal: {\n                    PayPal_Link: paymentOptions.PayPal.PayPal_Link,\n                    PayPal_Mail: paymentOptions.PayPal.PayPal_Mail,\n                    PayPal_Verwendung: paymentOptions.PayPal.PayPal_Verwendung,\n                    Aktiviert: paymentOptions.PayPal.Aktiviert\n                }\n            })\n        }).catch(console.log)\n\n        if (!response2) {\n            console.log(\"Keine Antwort beim Schreiben der PayPal-Verbindung auf den Backend-Server!\");\n            return;\n        }\n        if (!response2.ok) {\n            console.log(\"Fehler beim Schreiben der PayPal-Verbindung auf den Backend-Server: \" + response2.message);\n            return;\n        }\n        if (response2.ok) {\n            this.setPayPalStatus(newPayPalStatus)\n            if (newPayPalStatus) { console.log(\"Die PayPal-Verbindung wurde aktiviert!\") };\n            if (!newPayPalStatus) { console.log(\"Die PayPal-Verbindung wurde deaktiviert!\") };\n        }\n    }\n\n    setBankStatus(status) {\n        //Setzt den lokalen Status der Bankverbindung\n        this.setState({ bankStatus: status });\n    }\n\n    setPayPalStatus(status) {\n        //Setzt den lokalen Status der PayPal-Verbindung\n        this.setState({ payPalStatus: status });\n    }\n\n    async getBankStatus() {\n        //Ruft den aktuellen Bankverbindungsstatus aus der Backend-Config ab\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abrufen der Bankverbindung vom Backend-Server erhalten!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Abrufen der Bankverbindung vom Backendserver: \" + response.message)\n            return;\n        }\n\n        if (response.ok) {\n            var paymentOptions = await response.json();\n            this.setState({ bankStatus: paymentOptions.Bank.Aktiviert });\n            console.log(\"Der aktuelle Status der Bankverbindung ist: \" + this.state.bankStatus);\n        }\n    }\n\n\n    async getPayPalStatus() {\n        //Ruft den aktuellen PayPal-Verbindungsstatus aus der Backend-Config ab\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/paymentOptions\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log)\n\n        if (!response) {\n            console.log(\"Keine Antwort beim Abrufen der PayPal-Verbindung vom Backend-Server erhalten!\")\n            return;\n        }\n        if (!response.ok) {\n            console.log(\"Fehler beim Abrufen der PayPal-Verbindung vom Backendserver: \" + response.message)\n            return;\n        }\n        if (response.ok) {\n            var paymentOptions = await response.json();\n            this.setState({ payPalStatus: paymentOptions.PayPal.Aktiviert });\n            console.log(\"Der aktuelle Status der PayPal-Verbindung ist: \" + this.state.payPalStatus);\n        }\n    }\n\n\n\n    render() {\n        return (\n            <Switch>\n                <Route path=\"/eventmgmt/shop/ConfMaxTickets\">\n                    <ShopManagementConfMaxTickets setConfMaxTicketsFromConf={this.setConfMaxTicketsFromConf}>\n                    </ShopManagementConfMaxTickets>\n                </Route>\n\n                <Route path=\"/eventmgmt/shop/ViewBookings\">\n                    <ShopManagementViewBookings ></ShopManagementViewBookings>\n                </Route>\n\n                <Route path=\"/eventmgmt/shop/paymentOptions\">\n                    <ShopManagementPaymentOptions bankStatus={this.state.bankStatus} setConfBankStatus={this.setConfBankStatus} payPalStatus={this.state.payPalStatus}\n                        setConfPayPalStatus={this.setConfPayPalStatus}></ShopManagementPaymentOptions>\n                </Route>\n\n                <Route path=\"/eventmgmt/shop/SalesStatistics\">\n                    <ShopManagementSalesStatistics></ShopManagementSalesStatistics>\n                </Route>\n\n                <Route path=\"/eventmgmt/shop/ManageSalesStatus\">\n                    <ShopManagementManageSalesStatus salesStatus={this.state.salesStatus} setConfSalesStatus={this.setConfSalesStatus}></ShopManagementManageSalesStatus>\n                </Route>\n\n                <Route path=\"/eventmgmt/shop/createOTPs\">\n                    <ShopManagamentAbsolventenListe createOTPwithEmailAndRole={this.createOTPwithEmailAndRole} setShopConfigInitialList={this.setShopConfigInitialList}></ShopManagamentAbsolventenListe>\n                </Route>\n                <Route path=\"/eventmgmt/shop/ManageOTPs\">\n                    <ShopManagementManageOTPS createOTPwithEmailAndRole={this.createOTPwithEmailAndRole}></ShopManagementManageOTPS>\n                </Route>\n                <Route path=\"/eventmgmt/shop/ViewOTPs\">\n                    <ShopManagementViewOTPs></ShopManagementViewOTPs>\n                </Route>\n\n\n                <Route path=\"/eventmgmt/shop\">\n                    <Box>\n                        <Box>\n                            <Text size=\"xxlarge\" weight=\"bold\" alignSelf=\"center\">Willkommen in der Shop-Verwaltung</Text>\n                            <Box pad=\"medium\"></Box>\n                            <Button label=\"QuickView aktualisieren\" onClick={this.componentDidMount}></Button>\n                        </Box>\n                        <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap={true} justify=\"center\">\n                            <DataQuickViewMaxTickets maxTicketmenge={this.state.maxTicketmenge}></DataQuickViewMaxTickets>\n                            <DataQuickViewPayment bankStatus={this.state.bankStatus} getBankStatus={this.getBankStatus} payPalStatus={this.state.payPalStatus}\n                                getPayPalStatus={this.getPayPalStatus}></DataQuickViewPayment>\n                        </Box>\n                        <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap={true}>\n                            <DataQuickViewBookings statusBookings={this.state.statusBookings}></DataQuickViewBookings>\n                            <DataQuickViewSalesStatistics statusSales={this.state.statusSales}></DataQuickViewSalesStatistics>\n                        </Box>\n                        <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap={true}>\n                            <DataQuickViewManageSales salesStatus={this.state.salesStatus} setSalesStatus={this.setSalesStatus}></DataQuickViewManageSales>\n                            <DataQuickViewCreateOTPS initialList={this.state.initialList}></DataQuickViewCreateOTPS>\n                        </Box>\n                        <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap={true}>\n                            <DataQuickViewManageOTPS ></DataQuickViewManageOTPS>\n                            <DataQuickViewViewOTPs></DataQuickViewViewOTPs>\n                        </Box>\n                    </Box>\n                </Route>\n            </Switch>\n        );\n    }\n}\n\nexport default ShopManagement;\n","import React from 'react';\nimport { Box, Header, Menu } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport EntranceDashboard from './Components/EntranceDashboard';\nimport TicketReaderManager from './Components/TicketReaderManager';\nimport ShopManagement from './Components/ShopManagement';\nimport UserContext from '../AppContexts/UserContext';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    // FOR LOGIN\n\n    componentDidMount() {\n        this.context.requireLogin(1);\n    }\n\n    componentDidUpdate() {\n        this.context.requireLogin(1);\n    }\n\n    // END: FOR LOGIN\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    break;\n                case \"disconnected\":\n                    break;\n                case \"failed\":\n                    // One or more transports has terminated unexpectedly or in an error\n                    this.removeRTR(remoteTicketReader);\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    break;\n                default:\n                    break;\n            }\n            this.forceUpdate();\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => {\n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, secretIngredient, callback) => {\n            this.localTicketMirror.obliterateTicket(identifier, secretIngredient).then((result) => {\n                callback(result);\n            }).catch((error) => {\n                callback(null, error)\n            });\n        }\n    }\n\n    removeRTR(remoteTicketReader) {\n        console.debug(\"Attempting to remove closed remote ticket reader\");\n        let RTRList = this.state.RTRList;\n        let idx = RTRList.indexOf(remoteTicketReader);\n        RTRList.splice(idx, 1);\n        this.setState({ RTRList: RTRList });\n    }\n\n    render() {\n        return (\n\n            <Box className=\"EventManagement\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/eventmgmt\">Home</Link>\n                    <Menu label=\"Account\" items={[{ label: 'Logout', onClick: this.context.logout }]} />\n                </Header>\n                <Box className=\"left-right-grid\" direction=\"row\" justify=\"start\" wrap={true}>\n                    <Box className=\"sidebar\">\n                        <ul>\n                            <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                            <li><Link to=\"/eventmgmt/entrancedb\">Entrance Dashboard</Link></li>\n                            <li><Link to=\"/eventmgmt/shop\">Shop Management</Link></li>\n                        </ul>\n                    </Box>\n                    <Box className=\"main-content\" pad=\"medium\">\n                        <Switch>\n                            <Route path=\"/eventmgmt/rtrm\">\n                                <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                            </Route>\n                            <Route path=\"/eventmgmt/entrancedb\">\n                                <EntranceDashboard localTicketMirror={this.localTicketMirror} onRemoveRTR={() => { }}></EntranceDashboard>\n                            </Route>\n                            <Route path=\"/eventmgmt/shop\">\n                                <ShopManagement></ShopManagement>\n                            </Route>\n                        </Switch>\n                    </Box>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\n\nimport UserContext from './AppContexts/UserContext';\nimport Login from './Authentication/Login';\nimport SystemSetup from './SystemSetup/SystemSetup';\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport Entrance from './Entrance/Entrance';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet, Box, Heading } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport config from './config';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { userContext: null, setupMode: false };\n    this.logout = this.logout.bind(this);\n    this.initUserContext = this.initUserContext.bind(this);\n    this.setUserContext = this.setUserContext.bind(this);\n    this.checkUserContext = this.checkUserContext.bind(this);\n    this.redirectUserToHome = this.redirectUserToHome.bind(this);\n  }\n\n  componentDidMount() {\n    // Redirect if plain url was requested\n    if(window.location.hash === \"#/\" || window.location.hash === \"#\" || window.location.hash === \"\"){\n      window.location.assign('#/login/');\n    }\n\n    // Check system status once mounted\n    this.detectSystemState();\n\n    // Check system status frequently (currently every 60 seconds)\n    window.setInterval(() => {\n      this.detectSystemState();\n      this.detectAuthState(this.state.userContext);\n    }, 60000);\n\n    // Initialize userContext\n    this.initUserContext();\n  }\n\n  async detectSystemState() {\n    try {\n      var response = await fetch(config.BACKEND_BASE_URI, {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache'\n      })\n      if (response.status === 200) {\n        this.setState({ setupMode: false });\n      } else {\n        this.setState({ setupMode: true });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Tries to fetch the data of the user to check if the api token works\n   * @param {*} userData \n   */\n  async detectAuthState(userData) {\n    // Try token\n    try {\n      var response = await fetch(config.BACKEND_BASE_URI + \"/api/v2/users/\" + userData.user.id, {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n          Authorization: 'Bearer ' + userData.token\n        }\n      })\n      if (response.status === 401) {\n        this.clearUserContext();\n        this.setState({ userContext: null });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Loads the data of the user from LocalStorage into the UserContext\n   */\n  initUserContext() {\n    let userData = JSON.parse(localStorage.getItem('userContext'));\n    this.setState({ userContext: userData });\n    this.detectAuthState(userData);\n  }\n\n  /**\n   * Sets the current UserContext to new data\n   * @param {*} userData \n   */\n  setUserContext(userData) {\n    localStorage.setItem('userContext', JSON.stringify(userData));\n    this.setState({ userContext: userData });\n  }\n\n  /**\n   * Clears LocalStorage and the UserContext object\n   */\n  clearUserContext() {\n    localStorage.clear();\n    this.setState({ userContext: null });\n  }\n\n  /**\n   * Deletes data to prevent from reuse of the token and userdata\n   * finally redirects to login\n   */\n  logout() {\n    if (this.state.userContext && this.state.userContext.user.role === 0) {\n      let ok = window.confirm('Sollen auch eventuell lokal gespeicherten Daten für den Einlass unwiederruflich gelöscht werden?', \"Nein\");\n      if (ok) {\n        window.indexedDB.deleteDatabase(config.IDB_NAME);\n      }\n    }\n    this.clearUserContext();\n    window.location.assign('#/login');\n  }\n\n  /**\n   * Method that checks if the user is logged in. For use in subcomponents\n   * @param {Number} requiredRole - The role that is required\n   */\n  checkUserContext(requiredRole){\n    if (!this.state.userContext || this.state.userContext.user.role > requiredRole) {\n      window.location.assign('#/login/');\n    }\n  }\n\n  redirectUserToHome(){\n    if (this.state.userContext && this.state.userContext.user.role === 0) {\n      window.location.assign('#/eventmgmt/');\n      return;\n    }\n    if(this.state.userContext && this.state.userContext.user.role === 1) {\n      window.location.assign('#/guest/');\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <UserContext.Provider value={Object.assign(this.state.userContext ? this.state.userContext : {}, { logout: this.logout, setUserContext: this.setUserContext, requireLogin: this.checkUserContext , redirectUserToHome: this.redirectUserToHome })}>\n        <Grommet theme={grommet}>\n          {!this.state.setupMode &&\n            <Box>\n              <Switch>\n                <Route path=\"/guest\">\n                  <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n                </Route>\n                <Route path=\"/entrance\">\n                  <Entrance></Entrance>\n                </Route>\n                <Route path=\"/eventmgmt\">\n                  <EventManagement></EventManagement>\n                </Route>\n                <Route path=\"/login\">\n                  <Login></Login>\n                </Route>\n                <Route path=\"/\">\n                  <ul>\n                    <li><Link to=\"/guest\">Ticketshop</Link></li>\n                    <li><Link to=\"/entrance\">Ticket-Reader</Link></li>\n                    <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n                    <li><Link to=\"/login\">Anmelden</Link></li>\n                  </ul>\n                </Route>\n              </Switch>\n            </Box>\n          }\n          {this.state.setupMode &&\n            <Box>\n              <Switch>\n                <Route path=\"/setup\">\n                  <SystemSetup></SystemSetup>\n                </Route>\n                <Route path=\"/\">\n                  <Box pad=\"medium\" alignContent=\"center\" direction=\"column\" align=\"center\">\n                    <Heading>Wartungsarbeiten</Heading>\n                    <p>\n                      Sehr geehrte Besucher*innen,<br />\n                      das Bachelorsnight Ticketsystem befindet sich derzeit im Wartungsmodus.<br />\n                      Bitte versuchen Sie es später erneut.\n                    </p>\n                  </Box>\n                </Route>\n              </Switch>\n            </Box>\n          }\n        </Grommet>\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\n// eslint-disable-next-line\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}