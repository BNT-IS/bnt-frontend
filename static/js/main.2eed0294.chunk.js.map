{"version":3,"sources":["config.js","AppContexts/UserContext.js","AccountManagement/AccountManagement.js","Ticketshop/Components/WalletSetup.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/BookingOverview.js","Ticketshop/Components/TicketBestellung.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","EntranceManagement/EntranceManagement.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/IndexedDBExample.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/Components/SystemInitalisierung.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKEND_BASE_URI","INFURA_URI","UserContext","React","createContext","AccountManagement","props","createUser","bind","login","loginPassHandler","mailHandler","otpBest√§tigen","otpInputHandler","pass1Handler","pass2Handler","setState1","setState6","state","dhbw_mail","login_pass","new_pass","otp","pass1","pass2","step","access_token","tokenHandler","verifyPasswort","this","init","event","setState","target","value","console","log","alert","pw","fetch","Config","method","mode","cache","headers","body","JSON","stringify","newPassword","catch","response","json","test","message","mose","email","password","userValue","setToken","token","user","id","role","token_name","localStorage","setItem","getItem","Box","className","gap","Header","background","justify","pad","to","Consumer","userContext","Menu","label","items","onClick","logout","Text","Button","TextInput","placeholder","onChange","classname","direction","Component","WalletSetup","sign","connectWallet","walletAvailable","window","ethereum","walletLink","WalletLink","appName","appLogoUrl","darkMode","makeWeb3Provider","connected","selectedAddress","web3","Web3","enable","displayError","accounts","eth","defaultAccount","from","text","msg","utils","stringToHex","params","currentProvider","send","err","result","error","recovered","recover","toLowerCase","open","linkToDownloadMetaMask","signMessage","UserMainMenu","SingleTicketViewer","identifier","useParams","ticket","tickets","find","forename","surname","ticketType","TicketListItem","location","assign","TicketOverview","loading","fetchTickets","forEach","ticketsCopy","index","array","data","QRCode","toDataURL","then","url","qrcode","push","length","Token","ticketElements","map","key","path","BestellungsItem","ticketsForBooking","buchung","booking","accPanelLabel","createdAt","paidAt","AccordionPanel","margin","BookingOverview","loadListHandler","loadTicketsHandler","buchungen","indexOfBooking","undefined","bookingId","findIndex","kopieTickets","concat","filteredTickets","filter","Accordion","onActive","activeItems","PersonInput","onInputHandler","stateCopy","name","onInput","TicketBestellung","increment","property","guestcount","personsIndex","persons","personInput","personName","personsList","personInputFields","parkcount","decrement","WindowAbsolventTicket","WindowGuestTicket","WindowParkTicket","ToOverview","ToOrder","ToPayment","createTickets","createBooking","graduate","bookingResult","type","userId","Math","random","element","generateIdentifier","isWheelchairUser","Ticketshop","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","height","width","canvas","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","contentType","match","groups","address","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","requestMap","Map","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","onReady","dataChannel","channel","_messageHandler","dt","Date","getTime","replace","c","r","floor","toString","Promise","resolve","reject","reqId","_createUUID","set","context","e","signature","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","EntranceManagement","connectTicketReader","scanDoneHandler","ticketReader","connectTR","a","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","parse","inflate","setMasterConfig","src","alt","readTicketRemote","obliterateTicketRemote","LocalTicketMirror","_createDB","dumpTicketMirror","getTicketList","indexedDB","Error","waitingForIDBReadyQueue","_initDB","request","ev","db","errorCode","createObjectStore","keyPath","_getIDB","objectStore","transaction","item","add","getAll","onerror","onsuccess","get","isValid","isUsed","requestUpdate","put","IndexedDBExample","handleDumpMirror","showTickets","localTicketMirror","ltm","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","errorMessage","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","Hauptansicht","getConfigured","wert","mapTest","Ansicht","initializeStep","textAlign","List","primaryKey","secondaryKey","size","weight","doneSteps","AddWallet","addresse","configureTheAdminWallet","changeValueOfmapTest","textInput","setValueTrue","ConfigureAdminAccount","eMail","configureTheAdminAcc","ConfigureDatabase","host","configureTheDatabase","HOST","USER","PASSWORD","DB","ConfigureMailserver","port","conncetion","standardMail","standardPrefix","configureTheMailserver","PORT","SECURE","DEFAULT_FROM","DEFAULT_SUBJECT_PREFIX","Select","options","option","AbsolventenListe","handleOnDrop","liste","listeEingelesen","initialeListe","handleOnError","file","inputElem","reason","handleOnRemoveFile","finished","dateiTyp","useListAndSendMail","emailList","onDrop","onError","delimiter","header","addRemoveButton","onRemoveFile","SystemInitalisierung","changeStep","align","EventManagement","rTRHandler","getTicket","App","Provider","Grommet","theme","grommet","exact","eigenschaft1","Boolean","hostname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eed0294.chunk.js","sourcesContent":["module.exports = {\n    BACKEND_BASE_URI: \"http://localhost:3000\",\n    INFURA_URI: \"https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171\"\n};","import React from 'react';\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React from 'react';\nimport { Box, Button, TextInput, Text, Menu, Header} from 'grommet';\nimport Web3 from 'web3';\nimport Config from '../config';\nimport UserContext from '../AppContexts/UserContext';\nimport {Link } from \"react-router-dom\";\n\nclass AccountManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.createUser = this.createUser.bind(this);\n        this.login = this.login.bind(this);\n        this.loginPassHandler = this.loginPassHandler.bind(this);\n        this.mailHandler = this.mailHandler.bind(this);\n        this.otpBest√§tigen = this.otpBest√§tigen.bind(this);\n        this.otpInputHandler = this.otpInputHandler.bind(this);\n        this.pass1Handler = this.pass1Handler.bind(this);\n        this.pass2Handler = this.pass2Handler.bind(this);\n        this.setState1 = this.setState1.bind(this);\n        this.setState6 = this.setState6.bind(this);\n        this.state = { dhbw_mail: \"\", login_pass: \"\", new_pass: \"\", otp: \"\", pass1: \"\", pass2: \"\", step: 0, access_token: \"\"};\n        this.tokenHandler = this.tokenHandler.bind(this);\n        this.verifyPasswort = this.verifyPasswort.bind(this);\n    }\n\n    componentDidMount() {\n        //Ruft die Initialisierung auf, nachdem die Komponente erstellt wurde\n        this.init();\n    }\n\n    init() {\n        \n    }\n\n    otpInputHandler(event) {\n        //Liest das eingegebene OTP aus dem Input-Feld aus und speichert es zwischen\n        this.setState({ otp: event.target.value });\n    }\n\n    tokenHandler(event) {\n        //Liest den eingegebenen Token aus dem Input-Feld aus und speichert diesen zwischen\n        this.setState({ access_token: event.target.value });\n    }\n\n    otpBest√§tigen() {\n        //Gibt das OTP aus und springt zum n√§chsten Schritt\n        console.log(this.state.otp);\n        this.setState({ step: 2 });\n    }\n\n    pass1Handler(event) {\n        this.setState({ pass1: event.target.value });\n    }\n\n    pass2Handler(event) {\n        this.setState({ pass2: event.target.value });\n    }\n\n    mailHandler(event) {\n        this.setState({ dhbw_mail: event.target.value });\n    }\n\n    loginPassHandler(event) {\n        this.setState({ login_pass: event.target.value });\n    }\n\n    verifyPasswort(){\n        if(this.state.pass1 === this.state.pass2){\n            alert(\"Die angegebenen Passw√∂rter stimmen √ºberein!\");\n            this.createUser(this.state.pass2);\n        }\n        else {\n            alert(\"Die angegebenen Passw√∂rter stimmen nicht √ºberein!\");\n            this.setState({ pass1: \"\" });\n            this.setState({ pass2: \"\" });\n        }\n    }\n\n    displayError() {\n        //Wirft eine Standardfehlermeldung aus\n        alert(\"Ups, das hat leider nicht funktioniert. Bitte versuchen Sie es erneut.\")\n    }\n\n    async createUser(pw) {\n        //Legt anhand des eingegebenen OTP's einen User mit dem gew√§hlten Passwort an\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/createUser/' + this.state.otp, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ newPassword: pw })\n        }).catch(console.log);\n\n        if (!response) {\n            alert(\"F√ºr das eingegebene OTP konnte kein User angelegt werden.\");\n            return;\n        }\n\n        const test = await response.json().catch(console.log);\n        if(test.message !== \"Passwort nicht existent.\"){\n        alert(\"Der Nutzer wurde erfolgreich angelegt.\");\n        this.setState ({ step: 3 });\n        }\n        else {\n            alert(test.message + \" Ihr angegebenes OTP scheint nicht zu exisitieren. Bitte √ºberpr√ºfen Sie die Eingabe.\");\n            this.setState ({ step: 1 });\n        }\n    }\n\n    async login() {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/login', {\n            method: 'POST',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email: this.state.dhbw_mail, password: this.state.login_pass})\n        }).catch(console.log);\n\n        const userValue = await response.json().catch(console.log);\n        console.log(userValue);\n        if(userValue.message !== \"Falsche E-Mailadresse oder falsches Passwort.\"){\n        this.setToken('access_token', userValue.token);\n        this.setToken('user_id', userValue.user.id);\n        this.setToken('user_email', userValue.user.email);\n        this.setToken('user_role', userValue.user.role);\n        this.setState({ step: 3 });\n        }\n        else {\n            alert(userValue.message);\n        }\n    }\n\n    setToken(token_name, access_token) {\n        //Schreibt einen Token in den LocalStorage des Browsers\n        localStorage.setItem(token_name, access_token);\n    }\n\n    getToken() {\n        //Liest einen Token aus dem LocalStorage des Browsers aus\n        return localStorage.getItem('access_token');\n    }\n\n    setState1() {\n        //Springt zur Eingabe des OTP's im Erstellungsprozess\n        this.setState({ step: 1 });\n    }\n\n    setState6() {\n        //Springt zur Anmeldung mit einem vorhandenen Wallet\n        this.setState({ step: 6 });\n    }\n\n    // @Robin: F√ºr globale Autentifizierung: https://reactjs.org/docs/context.html React context...\n    // K√∂nnte ganz praktisch sein.. Habe ich ausprobiert mit App.js und Ticketshop -> Siehe also dort mal nach\n    // √úberlege doch mal, ob du die Logik so auslagern kannst, dass irgendwie global √ºberpr√ºft wird, ob ein Token verf√ºgbar ist, ob dieser funktioniert und, ob das Wallet verbunden ist.\n    // Bsp.: 1. Checke ob access_token verf√ºgbar ist \n    // 2. √úberpr√ºfe, ob das Wallet verf√ºgbar, verbunden und ob du die selectedAddress abrufen kannst. \n    // 3. Checke, ob der access_token funktioniert, indem du die User-Daten von der GET /users/:address abrufst.\n    // Wenn irgendwas davon nicht geht/ schiefgeht, ist der User nicht eingeloggt und du m√ºsstest auf eine Login-Route im Frontend weiterleiten...\n\n\n    render() {\n        //Stellt die jeweiligen Schritte f√ºr den Benutzer dar\n        return (\n\n            <Box className=\"AccountManagement\" gap=\"small\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"../\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }, { label: 'Login', onClick: userContext.login}]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <Box pad=\"small\">\n                {this.state.step === 0 &&\n                //Startseite des Accountmanagements, Auswahl zwischen Neuanlage eines √Åccounts und Anmeldung mit einem bestehenden Account\n                    <Box gap=\"small\">\n                        <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                        <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                        <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                        <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                    </Box>\n                }\n                {this.state.step === 1 &&\n                //Eingabe des pers√∂nlichen OTP's\n                    <Box gap=\"small\">\n                        <Text>Bitte geben Sie das OneTime-Passwort ein, das wir an Ihre DHBW-Mailadresse versendet haben, und best√§tigen Sie die Eingabe</Text>\n                        <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                        <Button label=\"Eingabe best√§tigen\" onClick={this.otpBest√§tigen}></Button>\n                    </Box>\n                }\n                {this.state.step === 2 &&\n                    <Box classname=\"Passwortvergabe\" direction=\"column\" gap=\"small\">\n                        <h1>Passwortvergabe</h1>\n                        <Text>Bitte vergeben Sie ein neues Passwort f√ºr Ihren Account</Text>\n                        <TextInput placeholder=\"Neues Passwort vergeben\" value={this.state.pass1} onChange={this.pass1Handler}></TextInput>\n                        <TextInput placeholder=\"Neues Passwort best√§tigen\" value={this.state.pass2} onChange={this.pass2Handler}></TextInput>\n                        <Button label=\"Passwort best√§tigen\" onClick={this.verifyPasswort}></Button>\n                    </Box>\n                }\n                {this.state.step === 3 &&\n                \n                    <Box gap=\"small\">\n                        <Text>Sie haben sich erfolgreich angemeldet.</Text>\n                        <Button label=\"Test123\" ></Button>\n                    </Box>\n                }\n                {this.state.step === 4 &&\n                    <Box gap=\"small\">\n                    </Box>\n                }\n                {this.state.step === 5 &&\n                    <Box gap=\"small\">\n                    </Box>\n                }\n                {this.state.step === 6 &&\n                    <Box gap=\"small\">\n                        <h1>Anmeldung mit einem vorhandenen Account</h1>\n                        <TextInput placeholder=\"DHBW-Mailadresse eingeben\" value={this.state.dhbw_mail} onChange={this.mailHandler}></TextInput>\n                        <TextInput placeholder=\"Account-Passwort eingeben\" value={this.state.login_pass} onChange={this.loginPassHandler}></TextInput>\n                        <Button label=\"Anmelden\" onClick={this.login}></Button>\n                    </Box>\n                }\n                {this.state.step === 888 &&\n                //Test-Seite f√ºr verschiedene Funktionen, welche im Standard-Prozess nicht aufgerufen wird\n                    <Box gap=\"small\">\n                        <h1>Willkommen bei Virgil's Testgel√§nde</h1>\n                        <TextInput placeholder=\"Test-Token eingeben\" value={this.state.access_token} onChange={this.tokenHandler}></TextInput>\n                        <Button label=\"Eingabe best√§tigen\" onClick={() => { this.setToken(this.state.access_token) }}></Button>\n                    </Box>\n                }\n                </Box>\n            </Box>\n        ); \n    }\n}\nexport default AccountManagement;\n\n\n","import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\nclass WalletSetup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.sign = this.sign.bind(this);\n        this.connectWallet = this.connectWallet.bind(this);\n        \n    }\n\n    /**\n     * Calling the initialization directly after this component\n     * was created and mounted in the DOM.\n     */\n    componentDidMount() {\n        this.init();\n    }\n\n    displayError() {\n        alert(\"Ups, das hat nicht geklappt\");\n    }\n\n    /**\n     * Initializes Ethereum Wallet Provider and Web3 Instance\n     * In case the browser is a desktop browser without wallet capability,\n     * the Standard WalletLink is used to create a Wallet Provider instance.\n     * WalletLink is supported by Coinbase as an example: https://github.com/walletlink/walletlink\n     */\n    init() {\n        // TODO: Move these constants to a global constants file\n        const APP_NAME = 'DHBW Bachelors Night Ticketing 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171' // Mainnet\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n\n            // Initialize WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            // Initialize a Web3 Provider object\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n        }\n\n        // Checking if wallet is already connected or not\n        // eslint-disable-next-line\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        // Creating Web3 Instance\n        this.web3 = new Web3(window.ethereum);\n    }\n\n    /**\n     * Attempts to connect with the Wallet\n     */\n    async connectWallet() {\n        // Requesting connection to wallet\n        var accounts = await window.ethereum.enable().catch(this.displayError);\n        if (!accounts) return;\n\n        console.log(`User's address is ${accounts[0]}`);\n        this.web3.eth.defaultAccount = accounts[0];\n        this.setState({ connected: true });\n    }\n\n    /**\n     * Example method for showing how a message can be signed and verified.\n     */\n    async sign(message) {\n        if (!window.ethereum) return this.displayError();\n        if (!window.ethereum.selectedAddress) return this.displayError();\n        var from = window.ethereum.selectedAddress;\n\n        var text = message;\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.send({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err) return console.error(err)\n            if (result.error) return console.error(result.error)\n\n            console.log(result);\n\n            var recovered = this.web3.eth.accounts.recover(msg, result.result);\n\n            if (recovered.toLowerCase() === from.toLowerCase()) {\n                alert('Successfully ecRecovered signer as ' + from)\n            } else {\n                alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n            }\n        })\n    }\n\n    /**\n     * Just a method to open a new tab...\n     */\n    linkToDownloadMetaMask() {\n        window.open('https://wallet.coinbase.com/', '_blank');\n    }\n\n    render() {\n        return (\n            <Box className=\"WalletSetup\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <h1>Wallet Setup</h1>\n                <Text>\n                    Um Tickets zu erwerben ben√∂tigen Sie ein sogenanntes Wallet.\n                    Dieses ist vergleichbar mit Ihrer Geldb√∂rse zu der nur Sie Zugriff haben.\n                </Text>\n                {(!this.state.walletAvailable && !this.state.connected) &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            F√ºr unser Ticket-System muss dieses Wallet Ethereum-f√§hig sein.\n                            Wir empfehlen Ihnen daher das Coinbase Wallet.\n                            Bitte installieren Sie sich das Coinbase Wallet √ºber die offizielle Website.\n                            Kommen Sie nach Abschluss der Einrichtung wieder auf diese Seite zur√ºck.\n                        </Text>\n                        <Button label=\"Coinbase f√ºr's Smartphone installieren\" onClick={this.linkToDownloadMetaMask}></Button>\n                    </Box>\n                }\n                {!this.state.connected &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            Als N√§chstes ben√∂tigt unsere Plattform die Adresse Ihres Wallets.\n                            Bitte best√§tigen Sie daher die Verbindung mit Ihrem Wallet √ºber folgende Schaltfl√§che.\n                            Sie geben dadurch <b>nicht</b> Ihre Kontrolle √ºber das Wallet ab!\n                        </Text>\n                        <Button label=\"Mit dem Wallet verbinden\" onClick={this.connectWallet}></Button>\n                    </Box>\n                }\n                <Text>\n                    Hier folgt eine DEMO!!!\n                </Text>\n                <TextInput\n                    placeholder=\"Nachricht zum signieren\"\n                    value={this.state.signMessage}\n                    onChange={(event) => { this.setState({ signMessage: event.target.value }) }}\n                ></TextInput>\n                <Button label=\"Sign and Verify Message\" onClick={() => { this.sign(this.state.signMessage) }}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default WalletSetup;\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/ticketbestellen\">Tickets Bestellen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/bestellungsuebersicht\">Bestellungen Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/setup\">Setup</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Text } from 'grommet';\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport QRCode from 'qrcode';\nimport Config from '../../config';\n\nfunction SingleTicketViewer(props) {\n    let { identifier } = useParams();\n    const ticket = props.tickets.find(ticket => ticket.identifier === identifier);\n    return (\n        <Box className=\"SingleTicket\">\n            {ticket.forename}\n            {ticket.surname}\n            {ticket.ticketType}\n        </Box>\n    );\n}\n\nfunction TicketListItem(props) {\n    return (\n        <Box className=\"TicketListItem\" direction=\"row\" gap=\"small\" pad=\"small\">\n            <Text className=\"Name\">{props.ticket.forename} {props.ticket.surname}</Text>\n            <Text className=\"Type\">{props.ticket.ticketType}</Text>\n            <Button label=\"Anzeigen\" onClick={() => { window.location.assign('#/guest/tickets/' + props.ticket.identifier); }}></Button>\n        </Box>\n    );\n}\n\nclass TicketOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [], loading: false }\n    }\n\n    componentDidMount() {\n        this.fetchTickets();\n    }\n\n    async fetchTickets() {\n        this.setState({ loading: true });\n        let address = \"0x3Da85f73bC1B1662FE247391dEcD2a52f139fd13\";\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v1/users/\" + address + \"/tickets\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 43059960ead1db519cbbed4aa934462808262fa6204daefabcab4b0b38b667d61828556556e4b9e80b6a91e9990fc8704bbf399cdafd41b06ddc0c31a500accb94b96fa096bf8789c7c582f9e5df0ead8f23ef77a9b045ccbb78a60cd2401592e79b8c396cd4520297cfb0603011a7f373f9dbbc6a37527bd160b5e754850cbf8779a4c5049e816a9b9bee268e110baf53e901e80aa8df89d6a07b92cf33b581294bedc1b8da2c9a583845b13766f4c89abc9ac3466b69748a1ba0bf6a80a8c2b6aa6ec084c88c2cc4d212470089dbb9e4bce056c90e8a0ebaa5b9e563c80d20ac173b791769eac9d29c509810086f1700c7cec0071a03bb7aed67fec7215979',\n            }\n        }).catch(console.log);\n\n        if (!response) return;\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return;\n\n        tickets.forEach((ticket) => {\n            switch (ticket.ticketType) {\n                case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                default: break;\n            }\n        });\n\n        this.setState({ tickets: tickets, loading: false });\n    }\n\n    generateQRCodes() {\n        var ticketsCopy = [];\n        this.state.tickets.forEach((ticket, index, array) => {\n            let data = ticket.identifier; // TODO Change to signature and so on...\n            QRCode.toDataURL(data).then((url) => {\n                ticket.qrcode = url;\n                ticketsCopy.push(ticket);\n                if (index === array.length - 1) {\n                    this.setState({ tickets: ticketsCopy });\n                }\n            }).catch(console.log);\n        })\n    }\n\n    setToken(Token){\n        localStorage.setItem('Tokenwert', Token);\n    }\n    getToken(){\n        var value = localStorage.getItem('Tokenwert');\n        console.log(value);\n    }\n\n    render() {\n        let ticketElements = this.state.tickets.map((ticket) => <TicketListItem key={ticket.identifier} ticket={ticket}></TicketListItem>);\n        \n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Switch>\n                    <Route path=\"/guest/tickets/:identifier\">\n                        <Link to=\"/guest/tickets/\">Alle Tickets anzeigen</Link>\n                        <SingleTicketViewer tickets={this.state.tickets}></SingleTicketViewer>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <Box>\n                            <Box>\n                                <h1 className=\"NumberOfTickets\">{this.state.tickets.length}</h1>\n                            </Box>\n                            <Box className=\"TicketList\">\n                                {this.state.loading && <p className=\"loader\"></p>}\n                                {ticketElements}\n                            </Box>\n                        </Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Text, Accordion, AccordionPanel } from 'grommet';\nimport Config from '../../config';\n\nclass BestellungsItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        var ticketsForBooking = [];\n        this.props.tickets.forEach((ticket) => {\n            ticketsForBooking.push(\n                <Box key={ticket.identifier} pad=\"small\">\n                    <span>Ticket Identifier: {ticket.identifier}</span>\n                    <span>Nachname: {ticket.surname}</span>\n                    <span>Vorname: {ticket.forename}</span>\n                    <span>Ticket Typ: {ticket.ticketType}</span>\n                </Box>\n            )\n        });\n        var buchung = this.props.booking;\n        var accPanelLabel = \"Buchungs-ID: \" + buchung.id + \" Buchungsdatum: \" + buchung.createdAt + \" Bezahldatum: \" + buchung.paidAt;\n        return (\n            <AccordionPanel label={accPanelLabel}>\n                <Text margin=\"small\">Folgende Tickets wurden gebucht:</Text>\n                {ticketsForBooking}\n            </AccordionPanel>\n        )\n    }\n\n}\n\nclass BookingOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this);\n        this.loadTicketsHandler = this.loadTicketsHandler.bind(this);\n        this.state = { buchungen: [], tickets: [] };\n    }\n\n    componentDidMount() {\n        this.loadListHandler();\n    }\n\n    async loadListHandler() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/1/bookings\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            }\n        }).catch(console.log)\n        if (!response) return\n        console.log(response)\n        var data = await response.json().catch(console.log)\n        if (!data) return;\n\n        // TODO: Error Handling, wenn data nur eine Message ist... data.message\n        this.setState({ buchungen: data, loading: false })\n    }\n\n    async loadTicketsHandler(indexOfBooking) {\n        if(indexOfBooking === undefined) return;\n\n        let bookingId = this.state.buchungen[indexOfBooking].id;\n        let ticketsLoaded = this.state.tickets.findIndex((ticket) => {\n            return ticket.bookingId === bookingId\n        })\n         \n        if(ticketsLoaded !== -1) return;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings/\" + bookingId + \"/ticketsBooked\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n    }\n\n    render() {\n        var buchungen = [];\n        this.state.buchungen.forEach((buchung) => {\n            var filteredTickets = this.state.tickets.filter((ticket) => {\n                return ticket.bookingId === buchung.id\n            })\n            buchungen.push(<BestellungsItem key={buchung.id} booking={buchung} tickets={filteredTickets}></BestellungsItem>)\n        });\n\n        return (\n            <Box className=\"BookingOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    {this.state.loading && <p className=\"loader\"></p>}\n                    <Accordion onActive={(activeItems) => { this.loadTicketsHandler(activeItems[0]) }}>\n                        {buchungen}\n                    </Accordion>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default BookingOverview;\n","import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\nimport Config from '../../config';\n\nclass PersonInput extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInputHandler = this.onInputHandler.bind(this);\n        this.state = { forename: \"\", surname: \"\" }\n    }\n\n    onInputHandler(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = event.target.value;\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    render() {\n        return (\n            <Box>\n                <TextInput name=\"forename\" placeholder=\"Vorname des Gastes\" value={this.state.forename} onChange={this.onInputHandler}></TextInput>\n                <TextInput name=\"surname\" placeholder=\"Nachname des Gastes\" value={this.state.surname} onChange={this.onInputHandler}></TextInput>\n            </Box>\n        );\n    }\n\n}\n\nclass TicketBestellung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.WindowAbsolventTicket = this.WindowAbsolventTicket.bind(this);\n        this.WindowGuestTicket = this.WindowGuestTicket.bind(this);\n        this.WindowParkTicket = this.WindowParkTicket.bind(this);\n        this.ToOverview = this.ToOverview.bind(this);\n        this.ToOrder = this.ToOrder.bind(this);\n        this.ToPayment = this.ToPayment.bind(this);\n        this.createTickets = this.createTickets.bind(this);\n        this.createBooking = this.createBooking.bind(this);\n        this.onInputHandler = this.onInputHandler.bind(this);\n\n\n        this.state = {\n            guestcount: 0,\n            parkcount: 0,\n            step: 0,\n            persons: [],\n            personInputFields: [],\n            graduate: {\n                forename: \"\",\n                surname: \"\"\n            },\n            bookingResult: null\n        };\n\n\n    }\n\n    // @Nils F√ºr das generieren des Identifiers f√ºr das Ticket einfach erstmal eine Zufallszahl nehmen!\n    // Aber bitte eine extra Funktion f√ºr generieren des Ticket-Identifiers anlegen, dann k√∂nnen wir sp√§ter gemeinsam den \"echten/sicheren\" Identifier-Generator programmieren\n\n    onInputHandler(event, type) {\n        if (type == \"forename\") {\n            this.setState({\n                graduate: {\n                    forename: event.target.value, \n                    surname: this.state.graduate.surname\n                }\n            })\n        } else {\n            this.setState({\n                graduate: {\n                    surname: event.target.value,\n                    forename: this.state.graduate.forename\n                }\n            })\n        }\n\n\n    }\n    //Wechsel der Ansichtenfenster\n    WindowAbsolventTicket() {\n        this.setState({ step: 0 })\n    }\n    WindowGuestTicket() {\n        this.setState({ step: 1 })\n    }\n    WindowParkTicket() {\n        this.setState({ step: 2 })\n    }\n    ToOverview() {\n        this.setState({ step: 3 })\n    }\n    ToPayment() {\n        this.setState({ step: 4 })\n    }\n    ToOrder() {\n        this.setState({ step: 5 })\n    }\n\n\n    //Funktion f√ºr die Counter und der Namen der G√§ste\n    increment = (property) => {\n        if (property === \"guest\" && this.state.guestcount < 2) {\n\n            let personsIndex = this.state.persons.length;\n            let personInput = <PersonInput onInput={(personName) => { let personsList = this.state.persons; personsList[personsIndex] = personName; this.setState({ persons: personsList }) }}></PersonInput>\n            let personsList = this.state.persons;\n            personsList[personsIndex] = {};\n\n            this.state.personInputFields.push(personInput);\n            this.setState({ persons: personsList, personInputFields: this.state.personInputFields, guestcount: this.state.guestcount + 1 });\n\n        }\n        else if (property === \"park\" && this.state.parkcount < 3) {\n            this.setState({ parkcount: this.state.parkcount + 1 });\n        }\n    }\n    decrement = (property) => {\n        if (property === \"guest\" && this.state.guestcount > 0) {\n            this.setState({ guestcount: this.state.guestcount - 1 });\n        }\n        else if (property === \"park\" && this.state.parkcount > 0) {\n            this.setState({ parkcount: this.state.parkcount - 1 });\n        }\n    }\n\n\n    async createBooking() {\n        let userId = \"1\";\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({ userId: userId })\n        }).catch(console.log);\n        // Error Handling f√ºr Benutzer\n        if (!response){\n            this.setState({step: 100}); \n            return;\n         }\n\n\n        var result = await response.json().catch(console.log);\n        console.log(result)\n        this.setState({ bookingResult: result });\n\n        if (!result){\n           this.setState({step: 100}); \n           return;\n        }\n        console.log(result);\n\n        await this.createTickets();\n    }\n\n    generateIdentifier() {\n        return Math.random() * 100000;\n    }\n\n    async createTickets() {\n        console.log(this.state)\n        let bookingResult = this.state.bookingResult.id;\n        for (let element of this.state.persons) {\n            console.log(element);\n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n                },\n                body: JSON.stringify({\n                    identifier: this.generateIdentifier(),\n                    bookingId: bookingResult,\n                    ticketType: 1,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: false,\n                })\n            }).catch(console.log);\n            // Error Handling f√ºr Benutzer\n            if (!response) {\n                this.setState({step: 100}); \n                return;\n             }\n            var result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({step: 100}); \n                return;\n             }\n            console.log(result)\n        }\n        //Ticket f√ºr Absolvent in DB schreiben\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({\n                identifier: this.generateIdentifier(),\n                bookingId: bookingResult,\n                ticketType: 0,\n                forename: this.state.graduate.forename,\n                surname: this.state.graduate.surname,\n                isWheelchairUser: false,\n            })\n        }).catch(console.log);\n        // Error Handling f√ºr Benutzer\n        if (!response) {\n            this.setState({step: 100}); \n            return;\n         }\n\n        var result = await response.json().catch(console.log);\n\n        if (!result) {\n            this.setState({step: 100}); \n            return;\n         }\n\n        console.log(result)\n        this.ToOrder();\n    }\n\n\n\n\n    render() {\n        console.log(this.state.persons)\n\n        return (\n            <Box className=\"TicketBestellung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n\n                {this.state.step === 0 &&\n                    <Box gap=\"small\">\n                        <TextInput name=\"forename\" placeholder=\"Vorname des Absolventen\" value={this.state.graduate.forename} onChange={(event) => this.onInputHandler(event, \"forename\")}></TextInput>\n                        <TextInput name=\"surname\" placeholder=\"Nachname des Absolventen\" value={this.state.graduate.surname} onChange={(event) => this.onInputHandler(event, \"surname\")}></TextInput>\n                        Klicke hier, um ein Absolvententicket zu kaufen.\n                    <Button label=\" Ein Absolventen Ticket kaufen\" onClick={this.WindowGuestTicket} gap=\"small\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 1 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Begleitpersonen Sie mitnehmen wollen.</Text>\n                        <Button onClick={() => this.increment(\"guest\")} className=\"guestcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"guest\")} className=\"guestcount\" label=\"-\"></Button>\n                        <h2>{this.state.guestcount}</h2>\n                        {this.state.personInputFields}\n                        <Button onClick={this.WindowAbsolventTicket} label=\"Zur√ºck\"></Button>\n                        <Button onClick={this.WindowParkTicket} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 2 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Parktickets Sie ben√∂tigen.</Text>\n                        <Button onClick={() => this.increment(\"park\")} className=\"parkcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"park\")} className=\"parkcount\" label=\"-\"></Button>\n                        <h2>Anzahl der Parktickets: {this.state.parkcount}</h2>\n                        <Button onClick={this.WindowGuestTicket} label=\"Zur√ºck\"></Button>\n                        <Button onClick={this.ToOverview} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 3 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button onClick={this.WindowParkTicket} label=\"Zur√ºck\"></Button>\n                        <Button onClick={this.ToPayment} label=\"Zahlungspflichtig bestellen\"></Button>\n                    </Box>\n                }\n                {this.state.step === 4 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets Zahlungspflichtig bestellt.  <br />\n                    Bitte √ºberweisen Sie folgenden Betrag auf das Konto: XXXXYYYYZZZZ.<br />\n                    Geben Sie ihren Namen als Verwendungszweck an.<br />\n                    Nach Rechnungseingang erhalten Sie Ihre Tickets an ihr Wallet gesendet.<br />\n                        </Text>\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button label=\"Buchung erstellen\" onClick={this.createBooking}></Button>\n                    </Box>\n                }\n                {this.state.step === 5 &&\n                    <Box gap=\"small\">\n                        Erfolgreich bestellt!\n                    </Box>\n                }\n\n                {this.state.step === 100 &&\n                    <Box gap=\"small\">\n                        <Text>Ein Fehler im Bestellvorgang ist aufgetreten!</Text>\n                    </Box>\n                }\n\n\n            </Box>\n        );\n    }\n}\n\nexport default TicketBestellung;\n","import React from 'react';\n\n// @Robin Hier mal eine externe js Datei f√ºr so Kontext kram...\nimport UserContext from '../AppContexts/UserContext';\n\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport WalletSetup from './Components/WalletSetup';\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport BookingOverview from './Components/BookingOverview';\nimport TicketBestellung from './Components/TicketBestellung';\n\nclass Ticketshop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    // @Robin Nutze Usercontext so: static contextType = UserContext;\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"../\">Home</Link>\n                    {\n                        // @Robin Nutze Usercontext oder so:\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }, { label: 'Login', onClick: userContext.login}]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/ticketbestellen\">\n                        <TicketBestellung></TicketBestellung>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/demosetup\">\n                        <WalletSetup></WalletSetup>\n                    </Route>\n                    <Route path=\"/guest/bestellungsuebersicht\">\n                        <BookingOverview></BookingOverview>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterst√ºtzt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        alert(event.data);\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport { Switch, Route } from \"react-router-dom\";\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass EntranceManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    render() {\n        return (\n            <Box className=\"EntranceManagement\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Ger√§t als Ticket Leser verwenden m√∂chten, m√ºssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Ger√§t mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Ger√§t scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Wunderbar, Sie sind verbunden...</p>\n                            <p>In Zukunft sollten hier Funktionen zum Ticket-Scan stehen...</p>\n                            <Button label=\"Lese ein Beispiel Ticket\" onClick={() => { this.ticketReader.readTicketRemote(\"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\") }}></Button>\n                            <Button label=\"Entwerte Ticket\" onClick={() => { this.ticketReader.obliterateTicketRemote(123, \"signature\") }}></Button>\n                            <Button label=\"Beispiel Funktion 3\"></Button>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte warten Sie einen Moment...</p>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'failed' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte aktivieren Sie den Reader erneut.</p>\n                            <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                        </Route>\n                    </Switch>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default EntranceManagement;\n","/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.dumpTicketMirror = this.dumpTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(\"TicketMirror\", 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async dumpTicketMirror() {\n        var db = await this._getIDB().catch(console.error);\n        if (!db) return;\n\n        var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n\n        // TODO: Fetch real data from the blockchain when online\n        const dummyData = [{\n            \"identifier\": \"ca6c9409-0ec9-42fb-9ca7-d42a74642d7e\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Parken\"\n        }, {\n            \"identifier\": \"cea4b540-63a4-4abd-9a9a-499bb3879b8c\",\n            \"isValid\": false,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"c3573a44-f9e8-4772-bf80-57d1d07239c8\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"5506d14d-8090-411a-897c-3f6c898ec8d2\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }]\n\n        dummyData.forEach((item) => {\n            objectStore.add(item);\n        });\n\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The signature of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} signature - Specific signature of the owner that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, signature) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n\n                // TODO: Check signature and identifier hash\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Ticket is not valid.\");\n                if (ticket.isUsed) return reject(\"Ticket was already used.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = resolve;\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button } from 'grommet';\n\n// eslint-disable-next-line\nimport { LocalTicketMirror } from '../Classes/LocalTicketMirror';\n\n\nclass IndexedDBExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n        this.showTickets();\n    }\n\n    handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        ltm.dumpTicketMirror();\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets });\n    }\n\n    render() {\n        let tickets = this.state.tickets.map((ticket) => {\n            return <li key={ticket.identifier}>{ticket.isValid && 'Valid'}{!ticket.isValid && 'Not Valid'} -  {ticket.isUsed && 'Used'}{!ticket.isUsed && 'Not Used'} - {ticket.ticketType}</li>\n        });\n\n        return (\n            <Box className=\"IndexedDBExample\" pad=\"medium\">\n                <ul>\n                    {tickets}\n                </ul>\n                <Button label=\"Dump Mirror\" onClick={this.handleDumpMirror}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default IndexedDBExample;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and signature and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} signature - Signature used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, signature, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { ticket: ticket, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { success: success, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    disconnectRemoteTicketReader(remoteTicketReader) {\n\n    }\n\n    disconnectAll() {\n\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzuf√ºgen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzuf√ºgen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielger√§t scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielger√§ts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\n//import './TicketOverview.css';\nimport { Box, Button, Select, Text, List, TextInput } from 'grommet';\nimport Config from '../../config';\nimport { CSVReader } from 'react-papaparse';\n\nclass Hauptansicht extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.getConfigured = this.getConfigured.bind(this);\n    }\n\n    getConfigured(key) {\n        var wert = this.props.mapTest.get(key);\n        if (!wert)\n            return <Text key={key}>Nicht erledigt</Text>;\n        if (wert)\n            return <Text key={key}>Erledigt</Text>;\n    }\n\n    render() {\n        var Ansicht = [];\n        if (this.props.initializeStep === 0) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"start\">\n                <Text textAlign=\"center\">\n                    Guten Tag und Herzlich Wilkommen zum Ticketsystem.\n                </Text>\n                <Text>\n                    Die n√§chsten Schritte dienen zur Initalisierung des Systems.\n                    Sie werden durch die notwendigen Vorbereitungsschritte gef√ºhrt.\n                </Text>\n                <Text textAlign=\"center\">\n                    F√ºr die Initalisierung sind folgende Schritte notwendig\n                </Text>\n            </Box>\n        }\n        if (this.props.initializeStep === 5) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"end\">\n                <Text textAlign=\"center\">\n                    Herzlich Gl√ºckwunsch Sie haben das Ticketsystem erfolgreich konfiguriert!\n                </Text>\n            </Box>\n        }\n\n        Ansicht[1] =\n            <Box>\n                <List\n                    primaryKey=\"initializeStep\"\n                    secondaryKey=\"doneSteps\"\n                    data={[\n                        { initializeStep: <Text size=\"large\" weight=\"bold\" key=\"header\">Vorbereitsungsschritt</Text>, doneSteps: <Text size=\"large\" weight=\"bold\" key=\"headerZustand\">Zustand</Text> },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusDB\"> Initalisieren der Datenbank</Text>, doneSteps: this.getConfigured(\"DB\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminAccount\">Hinzuf√ºgen eines Administratorbenutzers</Text>, doneSteps: this.getConfigured(\"AA\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusMS\">Initialisieren des Mailservers</Text>, doneSteps: this.getConfigured(\"MS\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminWallet\">Hinzuf√ºgen eines Wallets f√ºr den Master-User</Text>, doneSteps: this.getConfigured(\"AW\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusListe\">Einlesen der Absolventen-Liste und Erstellung der One Time Passw√∂rter</Text>, doneSteps: this.getConfigured(\"AL\") },\n                    ]}\n                />\n            </Box>\n        return Ansicht;\n    }\n}\n\nclass AddWallet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { addresse: \"\", };\n        this.configureTheAdminWallet = this.configureTheAdminWallet.bind(this);\n    }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminWallet() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/generateWallet\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.props.changeValueOfmapTest(\"AW\");\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzuf√ºgen des Wallets f√ºr den Master-User:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <TextInput\n                    placeholder=\"HTTP-Provider DNS:Port\"\n                    value={this.state.textInput}\n                    onChange={(event) => { this.setState({ textInput: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.setValueTrue} label=\"Hinzuf√ºgen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureAdminAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {eMail:\"\", password: \"\", role: 0 };\n        this.configureTheAdminAcc = this.configureTheAdminAcc.bind(this);\n        }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminAcc() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/admin\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            },\n            body: JSON.stringify({\n                email: this.state.email,\n                password: this.state.password,\n                role: this.state.role,\n            })\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.props.changeValueOfmapTest(\"AA\");\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzuf√ºgen des Administratorbenutzers:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">E-Mail-Adresse</Text>\n                <TextInput\n                    placeholder=\"E-Mail\"\n                    value={this.state.eMail}\n                    onChange={(event) => { this.setState({ textInput: event.target.value }) }}\n                />\n                </Box>\n                <Box pad=\"medium\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Passwort\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ textInput: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminAcc} label=\"Hinzuf√ºgen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureDatabase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", user: \"\", password: \"\", db: \"\" };\n        this.configureTheDatabase = this.configureTheDatabase.bind(this);\n    }\n\n    //TODO: Problem bei body \n    async configureTheDatabase() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/database\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            },\n            body: JSON.stringify({\n                HOST: this.state.host,\n                USER: this.state.user,\n                PASSWORD: this.state.password,\n                DB: this.state.db,\n            })\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.props.changeValueOfmapTest(\"DB\");\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Konfigurieren der Datenbank:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Datenbank-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Datenbank-Host eingeben\"\n                    value={this.state.host}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Datenbank:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Datenbank eingeben\"\n                    value={this.state.db}\n                    onChange={(event) => { this.setState({ db: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Button onClick={this.configureTheDatabase} label=\"Abschlie√üen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureMailserver extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", port: null, conncetion: true, user: \"\", password: \"\", standardMail: \"\", standardPrefix: \"\" };\n        this.configureTheMailserver = this.configureTheMailserver.bind(this);\n    }\n\n    //TODO: Problem bei body ? \n    async configureTheMailserver() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/mailserver\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            },\n            body: JSON.stringify({\n                HOST: this.state.host,\n                PORT: this.state.port,\n                SECURE: this.state.conncetion,\n                USER: this.state.user,\n                PASSWORD: this.state.password,\n                DEFAULT_FROM: this.state.standardMail,\n                DEFAULT_SUBJECT_PREFIX: this.state.standardPrefix,\n            })\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.props.changeValueOfmapTest(\"MS\");\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Text size=\"large\" weight=\"bold\">Konfigurieren des Mailservers:</Text>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Mailserver-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Mailserver-Host eingeben\"\n                    value={this.state.textInput}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange\n                    ={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Sichere Verbindung:</Text>\n                <Select\n                    options={['true', 'false']}\n                    value={this.state.conncetion}\n                    onChange={({ value, option }) => { this.setState({ conncetion: option }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort: </Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Mail:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Standard Mail eingeben\"\n                    value={this.state.standardMail}\n                    onChange={(event) => { this.setState({ standardMail: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Subject Prefix:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Standard Prefix eingeben\"\n                    value={this.state.standardPrefix}\n                    onChange={(event) => { this.setState({ standardPrefix: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Button onClick={this.configureTheMailserver} label=\"Abschlie√üen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n        //TODO STANDARD (????)\n    }\n}\n\nclass AbsolventenListe extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { listeEingelesen: false, finished: false, initialeListe: [], dateiTyp: \"CSV\", path: \"\" };\n        this.useListAndSendMail = this.useListAndSendMail.bind(this);\n    }\n\n    //TODO FUNKTION ERSTELLEN\n    async useListAndSendMail() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.setState({ finished: true })\n        this.props.changeValueOfmapTest(\"AL\");\n    }\n\n\n    //FUNKTIONEN F√úR CSV-Reader\n\n    //Eingelesene Daten entgegennehmen und in den State schreiben\n    handleOnDrop = (data) => {\n        var liste = [];\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n\n        data.forEach((data) => {\n            console.log(data.data)\n            liste.push(data.data)\n        });\n\n        this.setState({ listeEingelesen: true, initialeListe: liste })\n    }\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    handleOnRemoveFile = (data) => {\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n    }\n\n\n    render() {\n        var Ansicht = [];\n        var emailList = this.state.initialeListe;\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Einlesen der Absolventen Liste</Text>\n            </Box>\n\n            {!this.state.listeEingelesen && !this.state.finished &&\n                <Box className=\"Eingaben\">\n                    <Box pad=\"medium\">\n                        <Text>Bitte eine Liste in der folgenden Darstellung einlesen:</Text>\n                        <span><Text weight=\"bold\">Header: </Text><Text>E-Mail; Name</Text></span>\n                        <span><Text weight=\"bold\">Datensatz 1: </Text><Text>Beispiel@web.de; Mustermann, Max</Text></span>\n                    </Box>\n                    <CSVReader\n                        onDrop={this.handleOnDrop}\n                        onError={this.handleOnError}\n                        config={{\n                            delimiter: \";\",\n                            header: true\n                        }}\n                        addRemoveButton\n                        onRemoveFile={this.handleOnRemoveFile}\n                    >\n                        <span>Drop CSV file here or click to upload.</span>\n                    </CSVReader>\n                </Box>\n            }\n\n            {this.state.listeEingelesen && !this.state.finished &&\n                <List className=\"langeListe\" pad=\"medium\"\n                    primaryKey=\"E-Mail\"\n                    secondaryKey=\"Name\"\n                    data={emailList}\n                />\n            }\n            <Box pad=\"medium\">\n                <Button onClick={this.useListAndSendMail} label=\"Abschlie√üen\"></Button>\n            </Box>\n\n            {this.state.listeEingelesen && this.state.finished &&\n                <Text>Bitte den N√§chsten Schritt</Text>\n            }\n\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass SystemInitalisierung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeStep = this.changeStep.bind(this);\n        this.changeValueOfmapTest = this.changeValueOfmapTest.bind(this);\n        this.state = {\n            initializeStep: 0, mapTest: new Map([[\"AW\", false], [\"DB\", false], [\"MS\", false], [\"AL\", false], [\"AA\", false]])\n        };\n    }\n    // TODO: Step f√ºrs Aufsetzen von Master-User mit Wallet\n    // TODO: Step f√ºrs Initialisieren der DB\n    // TODO: Step f√ºrs Aufladen des Backend-Wallets mit Ether...\n\n    // Function to Change the Value of the state of Configuration\n    changeValueOfmapTest(key) {\n        this.setState(this.state.mapTest.set(key, true));\n    }\n\n    changeStep() {\n        this.setState({ initializeStep: 1 + this.state.initializeStep });\n    }\n\n    render() {\n        return (\n            <Box className=\"SystemInitalisierung\" direction=\"column\" gap=\"medium\" pad=\"medium\" align=\"center\">\n                {this.state.initializeStep === 0 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}></Hauptansicht>}\n                {this.state.initializeStep === 1 && <ConfigureDatabase changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}></ConfigureDatabase>}\n                {this.state.initializeStep === 2 && <ConfigureAdminAccount changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}></ConfigureAdminAccount>}\n                {this.state.initializeStep === 3 && <ConfigureMailserver changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}></ConfigureMailserver>}\n                {this.state.initializeStep === 4 && <AddWallet changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}></AddWallet>}\n                {this.state.initializeStep === 5 && <AbsolventenListe changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}></AbsolventenListe>}\n                {this.state.initializeStep === 6 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}></Hauptansicht>}\n                {this.state.initializeStep < 6 && <Button onClick={this.changeStep} label=\"N√§chster Schritt\"></Button>}\n                {this.state.initializeStep === 6 && <Box pad=\"medium\"> <Button label=\"Zur√ºck\"></Button> <Button label=\"Konfigurationen anzeigen\"></Button></Box>}\n            </Box>\n        );\n    }\n}\n\nexport default SystemInitalisierung;\n","import React from 'react';\nimport { Box, Header, Menu } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport IndexedDBExample from './Components/IndexedDBExample';\nimport TicketReaderManager from './Components/TicketReaderManager';\nimport SystemInitalisierung from './Components/SystemInitalisierung';\nimport UserContext from '../AppContexts/UserContext';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            console.log(connectionState);\n            /**console.debug(\"Attempting to remove closed remote ticket reader\");\n            let RTRList = this.state.RTRList;\n            let idx = RTRList.indexOf(remoteTicketReader);\n            RTRList.splice(idx, 1);\n            this.setState({ RTRList: RTRList });*/\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => { \n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, signature, callback) => {\n            // TODO: Request localmirror \n            callback(true);\n        }\n    }\n\n    render() {\n        return (\n            \n            <Box className=\"EventManagement\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"../\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }, { label: 'Login', onClick: userContext.login}]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <ul>\n                    <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                    <li><Link to=\"/eventmgmt/entrancedb\">Show Entrance Dashboard</Link></li>\n                    <li><Link to=\"/eventmgmt/ticketshop\">Manage Ticketshop</Link></li>\n                    <li><Link to=\"/eventmgmt/SystemInitalisierung\">System Initalisieren</Link></li>\n                </ul>\n                <Switch>\n                    <Route path=\"/eventmgmt/rtrm\">\n                        <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                    </Route>\n                    <Route path=\"/eventmgmt/entrancedb\">\n                        <IndexedDBExample localTicketMirror={this.localTicketMirror}></IndexedDBExample>\n                    </Route>\n                    <Route path=\"/eventmgmt/SystemInitalisierung\">\n                        <SystemInitalisierung></SystemInitalisierung>\n                    </Route>\n                    <Route path=\"/eventmgmt/ticketshop\">\n                        <Box pad=\"medium\">Hier m√ºsste dann sowas wie ein Ticketshop Management Dashboard hin...</Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\n\n// @Robin siehe https://reactjs.org/docs/context.html\nimport UserContext from './AppContexts/UserContext';\nimport AccountManagement from './AccountManagement/AccountManagement'\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport EntranceManagement from './EntranceManagement/EntranceManagement';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    // @Robin Hinzugef√ºgt f√ºr globales User Objekt\n    this.state = { user: { id: null, email: null, role: null, access_token: null } };\n  }\n\n  render() {\n    console.log(this.state.user);\n    return (\n      // @Robin Hinzugef√ºgt f√ºr globales User Objekt siehe https://reactjs.org/docs/context.html\n      <UserContext.Provider value={{ user: this.state.user, logout: () => { this.setState({ user: {id: null, email: null, role: null, access_token: null}}) }, \n      login: () => {this.setState({ user: { id: localStorage.getItem('user_id'), email: localStorage.getItem('user_email'), role: localStorage.getItem('user_role'), access_token: localStorage.getItem('access_token')}})}}}> \n        \n        <Grommet theme={grommet}>\n          <Switch>\n            <Route exact path=\"/\">\n              <ul>\n                <li><Link to=\"/guest\">Gast</Link></li>\n                <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n                <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n                <li><Link to=\"/Accountmanagement\">Accountmanagement</Link></li>\n              </ul>\n            </Route>\n          </Switch>\n          <Switch>\n            <Route path=\"/guest\">\n              <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n            </Route>\n            <Route path=\"/entrance\">\n              <EntranceManagement></EntranceManagement>\n            </Route>\n            <Route path=\"/eventmgmt\">\n              <EventManagement></EventManagement>\n            </Route>\n            <Route path=\"/Accountmanagement\">\n              <AccountManagement></AccountManagement>\n            </Route>\n          </Switch>\n        </Grommet>\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\n// eslint-disable-next-line\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\n"],"sourceRoot":""}