{"version":3,"sources":["Ticketshop/Components/WalletSetup.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/AccountManagement.js","Ticketshop/Components/BookingOverview.js","Ticketshop/Components/TicketBestellung.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","EntranceManagement/EntranceManagement.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/IndexedDBExample.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/Components/SystemInitalisierung.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["WalletSetup","props","state","sign","bind","connectWallet","this","init","alert","setState","walletAvailable","window","ethereum","walletLink","WalletLink","appName","appLogoUrl","darkMode","makeWeb3Provider","connected","selectedAddress","web3","Web3","enable","catch","displayError","accounts","console","log","eth","defaultAccount","message","from","text","msg","utils","stringToHex","params","currentProvider","send","method","err","result","error","recovered","recover","toLowerCase","open","Box","className","direction","gap","pad","Text","Button","label","onClick","linkToDownloadMetaMask","TextInput","placeholder","value","signMessage","onChange","event","target","React","Component","UserMainMenu","to","SingleTicketViewer","identifier","useParams","ticket","tickets","find","forename","surname","ticketType","TicketListItem","location","assign","TicketOverview","loading","fetchTickets","fetch","mode","cache","headers","response","json","forEach","ticketsCopy","index","array","data","QRCode","toDataURL","then","url","qrcode","push","length","ticketElements","map","key","path","AccountManagement","createCoinbaseWallet","createUser","otpBest√§tigen","otpInputHandler","setState1","setState6","otp","step","Token","tokenHandler","verifyAddress","walletLogin","walletVerbinden","body","JSON","stringify","address","test","challenge","challengeString","a","signature","jsResponse","setToken","token","localStorage","setItem","getItem","classname","BestellungsItem","hiddenTickets","ticketsForBooking","border","color","size","booking","created","AccordionPanel","BookingOverview","loadListHandler","loadTicketsHandler","buchungen","buchung","id","bookingId","kopieTickets","concat","accPanelLabel","user","dateBooked","datePaid","filteredTickets","filter","Accordion","TicketBestellung","increment","property","guestcount","parkcount","decrement","AbsolventenTicketAdd","GuestTicketAdd","ToPayment","Ticketshop","Header","background","justify","Menu","items","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","height","width","canvas","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","contentType","match","groups","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","requestMap","Map","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","onReady","dataChannel","channel","_messageHandler","dt","Date","getTime","replace","c","r","Math","random","floor","toString","Promise","resolve","reject","reqId","_createUUID","set","type","context","e","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","EntranceManagement","connectTicketReader","scanDoneHandler","ticketReader","connectTR","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","parse","inflate","setMasterConfig","src","alt","readTicketRemote","obliterateTicketRemote","LocalTicketMirror","_createDB","dumpTicketMirror","getTicketList","indexedDB","Error","waitingForIDBReadyQueue","_initDB","request","ev","db","errorCode","createObjectStore","keyPath","_getIDB","objectStore","transaction","item","add","getAll","onerror","onsuccess","get","isValid","isUsed","requestUpdate","put","IndexedDBExample","handleDumpMirror","showTickets","localTicketMirror","ltm","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","errorMessage","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","SystemInitalisierung","dateiTyp","inputDatatype","setValue","Select","options","option","Anzeige","EventManagement","rTRHandler","getTicket","App","account","obliterateTokens","getAccountDetails","details","verified","getAccountBalance","balance","st","paidTickets","poolTickets","parkTickets","errorDisplay","number","Grommet","theme","grommet","exact","eigenschaft1","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2eb14e90.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\nclass WalletSetup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.sign = this.sign.bind(this);\n        this.connectWallet = this.connectWallet.bind(this);\n        \n    }\n\n    /**\n     * Calling the initialization directly after this component\n     * was created and mounted in the DOM.\n     */\n    componentDidMount() {\n        this.init();\n    }\n\n    displayError() {\n        alert(\"Ups, das hat nicht geklappt\");\n    }\n\n    /**\n     * Initializes Ethereum Wallet Provider and Web3 Instance\n     * In case the browser is a desktop browser without wallet capability,\n     * the Standard WalletLink is used to create a Wallet Provider instance.\n     * WalletLink is supported by Coinbase as an example: https://github.com/walletlink/walletlink\n     */\n    init() {\n        // TODO: Move these constants to a global constants file\n        const APP_NAME = 'DHBW Bachelors Night Ticketing 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171' // Mainnet\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n\n            // Initialize WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            // Initialize a Web3 Provider object\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n        }\n\n        // Checking if wallet is already connected or not\n        // eslint-disable-next-line\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        // Creating Web3 Instance\n        this.web3 = new Web3(window.ethereum);\n    }\n\n    /**\n     * Attempts to connect with the Wallet\n     */\n    async connectWallet() {\n        // Requesting connection to wallet\n        var accounts = await window.ethereum.enable().catch(this.displayError);\n        if (!accounts) return;\n\n        console.log(`User's address is ${accounts[0]}`);\n        this.web3.eth.defaultAccount = accounts[0];\n        this.setState({ connected: true });\n    }\n\n    /**\n     * Example method for showing how a message can be signed and verified.\n     */\n    async sign(message) {\n        if (!window.ethereum) return this.displayError();\n        if (!window.ethereum.selectedAddress) return this.displayError();\n        var from = window.ethereum.selectedAddress;\n\n        var text = message;\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.send({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err) return console.error(err)\n            if (result.error) return console.error(result.error)\n\n            console.log(result);\n\n            var recovered = this.web3.eth.accounts.recover(msg, result.result);\n\n            if (recovered.toLowerCase() === from.toLowerCase()) {\n                alert('Successfully ecRecovered signer as ' + from)\n            } else {\n                alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n            }\n        })\n    }\n\n    /**\n     * Just a method to open a new tab...\n     */\n    linkToDownloadMetaMask() {\n        window.open('https://wallet.coinbase.com/', '_blank');\n    }\n\n    render() {\n        return (\n            <Box className=\"WalletSetup\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <h1>Wallet Setup</h1>\n                <Text>\n                    Um Tickets zu erwerben ben√∂tigen Sie ein sogenanntes Wallet.\n                    Dieses ist vergleichbar mit Ihrer Geldb√∂rse zu der nur Sie Zugriff haben.\n                </Text>\n                {(!this.state.walletAvailable && !this.state.connected) &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            F√ºr unser Ticket-System muss dieses Wallet Ethereum-f√§hig sein.\n                            Wir empfehlen Ihnen daher das Coinbase Wallet.\n                            Bitte installieren Sie sich das Coinbase Wallet √ºber die offizielle Website.\n                            Kommen Sie nach Abschluss der Einrichtung wieder auf diese Seite zur√ºck.\n                        </Text>\n                        <Button label=\"Coinbase f√ºr's Smartphone installieren\" onClick={this.linkToDownloadMetaMask}></Button>\n                    </Box>\n                }\n                {!this.state.connected &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            Als N√§chstes ben√∂tigt unsere Plattform die Adresse Ihres Wallets.\n                            Bitte best√§tigen Sie daher die Verbindung mit Ihrem Wallet √ºber folgende Schaltfl√§che.\n                            Sie geben dadurch <b>nicht</b> Ihre Kontrolle √ºber das Wallet ab!\n                        </Text>\n                        <Button label=\"Mit dem Wallet verbinden\" onClick={this.connectWallet}></Button>\n                    </Box>\n                }\n                <Text>\n                    Hier folgt eine DEMO!!!\n                </Text>\n                <TextInput\n                    placeholder=\"Nachricht zum signieren\"\n                    value={this.state.signMessage}\n                    onChange={(event) => { this.setState({ signMessage: event.target.value }) }}\n                ></TextInput>\n                <Button label=\"Sign and Verify Message\" onClick={() => { this.sign(this.state.signMessage) }}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default WalletSetup;\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/ticketbestellen\">Tickets Bestellen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/bestellungsuebersicht\">Bestellungen Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/setup\">Setup</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Text } from 'grommet';\nimport { Switch, Route, Link, useParams } from \"react-router-dom\";\nimport QRCode from 'qrcode';\n\nfunction SingleTicketViewer(props) {\n    let { identifier } = useParams();\n    const ticket = props.tickets.find(ticket => ticket.identifier === identifier);\n    return (\n        <Box className=\"SingleTicket\">\n            {ticket.forename}\n            {ticket.surname}\n            {ticket.ticketType}\n        </Box>\n    );\n}\n\nfunction TicketListItem(props) {\n    return (\n        <Box className=\"TicketListItem\" direction=\"row\" gap=\"small\" pad=\"small\">\n            <Text className=\"Name\">{props.ticket.forename} {props.ticket.surname}</Text>\n            <Text className=\"Type\">{props.ticket.ticketType}</Text>\n            <Button label=\"Anzeigen\" onClick={() => { window.location.assign('#/guest/tickets/' + props.ticket.identifier); }}></Button>\n        </Box>\n    );\n}\n\nclass TicketOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [], loading: false }\n    }\n\n    componentDidMount() {\n        this.fetchTickets();\n    }\n\n    async fetchTickets() {\n        this.setState({ loading: true });\n        let address = \"0x3Da85f73bC1B1662FE247391dEcD2a52f139fd13\";\n        var response = await fetch(\"http://localhost:3000/api/v1/users/\" + address + \"/tickets\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 43059960ead1db519cbbed4aa934462808262fa6204daefabcab4b0b38b667d61828556556e4b9e80b6a91e9990fc8704bbf399cdafd41b06ddc0c31a500accb94b96fa096bf8789c7c582f9e5df0ead8f23ef77a9b045ccbb78a60cd2401592e79b8c396cd4520297cfb0603011a7f373f9dbbc6a37527bd160b5e754850cbf8779a4c5049e816a9b9bee268e110baf53e901e80aa8df89d6a07b92cf33b581294bedc1b8da2c9a583845b13766f4c89abc9ac3466b69748a1ba0bf6a80a8c2b6aa6ec084c88c2cc4d212470089dbb9e4bce056c90e8a0ebaa5b9e563c80d20ac173b791769eac9d29c509810086f1700c7cec0071a03bb7aed67fec7215979',\n            }\n        }).catch(console.log);\n\n        if (!response) return;\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return;\n\n        tickets.forEach((ticket) => {\n            switch (ticket.ticketType) {\n                case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                default: break;\n            }\n        });\n\n        this.setState({ tickets: tickets, loading: false });\n    }\n\n    generateQRCodes() {\n        var ticketsCopy = [];\n        this.state.tickets.forEach((ticket, index, array) => {\n            let data = ticket.identifier; // TODO Change to signature and so on...\n            QRCode.toDataURL(data).then((url) => {\n                ticket.qrcode = url;\n                ticketsCopy.push(ticket);\n                if (index === array.length - 1) {\n                    this.setState({ tickets: ticketsCopy });\n                }\n            }).catch(console.log);\n        })\n    }\n\n    render() {\n        let ticketElements = this.state.tickets.map((ticket) => <TicketListItem key={ticket.identifier} ticket={ticket}></TicketListItem>);\n        \n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Switch>\n                    <Route path=\"/guest/tickets/:identifier\">\n                        <Link to=\"/guest/tickets/\">Alle Tickets anzeigen</Link>\n                        <SingleTicketViewer tickets={this.state.tickets}></SingleTicketViewer>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <Box>\n                            <Box>\n                                <h1 className=\"NumberOfTickets\">{this.state.tickets.length}</h1>\n                            </Box>\n                            <Box className=\"TicketList\">\n                                {this.state.loading && <p className=\"loader\"></p>}\n                                {ticketElements}\n                            </Box>\n                        </Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport { Box, Button, TextInput, Text } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\n\n    class AccountManagement extends React.Component{\n\n        constructor(props){\n            super(props);\n            this.connectWallet = this.connectWallet.bind(this);\n            this.createCoinbaseWallet = this.createCoinbaseWallet.bind(this);\n            this.createUser = this.createUser.bind(this);\n            this.otpBest√§tigen = this.otpBest√§tigen.bind(this);\n            this.otpInputHandler = this.otpInputHandler.bind(this);\n            this.setState1 = this.setState1.bind(this);\n            this.setState6 = this.setState6.bind(this);\n            this.sign = this.sign.bind(this);\n            this.state = { otp: \"\", step: 0 , Token: \"\"};\n            this.tokenHandler = this.tokenHandler.bind(this);\n            this.verifyAddress = this.verifyAddress.bind(this);\n            this.walletLogin = this.walletLogin.bind(this);\n            this.walletVerbinden = this.walletVerbinden.bind(this);\n        }\n\ncomponentDidMount() {\n    //Ruft die Initialisierung auf, nachdem die Komponente erstellt wurde\n    this.init();\n}\n\ninit(){\n        const APP_NAME = 'DHBW Bachelors Night Ticketing - 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171'\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n            //Initialisiere WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n\n        }\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        this.web3 = new Web3(window.ethereum);\n    }\n\notpInputHandler(event){\n    this.setState({otp: event.target.value});\n}\n\ntokenHandler(event){\n    this.setState({Token: event.target.value});\n}\n\notpBest√§tigen(){\n    console.log(this.state.otp);\n    this.setState({step: 2});\n}\n\ncreateCoinbaseWallet(){\n    window.open('https://wallet.coinbase.com/#signup', '_blank');\n}\n\nasync connectWallet(){\n    var accounts = await window.ethereum.enable().catch(this.displayError)\n    if (!accounts) return;\n\n    console.log(`User's address is ${accounts[0]}`);\n    this.setState({connected: true});\n    this.setState({step: 3});\n}\n\ndisplayError(){\n    alert(\"Ups, das hat leider nicht funktioniert. Bitte versuche es erneut.\")\n}\n\nasync verifyAddress(){\n    if (!window.ethereum) return this.displayError();\n    if (!window.ethereum.selectedAddress) return this.displayError();\n    var from = window.ethereum.selectedAddress;\n\n    var testsignatur = 'Drei3333';\n    var msg = this.web3.utils.stringToHex(testsignatur);\n    \n    var params = [msg, from]\n    var method = 'personal_sign'\n\n    this.web3.currentProvider.send({\n        method,\n        params,\n        from,\n    }, (err, result) => {\n        if (err) return console.error(err)\n        if (result.error) return console.error(result.error)\n\n        console.log(result);\n\n        var recovered = this.web3.eth.accounts.recover(msg, result.result);\n        if (recovered.toLowerCase() === from.toLowerCase()){\n            alert('Successfully ecRecovered signer as ' + from)\n            this.setState({ step: 4 })\n        } else {\n            alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n        }\n    })\n}\n\nasync createUser(){\n    const response = await fetch('http://localhost:3000/auth/otpcreate/' + this.state.otp, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ address: window.ethereum.selectedAddress})\n    }).catch(console.log);\n\n    if(!response) {\n        alert(\"Fehler\");\n        return;\n    }\n\n    const test = await response.json().catch(console.log);\n\n    console.log(test);\n    this.setState({step: 5});\n}\n\nasync walletLogin(){\n\n    const response = await fetch(\"http://localhost:3000/auth/login\", {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ address: window.ethereum.selectedAddress})\n    }).catch(console.log);\n\n    if (!response) {\n        alert(\"Fehler!\");\n        return;\n    }\n\n    const data = await response.json().catch(console.log);\n    console.log(data);\n    if(!data.challenge){\n        alert(\"Keine Challenge vorhanden!\")\n    } else {\n    this.sign(data.challenge);\n    }\n}\n\nasync sign(challengeString){\n    if(!window.ethereum) return this.displayError();\n    if(!window.ethereum.selectedAddress) return this.displayError();\n    var from = window.ethereum.selectedAddress;\n\n    var text = challengeString;\n    var msg = this.web3.utils.stringToHex(text);\n\n    var params = [msg, from]\n    var method = 'personal_sign'\n\n    this.web3.currentProvider.send({\n        method,\n        params,\n        from,\n    }, async (err, result) => {\n        if (err) return console.error(err)\n        if (result.error) return console.error(result.error)\n\n        console.log(result); //result = Ergebnis des Blockchain-Aufrufs\n        //Mit dem Result weiterrechnen, um Token auszugeben\n        //Hier muss dann noch eine \"Login-Funktion\" ausgef√ºhrt werden.\n\n        const response = await fetch('http://localhost:3000/auth/chr/' + challengeString,{\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ address: from, signature: result.result})\n        }).catch(console.log);\n\n        if(!response) {\n            alert(\"Fehler\");\n            return;\n        }\n        console.log(response)\n        //Nur Javascript Response Object\n        var jsResponse = await response.json().catch(console.log);\n\n        console.log(jsResponse)\n        if (!jsResponse) return;\n        \n        this.setToken(jsResponse.token);\n\n    })\n}\n\nsetState1(){\n    this.setState({step: 1});\n}\n\nsetState6(){\n    this.setState({step: 6});\n}\n\nasync walletVerbinden(){\n    var accounts = await window.ethereum.enable().catch(this.displayError)\n    if (!accounts) return;\n\n    console.log(`User's address is ${accounts[0]}`);\n    this.setState({connected: true});\n    this.setState({step: 6});\n}\n\nsetToken(Token){\n    localStorage.setItem('Tokenwert', Token);\n    var value = localStorage.getItem('Tokenwert');\n    console.log(value);\n}\n\nrender() {\n    return (\n            <Box className=\"AccountManagement\" pad=\"medium\" gap=\"small\">\n              {this.state.step === 0 &&\n                <Box gap=\"small\">\n                    <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                    <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                    <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                    <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                </Box>   \n              } \n              {this.state.step === 1 &&\n                <Box gap=\"small\">\n                    <Text>Bitte geben Sie das OneTime-Passwort ein und best√§tigen Sie die Eingabe</Text>\n                    <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                    <Button label=\"Eingabe best√§tigen\" onClick={this.otpBest√§tigen}></Button>\n                </Box>\n              }\n              {this.state.step === 2 &&\n                <Box classname=\"WalletSetup\" direction=\"column\" gap=\"small\">\n                    <h1>Wallet Setup</h1>\n                    <Text>Um Tickets zu erwerben ben√∂tigen Sie ein sogenanntes Wallet. Dieses ist vergleichbar mit Ihrer Geldb√∂rse zu der nur Sie Zugriff haben.</Text>\n                    {(!this.state.walletAvailable && !this.state.connected) &&\n                        <Box gap=\"small\">\n                            <Button label=\"Wallet auf dem Smartphone erstellen\" onClick={this.createCoinbaseWallet}></Button>\n                        </Box>\n                    }\n                    {(!this.state.connected)&&\n                        <Box gap=\"small\">\n                            <Text>Als N√§chstes ben√∂tigt unsere Plattform die Addresse Ihres Wallets. Bitte best√§tigen Sie daher die Verbindung mit Ihrem Wallet √ºber folgende Schaltfl√§che.Sie geben dadurch <b>nicht</b> Ihre Kontrolle √ºber das Wallet ab!\n                            Nach einem Klick auf den Button muss mit Coinbase Wallet der angezeigte QR-Code eingescannt werden, um das Wallet zu √ºberpr√ºfen.</Text>\n                            <Button label=\"Mit vorhandenem Wallet anmelden\" onClick={this.connectWallet}></Button>\n                        </Box>\n                    }\n                    {(this.state.walletAvailable && this.state.connected) &&\n                        //this.verifyAddress() <- @Robin: Das hier geht nicht!!!!\n                        <p>Test</p>\n                        //Was kommt genau hier rein?\n                    }\n                </Box>    \n              }\n              {this.state.step === 3 &&\n                <Box gap=\"small\">\n                    <Text>Ein Wallet wurde erfolgreich verbunden. Das Wallet muss anhand einer Testsignatur √ºberpr√ºft werden.</Text>\n                    <Button label=\"F√ºhre Testsignatur aus\" onClick={this.verifyAddress}></Button>\n                </Box>\n              }\n              {this.state.step === 4 &&\n                <Box gap=\"small\">\n                    <Text>Klicke auf den Button, um einen Benutzer zu erstellen.</Text>\n                    <Button label=\"Benutzer erstellen\" onClick={this.createUser}></Button>\n                </Box>\n              }\n              {this.state.step === 5 &&\n                <Box gap=\"small\">\n                    <Text>Der Benutzer wurde erfolgreich angelegt. Klicke auf den Button, um zur Anmeldung zu gelangen. </Text>\n                    <Button label=\"Zur Anmeldung\" onClick={this.setState6}></Button>\n                </Box>    \n              }\n              {this.state.step === 6 &&\n                <Box gap=\"small\">\n                    <h1>Anmeldung mit einem vorhandenen Wallet</h1>\n                    {(!this.state.walletAvailable && !this.state.connected)&&\n                        <Box gap=\"small\">\n                            <Text>Es ist kein Wallet verf√ºgbar. Bitte erstellen Sie ein Wallet und verbinden Sie dieses.</Text>\n                            <Button label=\"Wallet erstellen\" onClick={this.createCoinbaseWallet}></Button>\n                        </Box>    \n                    }\n                    {(!this.state.connected)&&\n                        <Box>\n                            <Text>Ihr Wallet scheint nicht verbunden zu sein. Bitte verbinden Sie das Wallet.</Text>\n                            <Button label=\"Wallet verbinden\" onClick={this.walletVerbinden}></Button>\n                        </Box>    \n                    }\n                    {(this.state.connected) &&\n                        <Box>\n                            <Text>Ein Wallet ist vorhanden und verbunden. Die Anmeldung ist m√∂glich.</Text>\n                            <Button label=\"Anmeldung starten\" onClick={this.walletLogin}></Button>\n                        </Box>\n                    }\n                </Box>\n              }\n              {this.state.step === 888 &&\n                <Box gap=\"small\">\n                    <h1>Willkommen bei Barry's Testgel√§nde</h1>\n                    <TextInput placeholder=\"Test-Token eingeben\" value={this.state.Token} onChange={this.tokenHandler}></TextInput>\n                    <Button label=\"Test\" onClick={() =>{this.setToken(this.state.Token)}}></Button>\n                </Box>\n              }\n            </Box>\n    );\n}\n}   \nexport default AccountManagement;","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Accordion, AccordionPanel } from 'grommet';\n\nclass BestellungsItem extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = { hiddenTickets: false };\n    }\n\n    render(){\n        var ticketsForBooking = [];\n        this.props.tickets.forEach((ticket) => {\n                ticketsForBooking.push(\n                    <Box onClick={() => {window.location.assign(\"#/guest/tickets/\" + ticket.identifier) }} border={{ color: 'black', size: 'large' }}>\n                        <h3>Buchungsnummer: {ticket.booking}</h3>\n                        <h3> Erstelldatum: {ticket.created}</h3>\n                        <h3> Nachname: {ticket.surname}</h3>\n                        <h3> Vorname: {ticket.forename}/</h3>\n                        <h3> Ticket Identifier: {ticket.identifier}</h3>\n                        <h3>Ticket Typ: {ticket.ticketType}</h3>\n                    </Box>)\n        });\n        return(\n            <AccordionPanel label={this.props.label}>\n                {ticketsForBooking}\n            </AccordionPanel>\n        )\n    }\n\n}\n\nclass BookingOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this);\n        this.loadTicketsHandler = this.loadTicketsHandler.bind(this);\n        this.state = { buchungen: [], tickets: [] };\n    }\n\n    async loadListHandler() {\n        var response = await fetch(\"http://localhost:3000/api/v1/bookings/user/0x1\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 43059960ead1db519cbbed4aa934462808262fa6204daefabcab4b0b38b667d61828556556e4b9e80b6a91e9990fc8704bbf399cdafd41b06ddc0c31a500accb94b96fa096bf8789c7c582f9e5df0ead8f23ef77a9b045ccbb78a60cd2401592e79b8c396cd4520297cfb0603011a7f373f9dbbc6a37527bd160b5e754850cbf8779a4c5049e816a9b9bee268e110baf53e901e80aa8df89d6a07b92cf33b581294bedc1b8da2c9a583845b13766f4c89abc9ac3466b69748a1ba0bf6a80a8c2b6aa6ec084c88c2cc4d212470089dbb9e4bce056c90e8a0ebaa5b9e563c80d20ac173b791769eac9d29c509810086f1700c7cec0071a03bb7aed67fec7215979',\n            }\n        }).catch(console.log)\n        if (!response) return\n        console.log(response)\n        var data = await response.json().catch(console.log)\n        this.setState({ buchungen: data })\n        this.state.buchungen.forEach((buchung) => {\n            this.loadTicketsHandler(buchung.id)\n        })\n\n    }\n\n    async loadTicketsHandler(bookingId) {\n        var response = await fetch(\"http://localhost:3000/api/v1/bookings/ticketsBooked/\" + bookingId, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 43059960ead1db519cbbed4aa934462808262fa6204daefabcab4b0b38b667d61828556556e4b9e80b6a91e9990fc8704bbf399cdafd41b06ddc0c31a500accb94b96fa096bf8789c7c582f9e5df0ead8f23ef77a9b045ccbb78a60cd2401592e79b8c396cd4520297cfb0603011a7f373f9dbbc6a37527bd160b5e754850cbf8779a4c5049e816a9b9bee268e110baf53e901e80aa8df89d6a07b92cf33b581294bedc1b8da2c9a583845b13766f4c89abc9ac3466b69748a1ba0bf6a80a8c2b6aa6ec084c88c2cc4d212470089dbb9e4bce056c90e8a0ebaa5b9e563c80d20ac173b791769eac9d29c509810086f1700c7cec0071a03bb7aed67fec7215979',\n            }\n        }).catch(console.log)\n        if (!response) return\n        console.log(response)\n        var data = await response.json().catch(console.log)\n\n        if(!data) return\n        console.log(data)\n\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        console.log(kopieTickets, this.state.tickets);\n        this.setState({ tickets: kopieTickets });\n    }\n\n    render() {\n        var buchungen = [];\n        this.state.buchungen.forEach((buchung) => {\n            var accPanelLabel = \"Buchungs-ID: \" + buchung.id + \" Account: \" + buchung.user + \" Buchungsdatum: \" + buchung.dateBooked + \" Bezahldatum: \" + buchung.datePaid;\n            var filteredTickets = this.state.tickets.filter((ticket) =>{\n                return ticket.booking === buchung.id\n            })\n            buchungen.push(<BestellungsItem key={buchung.id} label={accPanelLabel} tickets={filteredTickets}></BestellungsItem>)\n        });\n\n        return (\n            <Box className=\"Bestellungsuebsericht\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    <Button label=\"Liste laden\" onClick={() => {this.loadListHandler();}}></Button>\n                </Box>\n                <Box>\n                    <Button label=\"Tickets laden\"></Button>\n                </Box>\n                <Box>\n                    <Accordion>\n                        {buchungen}\n                    </Accordion>\n\n                </Box>\n                <Box></Box>\n            </Box>\n        );\n    }\n}\n\nexport default BookingOverview;\n","import React from 'react';\n\nimport { Box, Button, Text } from 'grommet';\n\nclass TicketBestellung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.AbsolventenTicketAdd = this.AbsolventenTicketAdd.bind(this);\n        this.GuestTicketAdd = this.GuestTicketAdd.bind(this);\n        this.ToPayment = this.ToPayment.bind(this);\n    \n\n        this.state = { \n            guestcount: 0, \n            parkcount: 0, \n            step: 0 \n        };\n        \n    }\n\n\n    AbsolventenTicketAdd(){\n        //Wechselt die Ansicht zu den G√§steTickets\n        this.setState({ step: 1 })\n    }\n    GuestTicketAdd(){\n        this.setState({ step: 2})\n    }\n    ToPayment(){\n        this.setState({ step: 3})\n    }\n\n    //Funktion f√ºr die Counter\n    increment = (property) => {\n        if (property == \"guest\" && this.state.guestcount < 2){\n            this.setState({guestcount: this.state.guestcount + 1});\n        }\n        else if (property ==\"park\" && this.state.parkcount < 3){\n            this.setState({parkcount: this.state.parkcount + 1});\n        }\n    }\n    decrement = (property) => {\n        if (property == \"guest\" && this.state.guestcount > 0){\n            this.setState({guestcount: this.state.guestcount - 1});\n        }\n        else if (property ==\"park\" && this.state.parkcount > 0){\n            this.setState({parkcount: this.state.parkcount - 1});\n        }\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketBestellung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n               \n               {this.state.step === 0 &&\n                <Box gap=\"small\">\n                    Klicke hier, um ein Absolvententicket zu kaufen.\n                    <Button label=\" Ein Absolventen Ticket kaufen\" onClick={this.AbsolventenTicketAdd} gap=\"small\"></Button>\n                   \n                </Box>\n                }\n\n                {this.state.step === 1 &&\n                <Box gap=\"small\">\n                    <Text>Bitte geben sie an, wie viele G√§ste Sie mitnehmen wollen.</Text>\n                    <Button onClick={() => this.increment(\"guest\")} className=\"guestcount\" label=\"+\"></Button>\n                    <Button onClick={() => this.decrement(\"guest\")} className=\"guestcount\" label=\"-\"></Button>\n                    <h2>{this.state.guestcount}</h2>\n\n                   <Button onClick={this.GuestTicketAdd} label=\"Weiter\"></Button>\n                </Box>\n                }\n\n                {this.state.step === 2 &&\n                <Box gap=\"small\">\n                    <Text>Bitte geben sie an, wie viele Parktickets Sie ben√∂tigen.</Text>   \n\n                    <Button onClick={() => this.increment(\"park\")} className=\"parkcount\" label=\"+\"></Button>\n                    <Button onClick={() => this.decrement(\"park\")} className=\"parkcount\" label=\"-\"></Button>\n                    <h2>{this.state.parkcount}</h2>\n                    <Button onClick={this.ToPayment} label=\"Zur Bezahlung\"></Button>\n                </Box>\n                }\n\n                {this.state.step === 3 &&\n                <Box gap=\"small\">\n                    <Text>Sie haben folgendes bestellt: <br/>\n                    Absolvententicket 1 <br/> \n                    G√§steticket {this.state.guestcount} Parkticket {this.state.parkcount}\n                    Bitte √ºberweisen Sie folgenden Betrag auf das Konto: XXXXYYYYZZZZ.<br/>\n                    Geben Sie ihren Namen als Verwendungszweck an.<br/>\n                    Nach Rechnungseingang erhalten Sie Ihre Tickets an ihr Wallet gesendet.<br/>\n                    </Text>\n\n                </Box>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default TicketBestellung;\n","import React from 'react';\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport WalletSetup from './Components/WalletSetup';\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport AccountManagement from './Components/AccountManagement';\nimport BookingOverview from './Components/BookingOverview';\nimport TicketBestellung from './Components/TicketBestellung';\n\nclass Ticketshop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    <Menu label=\"Account\" items={[{ label: 'Logout' }]} />\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/ticketbestellen\">\n                        <TicketBestellung></TicketBestellung>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/setup\">\n                        <AccountManagement></AccountManagement>\n                    </Route>\n                    <Route path=\"/guest/demosetup\">\n                        <WalletSetup></WalletSetup>\n                    </Route>\n                    <Route path=\"/guest/bestellungsuebersicht\">\n                        <BookingOverview></BookingOverview>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterst√ºtzt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        alert(event.data);\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport { Switch, Route } from \"react-router-dom\";\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass EntranceManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    render() {\n        return (\n            <Box className=\"EntranceManagement\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Ger√§t als Ticket Leser verwenden m√∂chten, m√ºssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Ger√§t mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Ger√§t scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Wunderbar, Sie sind verbunden...</p>\n                            <p>In Zukunft sollten hier Funktionen zum Ticket-Scan stehen...</p>\n                            <Button label=\"Lese ein Beispiel Ticket\" onClick={() => { this.ticketReader.readTicketRemote(\"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\") }}></Button>\n                            <Button label=\"Entwerte Ticket\" onClick={() => { this.ticketReader.obliterateTicketRemote(123, \"signature\") }}></Button>\n                            <Button label=\"Beispiel Funktion 3\"></Button>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte warten Sie einen Moment...</p>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'failed' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte aktivieren Sie den Reader erneut.</p>\n                            <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                        </Route>\n                    </Switch>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default EntranceManagement;\n","/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.dumpTicketMirror = this.dumpTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(\"TicketMirror\", 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async dumpTicketMirror() {\n        var db = await this._getIDB().catch(console.error);\n        if (!db) return;\n\n        var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n\n        // TODO: Fetch real data from the blockchain when online\n        const dummyData = [{\n            \"identifier\": \"ca6c9409-0ec9-42fb-9ca7-d42a74642d7e\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Parken\"\n        }, {\n            \"identifier\": \"cea4b540-63a4-4abd-9a9a-499bb3879b8c\",\n            \"isValid\": false,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"c3573a44-f9e8-4772-bf80-57d1d07239c8\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"5506d14d-8090-411a-897c-3f6c898ec8d2\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }]\n\n        dummyData.forEach((item) => {\n            objectStore.add(item);\n        });\n\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The signature of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} signature - Specific signature of the owner that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, signature) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n\n                // TODO: Check signature and identifier hash\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Ticket is not valid.\");\n                if (ticket.isUsed) return reject(\"Ticket was already used.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = resolve;\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button } from 'grommet';\n\n// eslint-disable-next-line\nimport { LocalTicketMirror } from '../Classes/LocalTicketMirror';\n\n\nclass IndexedDBExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n        this.showTickets();\n    }\n\n    handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        ltm.dumpTicketMirror();\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets });\n    }\n\n    render() {\n        let tickets = this.state.tickets.map((ticket) => {\n            return <li key={ticket.identifier}>{ticket.isValid && 'Valid'}{!ticket.isValid && 'Not Valid'} -  {ticket.isUsed && 'Used'}{!ticket.isUsed && 'Not Used'} - {ticket.ticketType}</li>\n        });\n\n        return (\n            <Box className=\"IndexedDBExample\" pad=\"medium\">\n                <ul>\n                    {tickets}\n                </ul>\n                <Button label=\"Dump Mirror\" onClick={this.handleDumpMirror}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default IndexedDBExample;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and signature and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} signature - Signature used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, signature, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { ticket: ticket, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { success: success, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    disconnectRemoteTicketReader(remoteTicketReader) {\n\n    }\n\n    disconnectAll() {\n\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzuf√ºgen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzuf√ºgen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielger√§t scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielger√§ts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\n//import './TicketOverview.css';\nimport { Box, Button, Accordion, AccordionPanel, Select } from 'grommet';\n\nclass InitialeListeEinlesen extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { listeEingelesen: false, initialeListe: [] };\n    }\n\n    render() {\n        if (!this.state.ListeEingelesen);\n        return;\n    }\n\n}\n\nclass SystemInitalisierung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { dateiTyp: \"none\" };\n        this.inputDatatype = this.inputDatatype.bind(this);\n        \n    }\n\n    inputDatatype(dateiTyp){\n            const [value, setValue] = this.state.dateiTyp;\n            return (\n              <Select\n                options={['CSV', 'XLSX']}\n                value={value}\n                onChange={({ option }) => setValue(option)}\n              />\n            );\n    }\n\n    render() {\n        var Anzeige = this.inputDatatype('CSV');\n\n        return (\n            <Box className=\"SystemInitalisierung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box className=\"Auswahlmen√º\"> \n                {Anzeige}\n                </Box>\n            </Box>\n\n        );\n    }\n}\n\nexport default SystemInitalisierung;\n","import React from 'react';\nimport { Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport IndexedDBExample from './Components/IndexedDBExample';\nimport TicketReaderManager from './Components/TicketReaderManager';\nimport SystemInitalisierung from './Components/SystemInitalisierung';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            console.log(connectionState);\n            /**console.debug(\"Attempting to remove closed remote ticket reader\");\n            let RTRList = this.state.RTRList;\n            let idx = RTRList.indexOf(remoteTicketReader);\n            RTRList.splice(idx, 1);\n            this.setState({ RTRList: RTRList });*/\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => { \n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, signature, callback) => {\n            // TODO: Request localmirror \n            callback(true);\n        }\n    }\n\n    render() {\n        return (\n            <Box className=\"EventManagement\">\n                <ul>\n                    <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                    <li><Link to=\"/eventmgmt/entrancedb\">Show Entrance Dashboard</Link></li>\n                    <li><Link to=\"/eventmgmt/ticketshop\">Manage Ticketshop</Link></li>\n                    <li><Link to=\"/eventmgmt/SystemInitalisierung\">System Initalisieren</Link></li>\n                </ul>\n                <Switch>\n                    <Route path=\"/eventmgmt/rtrm\">\n                        <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                    </Route>\n                    <Route path=\"/eventmgmt/entrancedb\">\n                        <IndexedDBExample localTicketMirror={this.localTicketMirror}></IndexedDBExample>\n                    </Route>\n                    <Route path=\"/eventmgmt/SystemInitalisierung\">\n                        <SystemInitalisierung></SystemInitalisierung>\n                    </Route>\n                    <Route path=\"/eventmgmt/ticketshop\">\n                        <Box pad=\"medium\">Hier m√ºsste dann sowas wie ein Ticketshop Management Dashboard hin...</Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport EntranceManagement from './EntranceManagement/EntranceManagement';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null\n    };\n    this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    this.obliterateTokens = this.obliterateTokens.bind(this);\n  }\n\n  errorDisplay(msg) {\n    alert('Sorry, there was an error. Please try again.');\n  }\n\n  scanDoneHandler(address) {\n    this.getAccountDetails(address).then((details) => {\n      if (!details.verified) {\n        return alert('Account nicht f√ºr TBN-Nutzung verifiziert');\n      }\n\n      this.getAccountBalance(address).then((balance) => {\n        const st = this.state;\n        st.account = {\n          address: address,\n          balance: balance,\n          verified: details.verified,\n          paidTickets: details.paidTickets,\n          poolTickets: details.poolTickets,\n          parkTickets: details.parkTickets\n        };\n        this.setState(st);\n      })\n    });\n  }\n\n  async getAccountBalance(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/balanceOf?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  async getAccountDetails(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/accountDetails?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  obliterateTokens(number) {\n    let prom = new Promise((resolve, reject) => {\n      setTimeout(() => { resolve('√úbertragen'); this.scanDoneHandler(null) }, 3000); // DUMMY\n      // Call transferFrom address to obliterate-wallet\n    });\n\n    return prom;\n  }\n\n  render() {\n    return (\n      <Grommet theme={grommet}>\n        <Switch>\n          <Route exact path=\"/\">\n            <ul>\n              <li><Link to=\"/guest\">Gast</Link></li>\n              <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n              <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n            </ul>\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/guest\">\n            <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n          </Route>\n          <Route path=\"/entrance\">\n            <EntranceManagement></EntranceManagement>\n          </Route>\n          <Route path=\"/eventmgmt\">\n            <EventManagement></EventManagement>\n          </Route>\n        </Switch>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}