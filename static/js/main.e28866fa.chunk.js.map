{"version":3,"sources":["Guest/WalletSetup.js","Guest/UserMainMenu.js","Guest/Obliterator.js","Guest/TicketOverview.js","Guest/Guest.js","Utilities/QRScanner.js","EntranceManagement/ObliteratePanel.js","EventManagement/TicketReaderManager.js","EntranceManagement/EntranceManagement.js","EventManagement/IndexedDBExample.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["WalletSetup","props","state","sign","bind","connectWallet","this","init","alert","setState","walletAvailable","window","ethereum","walletLink","WalletLink","appName","appLogoUrl","darkMode","makeWeb3Provider","connected","selectedAddress","web3","Web3","enable","catch","displayError","accounts","console","log","eth","defaultAccount","from","msg","utils","stringToHex","params","currentProvider","send","method","err","result","error","recovered","recover","toLowerCase","open","Box","className","direction","gap","pad","Text","Button","label","onClick","linkToDownloadMetaMask","React","Component","UserMainMenu","to","Obliterator","qrcode","undefined","givenProvider","connect","getSelectedAddress","sendAsync","signature","QRCode","toDataURL","then","url","getAccounts","src","alt","width","height","ticketType","onReady","TicketOverview","obliterate","onReadyHandler","Guest","Header","background","justify","Menu","items","path","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","videoHeight","videoWidth","canvas","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","contentType","match","groups","address","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","getVideoTracks","stop","ref","hidden","ObliteratePanel","obliterating","st","onStartObliterate","success","sum","parseInt","account","poolTickets","paidTickets","parkTickets","balance","RemoteTicketReader","step","_iceCandidatesHandler","_dataChannelOpenHandler","_generateOfferCode","_abortHandler","_scanDoneHandler","_dataChannelClosedHandler","_initConnection","icecandidates","localPeerConnection","RTCPeerConnection","addEventListener","_connectionChangeHandler","dataChannel","createDataChannel","_messageHandler","_createOffer","event","length","push","candidate","offer","setTimeout","onClosed","createOffer","setLocalDescription","candidates","JSON","stringify","obj","parse","setRemoteDescription","RTCSessionDescription","answer","handleError","forEach","addIceCandidate","onAbort","TicketReader","_receiveChannelHandler","_generateAnswerCode","channel","createAnswer","TicketReaderManager","remoteTicketReader","connectRemoteTicketReader","rTR","id","indexOf","splice","EntranceManagement","connectTicketReader","_closedHandler","_readyHandler","ticketReader","connectTR","scanDoneHandler","obliterateTokens","IndexedDBExample","EventManagement","App","getAccountDetails","details","verified","getAccountBalance","fetch","mode","cache","errorDisplay","response","json","number","Promise","resolve","reject","Grommet","theme","grommet","exact","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e28866fa.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, Text } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\nclass WalletSetup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.sign = this.sign.bind(this);\n        this.connectWallet = this.connectWallet.bind(this);\n    }\n\n    /**\n     * Calling the initialization directly after this component\n     * was created and mounted in the DOM.\n     */\n    componentDidMount() {\n        this.init();\n    }\n\n    displayError() {\n        alert(\"Ups, das hat nicht geklappt\");\n    }\n\n    /**\n     * Initializes Ethereum Wallet Provider and Web3 Instance\n     * In case the browser is a desktop browser without wallet capability,\n     * the Standard WalletLink is used to create a Wallet Provider instance.\n     * WalletLink is supported by Coinbase as an example: https://github.com/walletlink/walletlink\n     */\n    init() {\n        // TODO: Move these constants to a global constants file\n        const APP_NAME = 'DHBW Bachelors Night Ticketing 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171' // Mainnet\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n\n            // Initialize WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            // Initialize a Web3 Provider object\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n        }\n\n        // Checking if wallet is already connected or not\n        // eslint-disable-next-line\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        // Creating Web3 Instance\n        this.web3 = new Web3(window.ethereum);\n    }\n\n    /**\n     * Attempts to connect with the Wallet\n     */\n    async connectWallet() {\n        // Requesting connection to wallet\n        var accounts = await window.ethereum.enable().catch(this.displayError);\n        if (!accounts) return;\n\n        console.log(`User's address is ${accounts[0]}`);\n        this.web3.eth.defaultAccount = accounts[0];\n        this.setState({ connected: true });\n    }\n\n    /**\n     * Example method for showing how a message can be signed and verified.\n     */\n    async sign() {\n        if (!window.ethereum) return this.displayError();\n        if (!window.ethereum.selectedAddress) return this.displayError();\n        var from = window.ethereum.selectedAddress;\n\n        var text = 'Hallo du Frosch!';\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.send({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err) return console.error(err)\n            if (result.error) return console.error(result.error)\n\n            console.log(result);\n\n            var recovered = this.web3.eth.accounts.recover(msg, result.result);\n\n            if (recovered.toLowerCase() === from.toLowerCase()) {\n                alert('Successfully ecRecovered signer as ' + from)\n            } else {\n                alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n            }\n        })\n    }\n\n    /**\n     * Just a method to open a new tab...\n     */\n    linkToDownloadMetaMask() {\n        window.open('https://wallet.coinbase.com/', '_blank');\n    }\n\n    render() {\n        return (\n            <Box className=\"WalletSetup\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <h1>Wallet Setup</h1>\n                <Text>\n                    Um Tickets zu erwerben benötigen Sie ein sogenanntes Wallet.\n                    Dieses ist vergleichbar mit Ihrer Geldbörse zu der nur Sie Zugriff haben.\n                </Text>\n                {(!this.state.walletAvailable && !this.state.connected) &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            Für unser Ticket-System muss dieses Wallet Ethereum-fähig sein.\n                            Wir empfehlen Ihnen daher das Coinbase Wallet.\n                            Bitte installieren Sie sich das Coinbase Wallet über die offizielle Website.\n                            Kommen Sie nach Abschluss der Einrichtung wieder auf diese Seite zurück.\n                        </Text>\n                        <Button label=\"Coinbase für's Smartphone installieren\" onClick={this.linkToDownloadMetaMask}></Button>\n                    </Box>\n                }\n                {!this.state.connected &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            Als Nächstes benötigt unsere Plattform die Adresse Ihres Wallets.\n                            Bitte bestätigen Sie daher die Verbindung mit Ihrem Wallet über folgende Schaltfläche.\n                            Sie geben dadurch <b>nicht</b> Ihre Kontrolle über das Wallet ab!\n                        </Text>\n                        <Button label=\"Mit dem Wallet verbinden\" onClick={this.connectWallet}></Button>\n                    </Box>\n                }\n                <Text>\n                    Hier folgt eine DEMO!!!\n                </Text>\n                <Button label=\"Sign and Verify Message\" onClick={this.sign}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default WalletSetup;\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/\">Tickets Bestellen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/\">Bestellungen Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/setup\">Setup</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './Obliterator.css';\nimport QRCode from 'qrcode';\nimport Web3 from 'web3';\nimport { Box, Button, Text } from 'grommet';\n\nclass Obliterator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { qrcode: undefined };\n        this.web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545');\n        this.state = { error: false };\n        this.sign();\n    }\n\n    async sign() {\n        await this.connect();\n        var from = await this.getSelectedAddress();\n\n        var text = 'Hallo du Frosch!';\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.sendAsync({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err){\n                this.setState({ error: true });\n                return console.error(err)\n            } \n            if (result.error){\n                this.setState({ error: true });\n                return console.error(result.error)\n            } \n\n            const signature = result.result;\n            \n            QRCode.toDataURL(signature)\n            .then(url => {\n                this.setState({ qrcode: url });\n            })\n            .catch(err => {\n                this.setState({ error: true });\n                console.error(err);\n            })\n\n        })\n    }\n\n    async connect() {\n        if (typeof window.ethereum !== 'undefined') {\n            await window.ethereum.enable().catch(console.error);\n        }\n    }\n\n    async getSelectedAddress() {\n        var accounts = await this.web3.eth.getAccounts().catch(console.error);\n        return accounts[0].toLowerCase();\n    }\n\n    render() {\n        return (\n            <Box className=\"Obliterator\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                { !this.state.error && <Box>\n                    <img src={this.state.qrcode} alt=\"QRCODE\" width=\"300px\" height=\"300px\"></img>\n                    <h2>{this.props.ticketType}</h2>\n                </Box>}\n                { this.state.error && <Box>\n                    <Text>Ups, das hat nicht geklappt!</Text>\n                </Box>}\n                <Button label=\"Fertig\" onClick={this.props.onReady}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default Obliterator;\n","import React from 'react';\nimport './TicketOverview.css';\nimport Obliterator from './Obliterator.js';\nimport { Box, Button, Text } from 'grommet';\n\nclass TicketOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.obliterate = this.obliterate.bind(this);\n        this.onReadyHandler = this.onReadyHandler.bind(this);\n        this.state = { obliterate: undefined };\n    }\n\n    onReadyHandler(){\n        this.setState({ obliterate: undefined })\n    }\n\n    obliterate(){\n        this.setState({ obliterate: \"Absolvent\" })\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    <Box>\n                        <h1 className=\"NumberOfTickets\">4</h1>\n                    </Box>\n                    <Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Absolvent</Text><Button label=\"Einlösen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Gast Regulär</Text><Button label=\"Einlösen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Gast Regulär</Text><Button label=\"Einlösen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Parken</Text><Button label=\"Einlösen\" onClick={this.obliterate}></Button>\n                        </Box>\n                    </Box>\n                </Box>\n                {this.state.obliterate && <Obliterator ticketType={this.state.obliterate} onReady={this.onReadyHandler}></Obliterator>}\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport WalletSetup from './WalletSetup';\nimport UserMainMenu from './UserMainMenu';\nimport TicketOverview from './TicketOverview';\n\nclass Guest extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    <Menu label=\"Account\" items={[{ label: 'Logout' }]} />\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/tickets\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/setup\">\n                        <WalletSetup></WalletSetup>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Guest;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = this.video.current.videoHeight;\n      this.canvasElement.current.width = this.video.current.videoWidth;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterstützt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 300, height: 300 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <Box pad=\"medium\">\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </Box>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Box, Button } from 'grommet';\n\nclass ObliteratePanel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.obliterate = this.obliterate.bind(this);\n        this.state = { obliterating: false };\n    }\n\n    obliterate() {\n        const st = this.state;\n        st.obliterating = true;\n        this.setState(st);\n        this.props.onStartObliterate(2).then((success) => {\n            //st.obliterating = false;\n            //this.setState(st);\n            alert(success);\n            // Show something different.\n        }).catch((error) => {\n            alert(error);\n            st.obliterating = false;\n            this.setState(st);\n        });\n    }\n\n    render() {\n        const poolTickets = parseInt(this.props.account.poolTickets);\n        const paidTickets = parseInt(this.props.account.paidTickets);\n        const parkTickets = parseInt(this.props.account.parkTickets);\n        const sum = poolTickets + paidTickets + parkTickets;\n        const balance = parseInt(this.props.account.balance);\n\n        return (\n            <Box className=\"ObliteratePanel\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <span>Wallet Address: {this.props.account.address}</span>\n                <span>Balance: {this.props.account.balance}</span>\n                {!this.state.obliterating &&\n                    <Box gap=\"small\">\n                        {balance === sum + 1 &&\n                            <Button label=\"Studenten-Ticket Einlösen\" onClick={this.obliterate}></Button>\n                        }\n                        {balance <= sum + 1 &&\n                            <Button label=\"Besucher-Ticket Einlösen\" onClick={this.obliterate}></Button>\n                        }\n                    </Box>\n                }\n                {this.state.obliterating &&\n                    <span>Obliterating Tickets...</span>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default ObliteratePanel;\n","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport QRScanner from '../Utilities/QRScanner';\n\n// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\nimport QRCode from 'qrcode';\n\nimport './dialog.css';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { step: 0 };\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._generateOfferCode = this._generateOfferCode.bind(this);\n        this._abortHandler = this._abortHandler.bind(this);\n        this._scanDoneHandler = this._scanDoneHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._initConnection();\n    }\n\n    _initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('iceconnectionstatechange', this._connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n\n        this._createOffer();\n    }\n\n    _iceCandidatesHandler(event) {\n        if (this.icecandidates.length <= 1) { // Constrain the candidates to max. 2\n            this.icecandidates.push(event.candidate);\n        }\n        if (this.offer && !this.qrcode) {\n            setTimeout(this._generateOfferCode, 100); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.log(event);\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.log(event);\n        this.props.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.log('Data Channel Closed', event);\n        this.props.onClosed();\n    }\n\n    _messageHandler(event) {\n        alert(event.data);\n    }\n\n    _readTicketRemote() {\n\n    }\n\n    _obliterateTicketRemote() {\n\n    }\n\n    async _createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    async _generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n\n        // Create QR Code\n        let url = await QRCode.toDataURL(JSON.stringify(data)).catch(console.error);\n        this.setState({ qrcode: url });\n    }\n\n    async _scanDoneHandler(data) {\n        let obj = JSON.parse(data);\n\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(obj.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        obj.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n    _abortHandler() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <div className=\"ticket-reader-dialog\">\n                <div className=\"ticket-reader-background-box\"></div>\n                <div className=\"ticket-reader-dialog-center\">\n                    <div className=\"ticket-reader-dialog-box\">\n                        <div className=\"ticket-reader-db-header\">\n                            <h1>Remote Ticket Reader Hinzufügen</h1>\n                            <Button className=\"abort\" onClick={this._abortHandler}>X</Button>\n                        </div>\n                        {this.state.step === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.qrcode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.qrcode && <img src={this.state.qrcode} alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielgerät scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ step: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.step === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this._scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielgeräts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a TicketReaderManager.\n */\n// eslint-disable-next-line\nexport class TicketReader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { step: 0 };\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._generateAnswerCode = this._generateAnswerCode.bind(this);\n        this._abortHandler = this._abortHandler.bind(this);\n        this._scanDoneHandler = this._scanDoneHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._initConnection();\n    }\n\n    _initConnection() {\n        const servers = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('iceconnectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        if (this.icecandidates.length <= 1) { // Constrain the candidates to max. 2\n            this.icecandidates.push(event.candidate);\n        }\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswerCode, 100); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.log(event);\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.log(event);\n        this.props.onReady();\n        this.dataChannel.send('Hallo Master!');\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.log(event);\n        this.props.onClosed();\n    }\n\n    _messageHandler(event) {\n        alert(event.data);\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _readTicketRemote() {\n\n    }\n\n    _obliterateTicketRemote() {\n\n    }\n\n    async _generateAnswerCode() {\n        let data = { answer: this.answer, candidates: this.icecandidates };\n\n        // Create QR Code\n        let url = await QRCode.toDataURL(JSON.stringify(data)).catch(console.error);\n        this.setState({ qrcode: url });\n    }\n\n    async _scanDoneHandler(data) {\n        let obj = JSON.parse(data);\n\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(obj.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        obj.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n\n        this.setState({ step: 1 });\n    }\n\n    _abortHandler() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <div className=\"ticket-reader-dialog\">\n                <div className=\"ticket-reader-background-box\"></div>\n                <div className=\"ticket-reader-dialog-center\">\n                    <div className=\"ticket-reader-dialog-box\">\n                        <div className=\"ticket-reader-db-header\">\n                            <h1>Als Ticket Reader verbinden</h1>\n                            <Button className=\"abort\" onClick={this._abortHandler}>X</Button>\n                        </div>\n                        {this.state.step === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this._scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte den Code des Initiators scannen</p>\n                                </div>\n                            </div>\n                        }\n                        {this.state.step === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.qrcode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.qrcode && <img src={this.state.qrcode} alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun mit dem Initiator Gerät scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nexport class TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { remoteTicketReader: [] };\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = <RemoteTicketReader\n            onAbort={() => { this.setState({ connect: null }); }}\n            onReady={() => { \n                this.setState({ connect: null });\n                const rTR = this.state.remoteTicketReader;\n                rTR.push(remoteTicketReader);\n                this.setState({remoteTicketReader: rTR}); \n                }}\n            onClosed={() => {\n                console.log(\"Attempting to remove closed ticketreader\");\n                const rTR = this.state.remoteTicketReader;\n                console.log(rTR);\n                let id = rTR.indexOf(remoteTicketReader);\n                rTR.splice(id, 1);\n                console.log(rTR);\n                this.setState({remoteTicketReader: rTR});\n            }}\n            ></RemoteTicketReader>;\n        this.setState({ connect: remoteTicketReader });\n    }\n\n    disconnectRemoteTicketReader(remoteTicketReader) {\n\n    }\n\n    disconnectAll() {\n\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.state.remoteTicketReader.length} Ticket Leser verbunden.\n                </p>\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzufügen\"></Button>\n                {this.state.connect}\n            </Box>\n        );\n    }\n\n}","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport { Switch, Route } from \"react-router-dom\";\nimport QRScanner from '../Utilities/QRScanner';\nimport ObliteratePanel from './ObliteratePanel';\n\nimport { TicketReader } from '../EventManagement/TicketReaderManager';\n\nclass EntranceManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this._closedHandler = this._closedHandler.bind(this);\n        this._readyHandler = this._readyHandler.bind(this);\n        this._abortHandler = this._abortHandler.bind(this);\n    }\n\n    connectTicketReader() {\n        this.ticketReader = <TicketReader\n            onAbort={this._abortHandler}\n            onReady={this._readyHandler}\n            onClosed={this._closedHandler}></TicketReader>;\n        this.setState({ connectTR: this.ticketReader });\n    }\n\n    _abortHandler() {\n        this.setState({ connectTR: null });\n    }\n\n    _closedHandler() {\n        this.setState({ connected: false });\n    }\n\n    _readyHandler() {\n        this.setState({ connectTR: null, connected: true });\n    }\n\n    render() {\n        return (\n            <Box className=\"EntranceManagement\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Gerät als Ticket Leser verwenden möchten, müssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Gerät mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR}\n                    </Box>\n                }\n                {this.state.connected &&\n                    <Switch>\n                        <Route path=\"/entrance/test\">\n                            {!this.state.account && <QRScanner contentType=\"ETHEREUM_ADDRESS\" onDone={this.scanDoneHandler}></QRScanner>}\n                            {this.state.account &&\n                                <ObliteratePanel\n                                    account={this.state.account}\n                                    onStartObliterate={this.obliterateTokens}>\n                                </ObliteratePanel>}\n                        </Route>\n                        <Route path=\"/entrance/\">\n                            <p>Wunderbar, Sie sind verbunden...</p>\n                            <p>In Zukunft sollten hier Funktionen zum Ticket-Scan stehen...</p>\n                            <Button label=\"Beispiel Funktion 1\"></Button>\n                            <Button label=\"Beispiel Funktion 2\"></Button>\n                            <Button label=\"Beispiel Funktion 3\"></Button>\n                        </Route>\n                    </Switch>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default EntranceManagement;\n","import React from 'react';\nimport { Box } from 'grommet';\n//import { LocalTicketMirror } from './LocalTicketMirror';\nimport { TicketReaderManager } from './TicketReaderManager';\n\nclass IndexedDBExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    async showTicketHandler(){\n        //console.log(document);\n        //let ticket = await this.localTicketMirror.obliterateTicket('ca6c9409-0ec9-42fb-9ca7-d42a74642d7e').catch(console.warn);\n        //console.log(ticket);\n        let trm = new TicketReaderManager();\n        trm.connectTicketReader();\n    }\n\n    render() {\n        return (\n            <Box className=\"IndexedDBExample\">\n                <TicketReaderManager></TicketReaderManager>\n            </Box>\n        );\n    }\n}\n\nexport default IndexedDBExample;\n","import React from 'react';\nimport { Box } from 'grommet';\nimport { Switch, Route } from \"react-router-dom\";\nimport IndexedDBExample from './IndexedDBExample';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"EventManagement\">\n                <Switch>\n                    <Route path=\"/\">\n                        <IndexedDBExample></IndexedDBExample>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\nimport Guest from './Guest/Guest';\nimport EntranceManagement from './EntranceManagement/EntranceManagement';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null\n    };\n    this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    this.obliterateTokens = this.obliterateTokens.bind(this);\n    //this.scanDoneHandler(\"0x9a2f730AFd66E990567AFc09665bE014EB76FAeB\");\n  }\n\n  errorDisplay(msg) {\n    alert('Sorry, there was an error. Please try again.');\n  }\n\n  scanDoneHandler(address) {\n    this.getAccountDetails(address).then((details) => {\n      if (!details.verified) {\n        return alert('Account nicht für TBN-Nutzung verifiziert');\n      }\n\n      this.getAccountBalance(address).then((balance) => {\n        const st = this.state;\n        st.account = {\n          address: address,\n          balance: balance,\n          verified: details.verified,\n          paidTickets: details.paidTickets,\n          poolTickets: details.poolTickets,\n          parkTickets: details.parkTickets\n        };\n        this.setState(st);\n      })\n    });\n  }\n\n  async getAccountBalance(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/balanceOf?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  async getAccountDetails(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/accountDetails?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  obliterateTokens(number) {\n    let prom = new Promise((resolve, reject) => {\n      setTimeout(() => { resolve('Übertragen'); this.scanDoneHandler(null) }, 3000); // DUMMY\n      // Call transferFrom address to obliterate-wallet\n    });\n\n    return prom;\n  }\n\n  render() {\n    return (\n      <Grommet theme={grommet}>\n        <Switch>\n          <Route exact path=\"/\">\n            <ul>\n              <li><Link to=\"/guest\">Gast</Link></li>\n              <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n              <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n            </ul>\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/guest\">\n            <Guest></Guest>\n          </Route>\n          <Route path=\"/entrance\">\n            <EntranceManagement></EntranceManagement>\n          </Route>\n          <Route path=\"/eventmgmt\">\n            <EventManagement></EventManagement>\n          </Route>\n        </Switch>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}