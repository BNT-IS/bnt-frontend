{"version":3,"sources":["config.js","../node_modules/typescript/lib sync","AppContexts/UserContext.js","AccountManagement/AccountManagement.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/BookingOverview.js","Ticketshop/Components/TicketBestellung.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","Entrance/Entrance.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/EntranceDashboard.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/Components/SystemInitalisierung.js","EventManagement/Components/ShopManagementConfMaxTickets.js","EventManagement/Components/ShopManagementSalesStatistics.js","EventManagement/Components/ShopManagementViewBookings.js","EventManagement/Components/ShopManagement.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKEND_BASE_URI","INFURA_URI","webpackEmptyContext","req","e","Error","code","keys","resolve","id","UserContext","React","createContext","AccountManagement","props","createUser","bind","login","loginPassHandler","mailHandler","otpBestätigen","otpInputHandler","pass1Handler","pass2Handler","setState1","setState6","state","dhbw_mail","login_pass","new_pass","otp","pass1","pass2","step","access_token","tokenHandler","verifyPasswort","event","this","setState","target","value","console","log","alert","pw","fetch","Config","method","mode","cache","headers","body","JSON","stringify","newPassword","catch","response","ok","json","rückgabe","message","handleFinalLogin","mose","email","password","status","userData","localStorage","setItem","context","reloadLocalStorage","Box","className","gap","Header","background","justify","pad","Text","Button","label","onClick","TextInput","placeholder","onChange","classname","direction","Component","contextType","UserMainMenu","to","SingleTicketViewer","identifier","window","location","hash","replace","ticket","forename","surename","ticketType","tempTicket","tickets","find","generateQRCode","data","sIG","user","secretIngredient","QRCode","toDataURL","then","url","qrcode","surname","width","height","src","alt","TicketListItem","assign","TicketOverview","loading","fetchTickets","token","forEach","Token","getItem","ticketElements","map","key","path","length","BuchungsItem","ticketsForBooking","push","buchung","booking","accPanelLabel","Date","createdAt","toLocaleDateString","paidAt","AccordionPanel","margin","BookingOverview","loadListHandler","loadTicketsHandler","buchungen","indexOfBooking","undefined","bookingId","findIndex","kopieTickets","concat","filteredTickets","filter","Accordion","onActive","activeItems","PersonInput","onInputHandler","onCheckBox","isWheelchairUser","stateCopy","name","onInput","CheckBox","checked","TicketBestellung","increment","property","guestcount","personsIndex","persons","personInput","personName","personsList","personInputFields","parkcount","decrement","pop","WindowAbsolventTicket","WindowGuestTicket","WindowParkTicket","ToOverview","ToOrder","ToPayment","createTickets","createBooking","graduate","bookingResult","type","userId","result","Math","random","element","generateIdentifier","Ticketshop","Consumer","userContext","Menu","items","logout","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","canvas","drawImage","imageData","getImageData","jsQR","inversionAttempts","contentType","match","groups","address","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","err","error","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","_messageHandler","requestMap","Map","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","onReady","parse","reqId","callbacks","get","dataChannel","channel","dt","getTime","c","r","floor","toString","Promise","reject","_createUUID","set","msg","params","send","signature","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","Entrance","connected","currentTicket","connectTicketReader","scanDoneHandler","capturedTicketHandler","obliterateTicketHandler","closeTicketViewHandler","ticketReader","connectTR","a","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","inflate","setMasterConfig","ticketData","readTicketRemote","currentSecretIngredient","obliterateTicketRemote","color","isValid","isUsed","size","LocalTicketMirror","_createDB","saveTicketMirror","getTicketList","indexedDB","waitingForIDBReadyQueue","_initDB","request","open","ev","db","errorCode","createObjectStore","keyPath","_getIDB","objectStore","transaction","add","getAll","onerror","onsuccess","valuesForHash","Web3","utils","sha3","requestUpdate","put","EntranceDashboard","handleDumpMirror","showTickets","localTicketMirror","ltm","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","Hauptansicht","getConfigured","wert","mapTest","Ansicht","initializeStep","textAlign","weight","List","primaryKey","secondaryKey","doneSteps","AddWallet","httpProvider","configureTheAdminWallet","http_provider","setWalletAddress","wallet_address","changeValueOfmapTest","changeStep","DeploySmartContract","walletBalance","neededBalance","deploySmartContract","getBalanceFromWallet","getPriceOfContract","require","providers","HttpProvider","eth","getBalance","balance","ConfigureAdminAccount","configureTheAdminAcc","ConfigureDatabase","host","port","configureTheDatabase","database","ConfigureMailserver","conncetion","standardMail","standardPrefix","configureTheMailserver","secure","default_from","default_subject_prefix","textInput","Select","options","option","AbsolventenListe","handleOnDrop","liste","listeEingelesen","initialeListe","handleOnError","file","inputElem","reason","handleOnRemoveFile","finished","dateiTyp","useListAndSendMail","emailList","onDrop","onError","delimiter","header","addRemoveButton","onRemoveFile","SystemInitalisierung","walletAddress","align","ShopManagementConfMaxTickets","Absolvententickets","Begleitertickets","Parktickets","changeValues","setValuesAndChangeStep","setMaxTicketMenge","changeInitializeStep","ShopManagementSalesStatistics","ShopManagementViewBookings","DataQuickViewMaxTickets","callShopManagamentConfTickets","DataTable","columns","primary","maxTicketmenge","DataQuickViewPayment","bezahloptionenArray","konfigurierteBezahloptionen","switcher","bezahlOption","konfiguriert","switchBooleanToString","DataQuickViewBookings","callShopManagementViewBookings","statusBookings","DataQuickViewSalesStatistics","callShopManagementSalesStatistics","statusSales","Class-Name","DataQuickViewManageSales","salesStatus","Beschreibung","Status","callShopManagementManageSales","ShopManagement","openBookings","Tickettype","Anzahl","getBookings","componentDidMount","bezahlt","unbezahlt","test","setBookings","Parkttickets","ClassName","wrap","setSalesStatus","EventManagement","rTRHandler","idx","indexOf","splice","getTicket","obliterateTicket","App","init","ls","clear","role","Provider","Object","Grommet","theme","grommet","exact","eigenschaft1","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ba49db8.chunk.js","sourcesContent":["module.exports = {\n    BACKEND_BASE_URI: \"http://localhost:3000\",\n    INFURA_URI: \"https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171\"\n};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 304;","import React from 'react';\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React from 'react';\nimport { Box, Button, TextInput, Text, Header } from 'grommet';\nimport Config from '../config';\nimport UserContext from '../AppContexts/UserContext';\n\nclass AccountManagement extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.createUser = this.createUser.bind(this);\n        this.login = this.login.bind(this);\n        this.loginPassHandler = this.loginPassHandler.bind(this);\n        this.mailHandler = this.mailHandler.bind(this);\n        this.otpBestätigen = this.otpBestätigen.bind(this);\n        this.otpInputHandler = this.otpInputHandler.bind(this);\n        this.pass1Handler = this.pass1Handler.bind(this);\n        this.pass2Handler = this.pass2Handler.bind(this);\n        this.setState1 = this.setState1.bind(this);\n        this.setState6 = this.setState6.bind(this);\n        this.state = { dhbw_mail: \"\", login_pass: \"\", new_pass: \"\", otp: \"\", pass1: \"\", pass2: \"\", step: 0, access_token: \"\" };\n        this.tokenHandler = this.tokenHandler.bind(this);\n        this.verifyPasswort = this.verifyPasswort.bind(this);\n    }\n\n    otpInputHandler(event) {\n        //Liest das eingegebene OTP aus dem Input-Feld aus und speichert es zwischen\n        this.setState({ otp: event.target.value });\n    }\n\n    tokenHandler(event) {\n        //Liest den eingegebenen Token aus dem Input-Feld aus und speichert diesen zwischen\n        this.setState({ access_token: event.target.value });\n    }\n\n    otpBestätigen() {\n        //Gibt das OTP aus und springt zum nächsten Schritt\n        console.log(this.state.otp);\n        this.setState({ step: 2 });\n    }\n\n    pass1Handler(event) {\n        this.setState({ pass1: event.target.value });\n    }\n\n    pass2Handler(event) {\n        this.setState({ pass2: event.target.value });\n    }\n\n    mailHandler(event) {\n        this.setState({ dhbw_mail: event.target.value });\n    }\n\n    loginPassHandler(event) {\n        this.setState({ login_pass: event.target.value });\n    }\n\n    verifyPasswort() {\n        if (this.state.pass1 === this.state.pass2) {\n            alert(\"Die angegebenen Passwörter stimmen überein!\");\n            this.createUser(this.state.pass2);\n        }\n        else {\n            alert(\"Die angegebenen Passwörter stimmen nicht überein!\");\n            this.setState({ pass1: \"\" });\n            this.setState({ pass2: \"\" });\n        }\n    }\n\n    displayError() {\n        //Wirft eine Standardfehlermeldung aus\n        alert(\"Ups, das hat leider nicht funktioniert. Bitte versuchen Sie es erneut.\")\n    }\n\n    async createUser(pw) {\n        //Legt anhand des eingegebenen OTP's einen User mit dem gewählten Passwort an\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/createUser/' + this.state.otp, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ newPassword: pw })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Für das eingegebene OTP konnte kein User angelegt werden.\");\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe.message) {\n                alert(rückgabe.message + \" Ihr angegebenes OTP scheint nicht zu exisitieren. Bitte überprüfen Sie die Eingabe.\");\n                this.setState({ step: 1 });\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                alert(\"Der Nutzer wurde erfolgreich angelegt.\");\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    async login() {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/login', {\n            method: 'POST',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email: this.state.dhbw_mail, password: this.state.login_pass })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 401:\n                    alert(\"Ihre Anmeldedaten scheinen nicht zu stimmen. Bitte überprüfen Sie ihre Angaben.\");\n                    break;\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                default:\n                    alert(rückgabe.message);\n            }\n            this.setState({ step: 6 });\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    handleFinalLogin(userData) {\n        localStorage.setItem('userContext', JSON.stringify(userData));\n        this.context.reloadLocalStorage();\n    }\n\n    setState1() {\n        //Springt zur Eingabe des OTP's im Erstellungsprozess\n        this.setState({ step: 1 });\n    }\n\n    setState6() {\n        //Springt zur Anmeldung mit einem vorhandenen Wallet\n        this.setState({ step: 6 });\n    }\n\n    render() {\n        //Stellt die jeweiligen Schritte für den Benutzer dar\n        return (\n\n            <Box className=\"AccountManagement\" gap=\"small\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Text>BNT Ticketsystem</Text>\n                </Header>\n                <Box pad=\"small\">\n                    {this.state.step === 0 &&\n                        //Startseite des Accountmanagements, Auswahl zwischen Neuanlage eines Áccounts und Anmeldung mit einem bestehenden Account\n                        <Box gap=\"small\">\n                            <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                            <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                            <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                            <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 1 &&\n                        //Eingabe des persönlichen OTP's\n                        <Box gap=\"small\">\n                            <Text>Bitte geben Sie das OneTime-Passwort ein, das wir an Ihre DHBW-Mailadresse versendet haben, und bestätigen Sie die Eingabe</Text>\n                            <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                            <Button label=\"Eingabe bestätigen\" onClick={this.otpBestätigen}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 2 &&\n                        <Box classname=\"Passwortvergabe\" direction=\"column\" gap=\"small\">\n                            <h1>Passwortvergabe</h1>\n                            <Text>Bitte vergeben Sie ein neues Passwort für Ihren Account</Text>\n                            <TextInput placeholder=\"Neues Passwort vergeben\" value={this.state.pass1} onChange={this.pass1Handler}></TextInput>\n                            <TextInput placeholder=\"Neues Passwort bestätigen\" value={this.state.pass2} onChange={this.pass2Handler}></TextInput>\n                            <Button label=\"Passwort bestätigen\" onClick={this.verifyPasswort}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 6 &&\n                        <Box gap=\"small\">\n                            <h1>Anmeldung mit einem vorhandenen Account</h1>\n                            <TextInput placeholder=\"DHBW-Mailadresse eingeben\" value={this.state.dhbw_mail} onChange={this.mailHandler}></TextInput>\n                            <TextInput placeholder=\"Account-Passwort eingeben\" value={this.state.login_pass} onChange={this.loginPassHandler}></TextInput>\n                            <Button label=\"Anmelden\" onClick={this.login}></Button>\n                        </Box>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\nexport default AccountManagement;\n\n\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/buy\">Tickets Buchen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/bookings\">Buchungen Anzeigen</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Text } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport QRCode from 'qrcode';\nimport Config from '../../config';\n\nimport UserContext from '../../AppContexts/UserContext';\n\nclass SingleTicketViewer extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.identifier = window.location.hash.replace(\"#/guest/tickets/\", \"\");\n        this.ticket = { forename: null, surename: null, ticketType: null };\n        let tempTicket = this.props.tickets.find(ticket => ticket.identifier === this.identifier);\n        if (tempTicket) {\n            this.ticket = tempTicket;\n        }\n    }\n\n    componentDidMount() {\n        this.generateQRCode(this.ticket);\n    }\n\n    async generateQRCode(ticket) {\n        // Generate code\n        let data = { id: ticket.identifier, sIG: this.context.user.secretIngredient }; // TODO Change to signature and so on...\n        QRCode.toDataURL(JSON.stringify(data)).then((url) => {\n            this.setState({ qrcode: url });\n        }).catch(console.log);\n    }\n\n    render() {\n        return (\n            <Box className=\"SingleTicket\">\n                <Box pad=\"small\">\n                    <p>{this.ticket.forename}</p>\n                    <p>{this.ticket.surname}</p>\n                    <p>{this.ticket.ticketType}</p>\n                </Box>\n                <Box pad=\"small\">\n                    <img width=\"300\" height=\"300\" src={this.state.qrcode} alt=\"Hier sollte ein QR-Code stehen\"></img>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nfunction TicketListItem(props) {\n    return (\n        <Box className=\"TicketListItem\" direction=\"row\" gap=\"small\" pad=\"small\">\n            <Text className=\"Name\">{props.ticket.forename} {props.ticket.surname}</Text>\n            <Text className=\"Type\">{props.ticket.ticketType}</Text>\n            <Button label=\"Anzeigen\" onClick={() => { window.location.assign('#/guest/tickets/' + props.ticket.identifier); }}></Button>\n        </Box>\n    );\n}\n\nclass TicketOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [], loading: false }\n    }\n\n    componentDidMount() {\n        this.fetchTickets();\n    }\n\n    async fetchTickets() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/tickets\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            this.setState({ loading: false });\n            alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n            return;\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return;\n\n        tickets.forEach((ticket) => {\n            switch (ticket.ticketType) {\n                case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                default: break;\n            }\n        });\n\n        this.setState({ tickets: tickets, loading: false });\n    }\n\n    setToken(Token) {\n        localStorage.setItem('Tokenwert', Token);\n    }\n    getToken() {\n        var value = localStorage.getItem('Tokenwert');\n        console.log(value);\n    }\n\n    render() {\n        let ticketElements = this.state.tickets.map((ticket) => <TicketListItem key={ticket.identifier} ticket={ticket}></TicketListItem>);\n\n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Switch>\n                    <Route path=\"/guest/tickets/:identifier\">\n                        <Link to=\"/guest/tickets/\">Alle Tickets anzeigen</Link>\n                        <SingleTicketViewer tickets={this.state.tickets}></SingleTicketViewer>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <Box>\n                            <Box>\n                                <h1 className=\"NumberOfTickets\">{this.state.tickets.length}</h1>\n                            </Box>\n                            <Box className=\"TicketList\">\n                                {this.state.loading && <p className=\"loader\"></p>}\n                                {ticketElements}\n                            </Box>\n                        </Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Text, Accordion, AccordionPanel } from 'grommet';\nimport Config from '../../config';\nimport UserContext from '../../AppContexts/UserContext';\n\nclass BuchungsItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        var ticketsForBooking = [];\n        this.props.tickets.forEach((ticket) => {\n            ticketsForBooking.push(\n                <Box key={ticket.identifier} pad=\"small\">\n                    <span>Ticket Identifier: {ticket.identifier}</span>\n                    <span>Nachname: {ticket.surname}</span>\n                    <span>Vorname: {ticket.forename}</span>\n                    <span>Ticket Typ: {ticket.ticketType}</span>\n                </Box>\n            )\n        });\n        var buchung = this.props.booking;\n        var accPanelLabel = \"Buchung \" + buchung.id + \", gebucht am \" + (new Date(buchung.createdAt).toLocaleDateString()) + \" - \" + (buchung.paidAt ? 'Bezahlt' : 'Zahlung ausstehend');\n        return (\n            <AccordionPanel label={accPanelLabel}>\n                {ticketsForBooking.length > 0 &&\n                    <Text margin=\"small\">Folgende Tickets wurden gebucht:</Text>\n                }\n                {ticketsForBooking.length > 0 && ticketsForBooking}\n                {ticketsForBooking.length === 0 && <Text margin=\"small\">Keine Daten vorhanden.</Text>}\n            </AccordionPanel >\n        )\n    }\n\n}\n\nclass BookingOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this);\n        this.loadTicketsHandler = this.loadTicketsHandler.bind(this);\n        this.state = { buchungen: [], tickets: [] };\n    }\n\n    componentDidMount() {\n        this.loadListHandler();\n    }\n\n    async loadListHandler() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/bookings\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert('Buchungen konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n        if (!data) return;\n\n        this.setState({ buchungen: data, loading: false })\n    }\n\n    async loadTicketsHandler(indexOfBooking) {\n        if (indexOfBooking === undefined) return;\n\n        let bookingId = this.state.buchungen[indexOfBooking].id;\n        let ticketsLoaded = this.state.tickets.findIndex((ticket) => {\n            return ticket.bookingId === bookingId\n        })\n\n        if (ticketsLoaded !== -1) return;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings/\" + bookingId + \"/ticketsBooked\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            alert('Gebuchte Tickets konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n    }\n\n    render() {\n        var buchungen = [];\n        this.state.buchungen.forEach((buchung) => {\n            var filteredTickets = this.state.tickets.filter((ticket) => {\n                return ticket.bookingId === buchung.id\n            })\n            buchungen.push(<BuchungsItem key={buchung.id} booking={buchung} tickets={filteredTickets}></BuchungsItem>)\n        });\n\n        return (\n            <Box className=\"BookingOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    {this.state.loading && <p className=\"loader\"></p>}\n                    {buchungen.length > 0 &&\n                        <Accordion onActive={(activeItems) => { this.loadTicketsHandler(activeItems[0]) }}>\n                            {buchungen}\n                        </Accordion>\n                    }\n                    {buchungen.length === 0 &&\n                        <Text>Keine Buchungen vorhanden</Text>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default BookingOverview;\n","import React from 'react';\nimport { Box, Button, Text, TextInput, CheckBox } from 'grommet';\nimport Config from '../../config';\nimport { ThemeProvider } from 'styled-components';\nimport { setConstantValue } from 'typescript';\n\nclass PersonInput extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInputHandler = this.onInputHandler.bind(this);\n        this.onCheckBox = this.onCheckBox.bind(this)\n        this.state = {\n            forename: \"\",\n            surname: \"\",\n            isWheelchairUser: false,\n        }\n    }\n\n    onInputHandler(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = event.target.value;\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    onCheckBox(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = !stateCopy[event.target.name];\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    render() {\n        return (\n            <Box>\n                <TextInput name=\"forename\" placeholder=\"Vorname des Gastes\" value={this.state.forename} onChange={this.onInputHandler}></TextInput>\n                <TextInput name=\"surname\" placeholder=\"Nachname des Gastes\" value={this.state.surname} onChange={this.onInputHandler}></TextInput>\n                <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n            </Box>\n        );\n    }\n\n}\n\nclass TicketBestellung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.WindowAbsolventTicket = this.WindowAbsolventTicket.bind(this);\n        this.WindowGuestTicket = this.WindowGuestTicket.bind(this);\n        this.WindowParkTicket = this.WindowParkTicket.bind(this);\n        this.ToOverview = this.ToOverview.bind(this);\n        this.ToOrder = this.ToOrder.bind(this);\n        this.ToPayment = this.ToPayment.bind(this);\n        this.createTickets = this.createTickets.bind(this);\n        this.createBooking = this.createBooking.bind(this);\n        this.onInputHandler = this.onInputHandler.bind(this);\n\n\n\n        this.state = {\n            guestcount: 0,\n            parkcount: 0,\n            step: 0,\n            persons: [],\n            personInputFields: [],\n            graduate: {\n                forename: \"\",\n                surname: \"\",\n                isWheelchairUser: false\n            },\n            bookingResult: null\n        };\n\n\n    }\n\n    // @Nils Für das generieren des Identifiers für das Ticket einfach erstmal eine Zufallszahl nehmen!\n    // Aber bitte eine extra Funktion für generieren des Ticket-Identifiers anlegen, dann können wir später gemeinsam den \"echten/sicheren\" Identifier-Generator programmieren\n\n    onInputHandler(event, type) {\n        if (type === \"forename\") {\n            this.setState({\n                graduate: {\n                    forename: event.target.value,\n                    surname: this.state.graduate.surname\n                }\n            })\n        } else {\n            this.setState({\n                graduate: {\n                    surname: event.target.value,\n                    forename: this.state.graduate.forename\n                }\n            })\n        }\n\n\n    }\n    //Wechsel der Ansichtenfenster\n    WindowAbsolventTicket() {\n        this.setState({ step: 0 })\n    }\n    WindowGuestTicket() {\n        this.setState({ step: 1 })\n    }\n    WindowParkTicket() {\n        this.setState({ step: 2 })\n    }\n    ToOverview() {\n        this.setState({ step: 3 })\n    }\n    ToPayment() {\n        this.setState({ step: 4 })\n    }\n    ToOrder() {\n        this.setState({ step: 5 })\n    }\n\n\n    //Funktion für die Counter und der Namen der Gäste\n    increment = (property) => {\n        if (property === \"guest\" && this.state.guestcount < 2) {\n\n            let personsIndex = this.state.persons.length;\n            let personInput = <PersonInput key={personsIndex} onInput={(personName) => { let personsList = this.state.persons; personsList[personsIndex] = personName; this.setState({ persons: personsList }) }}></PersonInput>\n            let personsList = this.state.persons;\n            personsList[personsIndex] = {};\n            this.state.personInputFields.push(personInput);\n            this.setState({ persons: personsList, personInputFields: this.state.personInputFields, guestcount: this.state.guestcount + 1 });\n\n        }\n        else if (property === \"park\" && this.state.parkcount < 3) {\n            this.setState({ parkcount: this.state.parkcount + 1 });\n        }\n    }\n    decrement = (property) => {\n        if (property === \"guest\" && this.state.guestcount > 0) {\n\n            this.state.personInputFields.pop();\n            this.state.persons.pop();\n\n            this.setState({ guestcount: this.state.guestcount - 1, personInputFields: this.state.personInputFields, persons: this.state.persons });\n        }\n        else if (property === \"park\" && this.state.parkcount > 0) {\n            this.setState({ parkcount: this.state.parkcount - 1 });\n        }\n    }\n\n\n    async createBooking() {\n        let userId = \"1\";\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({ userId: userId })\n        }).catch(console.log);\n        // Error Handling für Benutzer\n        if (!response) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n\n        var result = await response.json().catch(console.log);\n        console.log(result)\n        this.setState({ bookingResult: result });\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n        console.log(result);\n\n        await this.createTickets();\n    }\n\n    generateIdentifier() {\n        return Math.random() * 100000;\n    }\n\n    async createTickets() {\n        console.log(this.state)\n        let bookingResult = this.state.bookingResult.id;\n        for (let element of this.state.persons) {\n            console.log(element);\n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer 16888740f668f0c4b660e0fd259fc0f0b7b784493a114ca44ad9528192384ca3fc7e85c71bb32c25c52637677b850b95739d9f7128014fe42a904efb027f46f91c342428c74fb734487898bbf64d796b565fa54b8099015388212e45e72b36b859e729aaf343d885fd976d10be72c5e4a172d0223b34a361ed796944c912cfdef23a2d5e4cf2fbf3cf0febe0843fa7e9b2d18d26d299745451f2930f24766077f2b3520f920bde85fe2d7f012c06bd47384aa402789e9c8c640da8aa3c43b442f649710e3a589b5c72ebf3e621987740f3af49fae6d2a484f50f40466091ae6c249ccbb116c209ccadffe899a819eabc82b54f69e7da3599f74f371015709150',\n                },\n                body: JSON.stringify({\n                    identifier: this.generateIdentifier(),\n                    bookingId: bookingResult,\n                    ticketType: 1,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: element.isWheelchairUser,\n                })\n            }).catch(console.log);\n            // Error Handling für Benutzer\n            if (!response) {\n                this.setState({ step: 100 });\n                return;\n            }\n            var result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n            console.log(result)\n        }\n        //Ticket für Absolvent in DB schreiben\n        response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({\n                identifier: this.generateIdentifier(),\n                bookingId: bookingResult,\n                ticketType: 0,\n                forename: this.state.graduate.forename,\n                surname: this.state.graduate.surname,\n                isWheelchairUser: false,\n            })\n        }).catch(console.log);\n        // Error Handling für Benutzer\n        if (!response) {\n            this.setState({ step: 100 });\n            return;\n         }\n\n        result = await response.json().catch(console.log);\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n        console.log(result)\n        this.ToOrder();\n\n        //Parkticket in DB schreiben\n        for (let element of this.state.parkcount) {\n            console.log(element);\n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n                },\n                body: JSON.stringify({\n                    identifier: this.generateIdentifier(),\n                    bookingId: bookingResult,\n                    ticketType: 2,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: element.isWheelchairUser,\n                })\n            }).catch(console.log);\n            // Error Handling für Benutzer\n            if (!response) {\n                this.setState({ step: 100 });\n                return;\n            }\n            var result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n            console.log(result)\n        }\n\n    }\n\n\n\n\n    render() {\n        console.log(this.state.persons)\n\n        return (\n            <Box className=\"TicketBestellung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n\n                {this.state.step === 0 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte tragen Sie ihren Namen in die Felder ein und bestätigen Sie die Eingabe mit dem Button!</Text>\n                        <TextInput name=\"forename\" placeholder=\"Vorname des Absolventen\" value={this.state.graduate.forename} onChange={(event) => this.onInputHandler(event, \"forename\")}></TextInput>\n                        <TextInput name=\"surname\" placeholder=\"Nachname des Absolventen\" value={this.state.graduate.surname} onChange={(event) => this.onInputHandler(event, \"surname\")}></TextInput>\n                        <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" value={this.state.graduate.isWheelchairUser} onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n\n                        <Button label=\" Ein Absolventen Ticket kaufen\" onClick={this.WindowGuestTicket} gap=\"small\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 1 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Begleitpersonen Sie mitnehmen wollen.</Text>\n                        <Button onClick={() => this.increment(\"guest\")} className=\"guestcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"guest\")} className=\"guestcount\" label=\"-\"></Button>\n                        <h2>{this.state.guestcount}</h2>\n                        {this.state.personInputFields}\n                        <Button onClick={this.WindowAbsolventTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.WindowParkTicket} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 2 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Parktickets Sie benötigen.</Text>\n                        <Button onClick={() => this.increment(\"park\")} className=\"parkcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"park\")} className=\"parkcount\" label=\"-\"></Button>\n                        <h2>Anzahl der Parktickets: {this.state.parkcount}</h2>\n                        <Button onClick={this.WindowGuestTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.ToOverview} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 3 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button onClick={this.WindowParkTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.ToPayment} label=\"Zahlungspflichtig bestellen\"></Button>\n                    </Box>\n                }\n                {this.state.step === 4 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets Zahlungspflichtig bestellt.  <br />\n                    Bitte überweisen Sie folgenden Betrag auf das Konto: XXXXYYYYZZZZ.<br />\n                    Geben Sie ihren Namen als Verwendungszweck an.<br />\n                    Nach Rechnungseingang erhalten Sie Ihre Tickets an ihr Wallet gesendet.<br />\n                        </Text>\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button label=\"Buchung erstellen\" onClick={this.createBooking}></Button>\n                    </Box>\n                }\n                {this.state.step === 5 &&\n                    <Box gap=\"small\">\n                        Erfolgreich bestellt!\n                    </Box>\n                }\n\n                {this.state.step === 100 &&\n                    <Box gap=\"small\">\n                        <Text>Ein Fehler im Bestellvorgang ist aufgetreten!</Text>\n                    </Box>\n                }\n\n\n            </Box>\n        );\n    }\n}\n\nexport default TicketBestellung;\n","import React from 'react';\n\nimport UserContext from '../AppContexts/UserContext';\n\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport BookingOverview from './Components/BookingOverview';\nimport TicketBestellung from './Components/TicketBestellung';\n\nclass Ticketshop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/buy\">\n                        <TicketBestellung></TicketBestellung>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/bookings\">\n                        <BookingOverview></BookingOverview>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterstützt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n        this._messageHandler = this._messageHandler.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        try{\n            let response = JSON.parse(event.data);\n            if(response.reqId){\n                let callbacks = this.requestMap.get(response.reqId);\n                if(response.error){\n                    callbacks['reject'](response.error);\n                } else {\n                    callbacks['resolve'](response.result);\n                }\n            }\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button, Text } from 'grommet';\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass Entrance extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null, currentTicket: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        this.capturedTicketHandler = this.capturedTicketHandler.bind(this);\n        this.obliterateTicketHandler = this.obliterateTicketHandler.bind(this);\n        this.closeTicketViewHandler = this.closeTicketViewHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    /**\n     * @typedef TicketCodeData\n     * @property {String} id - Hex string of the identifier\n     * @property {String} sIG - Secret ingredient of the user to calculate the hash \n     */\n\n    /**\n     * Handler for the scanner when the ticket was scanned\n     * @param {TicketCodeData} data - The data from the QR-Code of the ticket\n     */\n    async capturedTicketHandler(data) {\n        try {\n            let ticketData = JSON.parse(data);\n            if (!ticketData.id || !ticketData.sIG) throw Error(\"Fehlende Angaben im Ticket-QR-Code. Möglicherweise liegt eine Fälschung vor.\");\n            let ticket = await this.ticketReader.readTicketRemote(ticketData.id);\n            this.setState({ currentTicket: ticket, currentSecretIngredient: ticketData.sIG });\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    /**\n     * Obliterates a ticket in the IDB\n     */\n    async obliterateTicketHandler() {\n        try {\n            await this.ticketReader.obliterateTicketRemote(this.state.currentTicket.identifier, this.state.currentSecretIngredient);\n            alert('Erfolgreich entwertet!');\n            this.closeTicketViewHandler();\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    closeTicketViewHandler() {\n        this.setState({ currentTicket: null, currentSecretIngredient: null });\n    }\n\n    render() {\n        return (\n            <Box className=\"Entrance\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Gerät als Ticket Leser verwenden möchten, müssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Gerät mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Gerät scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Box>\n                        <p>Sie sind verbunden</p>\n                        {this.state.currentTicket === null && <QRScanner onDone={this.capturedTicketHandler} label=\"Scanvorgang starten\"></QRScanner>}\n                        {this.state.currentTicket &&\n                            <Box background={{ color: (this.state.currentTicket.isValid && !this.state.currentTicket.isUsed) ? 'light-green' : 'light-red' }}>\n                                <h1>{this.state.currentTicket.surname}, {this.state.currentTicket.forename}</h1>\n                                <Text size=\"2em\" pad=\"small\">{this.state.currentTicket.ticketType}</Text>\n                                <Text size=\"2em\" pad=\"small\">{(this.state.currentTicket.isValid && !this.state.currentTicket.isUsed) ? 'OK' : 'Ungültiges Ticket!'}</Text>\n                                <Box gap=\"small\">\n                                    <Button label=\"Entwerte Ticket\" onClick={this.obliterateTicketHandler}></Button>\n                                    <Button label=\"Schließen\" onClick={this.closeTicketViewHandler}></Button>\n                                </Box>\n                            </Box>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte warten Sie einen Moment...</p>\n                        <p className=\"loader\"></p>\n                    </Box>\n                }\n                {this.state.connected === 'failed' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte aktivieren Sie den Reader erneut.</p>\n                        <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                    </Box>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default Entrance;\n","import Web3 from 'web3';\n\n/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.saveTicketMirror = this.saveTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(\"TicketMirror\", 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async saveTicketMirror(tickets) {\n        try {\n            var db = await this._getIDB();\n\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n\n            tickets.forEach((ticket) => {\n                switch (ticket.ticketType) {\n                    case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                    case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                    case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                    default: break;\n                }\n                objectStore.add(ticket);\n            });\n        }catch(error){\n            console.error(error);\n            alert('Es ist ein Fehler bei der Indexed DB aufgetreten');\n        }\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The secretIngredient of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} secretIngredient - Specific secretIngredient of the user that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, secretIngredient) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Das Ticket existiert nicht.\");\n\n                // Check secretIngredient and identifier hash\n                var valuesForHash = secretIngredient + ticket.forename + ticket.surname + ticket.ticketType;\n                var checkSum = Web3.utils.sha3(valuesForHash);\n\n                if (checkSum !== identifier) return reject(\"Die Identität des Tickets konnte nicht verifiziert werden.\");\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Das Ticket ist nicht gültig.\");\n                if (ticket.isUsed) return reject(\"Das Ticket wurde breits entwertet.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = resolve;\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button } from 'grommet';\n\n// eslint-disable-next-line\nimport LocalTicketMirror from '../Classes/LocalTicketMirror';\n\nimport UserContext from '../../AppContexts/UserContext';\nimport Config from '../../config';\n\n\nclass EntranceDashboard extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n        this.showTickets();\n    }\n\n    async handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/tickets/\", {\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            this.setState({ loading: false });\n            return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n\n        ltm.saveTicketMirror(tickets);\n\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets });\n    }\n\n    render() {\n        let tickets = this.state.tickets.map((ticket) => {\n            return <li key={ticket.identifier}>{ticket.isValid && 'Valid'}{!ticket.isValid && 'Not Valid'} -  {ticket.isUsed && 'Used'}{!ticket.isUsed && 'Not Used'} - {ticket.ticketType}</li>\n        });\n\n        return (\n            <Box className=\"EntranceDashboard\" pad=\"medium\">\n                <Button label=\"Ticketdaten für den Offline-Einlass herunterladen\" onClick={this.handleDumpMirror}></Button>\n                <ul>\n                    {tickets}\n                </ul>\n            </Box>\n        );\n    }\n}\n\nexport default EntranceDashboard;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and the secret ingredient and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} secretIngredient - Secret ingredient used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, secretIngredient, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any,\n               error: String\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: ticket,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: success,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    disconnectRemoteTicketReader(remoteTicketReader) {\n\n    }\n\n    disconnectAll() {\n\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzufügen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzufügen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielgerät scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielgeräts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\n//import './TicketOverview.css';\nimport { Box, Button, Select, Text, List, TextInput } from 'grommet';\nimport Config from '../../config';\nimport { CSVReader } from 'react-papaparse';\nimport Web3 from 'web3';\n\nclass Hauptansicht extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.getConfigured = this.getConfigured.bind(this);\n    }\n\n    getConfigured(key) {\n        var wert = this.props.mapTest.get(key);\n        if (!wert)\n            return <Text key={key}>Nicht erledigt</Text>;\n        if (wert)\n            return <Text key={key}>Erledigt</Text>;\n    }\n\n    render() {\n        var Ansicht = [];\n        if (this.props.initializeStep === 0) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"start\">\n                <Text textAlign=\"center\" weight=\"bold\" size=\"xxlarge\">\n                    Guten Tag und Herzlich Wilkommen zum Ticketsystem.\n                </Text>\n                <Box pad=\"medium\"></Box>\n                <Text>\n                    Die nächsten Schritte dienen zur Initalisierung des Systems.\n                    Sie werden durch die notwendigen Vorbereitungsschritte geführt.\n                </Text>\n                <Text textAlign=\"center\">\n                    Für die Initalisierung sind folgende Schritte notwendig\n                </Text>\n            </Box>\n        }\n        if (this.props.initializeStep === 6) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"end\">\n                <Text textAlign=\"center\">\n                    Herzlich Glückwunsch Sie haben das Ticketsystem erfolgreich konfiguriert!\n                    Mit Zurück gelangen Sie wieder zur ersten Ansicht und können erneut durch die Konfiguration navigieren.\n                </Text>\n            </Box>\n        }\n\n        Ansicht[1] =\n            <Box>\n                <List\n                    primaryKey=\"initializeStep\"\n                    secondaryKey=\"doneSteps\"\n                    data={[\n                        { initializeStep: <Text size=\"large\" weight=\"bold\" key=\"header\">Vorbereitsungsschritt</Text>, doneSteps: <Text size=\"large\" weight=\"bold\" key=\"headerZustand\">Zustand</Text> },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusDB\"> Initalisieren der Datenbank</Text>, doneSteps: this.getConfigured(\"DB\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminAccount\">Hinzufügen eines Administratorbenutzers</Text>, doneSteps: this.getConfigured(\"AA\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusMS\">Initialisieren des Mailservers</Text>, doneSteps: this.getConfigured(\"MS\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminWallet\">Einrichten des Master-Wallets</Text>, doneSteps: this.getConfigured(\"AW\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusListe\">Einlesen der Absolventen-Liste und Erstellung der One Time Passwörter</Text>, doneSteps: this.getConfigured(\"AL\") },\n                    ]}\n                />\n            </Box>\n        return Ansicht;\n    }\n}\n\nclass AddWallet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { httpProvider: \"\" };\n        this.configureTheAdminWallet = this.configureTheAdminWallet.bind(this);\n    }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminWallet() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/generateWallet\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                http_provider: this.state.httpProvider,\n            })\n\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            var address = response.json().catch(console.log)\n            this.props.setWalletAddress(address.wallet_address);\n            this.props.changeValueOfmapTest(\"AW\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzufügen des Wallets für den Master-User:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <TextInput\n                    placeholder=\"HTTP-Provider DNS:Port\"\n                    value={this.state.httpProvider}\n                    onChange={(event) => { this.setState({ httpProvider: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminWallet} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DeploySmartContract extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { walletBalance: \"\", neededBalance: \"\" };\n        this.deploySmartContract = this.deploySmartContract.bind(this);\n        this.getBalanceFromWallet = this.getBalanceFromWallet.bind(this);\n        this.getPriceOfContract = this.getPriceOfContract.bind(this);\n    }\n\n    async getPriceOfContract() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n                    alert(rückgabe.message)\n        }\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        console.log(data)\n\n    }\n\n    async getBalanceFromWallet() {\n        var Web3 = require('web3');\n        var web3 = new Web3(new Web3.providers.HttpProvider(this.props.httpProvider));\n        web3.eth.getBalance(\"0x6c1afA1A56d92EeFd99926636b1a1c284B0CE298\", (error, response) => {\n            if (error) {\n                console.log(\"Fehler beim Abruf der Balance des Wallets\");\n            }\n            if (!response) {\n                console.log(\"Fehler beim Abruf der Balance des Wallets\");\n                alert(response.message);\n            }\n            console.log(response)\n\n            if (response) {\n                var balance = response;\n                console.log(balance)\n                this.setState({ walletBalance: balance });\n            }\n        });\n    }\n\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async deploySmartContract() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/deployContract\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"DC\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Smart Contract auf der Blockchain veröffentlichen:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <TextInput\n                    placeholder=\"HTTP-Provider DNS:Port\"\n                    value={this.state.httpProvider}\n                    onChange={(event) => { this.setState({ httpProvider: event.target.value }) }}\n                />\n                <Button label=\"TEST\" onClick={this.getPriceOfContract}></Button>\n            </Box>\n            <Button onClick={this.configureTheAdminWallet} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\n\n\nclass ConfigureAdminAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { email: \"\", password: \"\" };\n        this.configureTheAdminAcc = this.configureTheAdminAcc.bind(this);\n    }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminAcc() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/adminUser\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: this.state.email,\n                password: this.state.password,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"AA\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzufügen des Administratorbenutzers:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">E-Mail-Adresse</Text>\n                <TextInput\n                    placeholder=\"E-Mail\"\n                    value={this.state.email}\n                    onChange={(event) => { this.setState({ email: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Passwort\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminAcc} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureDatabase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", user: \"\", password: \"\", db: \"\", port: \"\" };\n        this.configureTheDatabase = this.configureTheDatabase.bind(this);\n    }\n\n    //TODO: Problem bei body \n    async configureTheDatabase() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/database\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                host: this.state.host,\n                user: this.state.user,\n                password: this.state.password,\n                database: this.state.db,\n                port: this.state.port,\n            })\n        }).catch(console.log)\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"DB\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Konfigurieren der Datenbank:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Datenbank-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Datenbank-Host eingeben\"\n                    value={this.state.host}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Datenbank:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Datenbank eingeben\"\n                    value={this.state.db}\n                    onChange={(event) => { this.setState({ db: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Button onClick={this.configureTheDatabase} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureMailserver extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", port: null, conncetion: true, user: \"\", password: \"\", standardMail: \"\", standardPrefix: \"\" };\n        this.configureTheMailserver = this.configureTheMailserver.bind(this);\n    }\n    async configureTheMailserver() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/mailserver\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify({\n                host: this.state.host,\n                port: this.state.port,\n                secure: this.state.conncetion,\n                user: this.state.user,\n                password: this.state.password,\n                default_from: this.state.standardMail,\n                default_subject_prefix: this.state.standardPrefix,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"MS\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Text size=\"large\" weight=\"bold\">Konfigurieren des Mailservers:</Text>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Mailserver-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Mailserver-Host eingeben\"\n                    value={this.state.textInput}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange\n                    ={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Sichere Verbindung:</Text>\n                <Select\n                    options={['true', 'false']}\n                    value={this.state.conncetion}\n                    onChange={({ value, option }) => { this.setState({ conncetion: option }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort: </Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Mail:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Standard Mail eingeben\"\n                    value={this.state.standardMail}\n                    onChange={(event) => { this.setState({ standardMail: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Subject Prefix:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Standard Prefix eingeben\"\n                    value={this.state.standardPrefix}\n                    onChange={(event) => { this.setState({ standardPrefix: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Button onClick={this.configureTheMailserver} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n        //TODO STANDARD (????)\n    }\n}\n\nclass AbsolventenListe extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { listeEingelesen: false, finished: false, initialeListe: [], dateiTyp: \"CSV\", path: \"\" };\n        this.useListAndSendMail = this.useListAndSendMail.bind(this);\n    }\n\n    //TODO FUNKTION ERSTELLEN\n    async useListAndSendMail() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.setState({ finished: true })\n        this.props.changeValueOfmapTest(\"AL\");\n        this.props.changeStep();\n    }\n\n    //Eingelesene Daten entgegennehmen und in den State schreiben\n    handleOnDrop = (data) => {\n        var liste = [];\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n\n        data.forEach((data) => {\n            console.log(data.data)\n            liste.push(data.data)\n        });\n\n        this.setState({ listeEingelesen: true, initialeListe: liste })\n    }\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    handleOnRemoveFile = (data) => {\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n    }\n\n\n    render() {\n        var Ansicht = [];\n        var emailList = this.state.initialeListe;\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Einlesen der Absolventen Liste</Text>\n            </Box>\n\n            {!this.state.listeEingelesen && !this.state.finished &&\n                <Box className=\"Eingaben\">\n                    <Box pad=\"medium\">\n                        <Text>Bitte eine Liste in der folgenden Darstellung einlesen:</Text>\n                        <span><Text weight=\"bold\">Header: </Text><Text>E-Mail; Name</Text></span>\n                        <span><Text weight=\"bold\">Datensatz 1: </Text><Text>Beispiel@web.de; Mustermann, Max</Text></span>\n                    </Box>\n                    <CSVReader\n                        onDrop={this.handleOnDrop}\n                        onError={this.handleOnError}\n                        config={{\n                            delimiter: \";\",\n                            header: true\n                        }}\n                        addRemoveButton\n                        onRemoveFile={this.handleOnRemoveFile}\n                    >\n                        <span>Drop CSV file here or click to upload.</span>\n                    </CSVReader>\n                </Box>\n            }\n\n            {this.state.listeEingelesen && !this.state.finished &&\n                <List className=\"langeListe\" pad=\"medium\"\n                    primaryKey=\"E-Mail\"\n                    secondaryKey=\"Name\"\n                    data={emailList}\n                />\n            }\n            <Box pad=\"medium\">\n                <Button onClick={this.useListAndSendMail} label=\"Abschließen\"></Button>\n            </Box>\n\n            {this.state.listeEingelesen && this.state.finished &&\n                <Text>Bitte den Nächsten Schritt</Text>\n            }\n\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass SystemInitalisierung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeStep = this.changeStep.bind(this);\n        this.changeValueOfmapTest = this.changeValueOfmapTest.bind(this);\n        this.setWalletAddress = this.setWalletAddress.bind(this);\n        this.state = {\n            initializeStep: 0,\n            mapTest: new Map([[\"AW\", false], [\"DB\", false], [\"MS\", false], [\"AL\", false], [\"AA\", false], [\"DC\", false]]),\n            walletAddress: \"\",\n            httpProvider: \"\",\n        };\n    }\n    // TODO: Step fürs Aufsetzen von Master-User mit Wallet\n    // TODO: Step fürs Initialisieren der DB\n    // TODO: Step fürs Aufladen des Backend-Wallets mit Ether...\n\n    // Function to Change the Value of the state of Configuration\n    changeValueOfmapTest(key) {\n        this.setState(this.state.mapTest.set(key, true));\n    }\n\n    setWalletAddress(address) {\n        this.setState({ walletAddress: address });\n    }\n\n    setHttpProvider(httpProvider) {\n        this.setState({ httpProvider: httpProvider });\n    }\n\n    changeStep() {\n        var value;\n        if (this.state.initializeStep > 5) {\n            value = 0;\n        }\n        if (this.state.initializeStep < 6) {\n            value = 1 + this.state.initializeStep;\n        }\n        this.setState({ initializeStep: value });\n\n    }\n\n    render() {\n        return (\n            <Box className=\"SystemInitalisierung\" direction=\"column\" gap=\"medium\" pad=\"medium\" align=\"center\">\n                {this.state.initializeStep === 0 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}></Hauptansicht>}\n\n                {this.state.initializeStep === 1 && <ConfigureDatabase changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureDatabase>}\n\n                {this.state.initializeStep === 2 && <ConfigureAdminAccount changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureAdminAccount>}\n\n                {this.state.initializeStep === 3 && <ConfigureMailserver changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureMailserver>}\n\n                {this.state.initializeStep === 4 && <AddWallet setWalletAddress={this.setWalletAddress.bind(this)} changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></AddWallet>}\n\n                {this.state.initializeStep === 4 && <DeploySmartContract httpProvider={this.state.httpProvider} walletAddress={this.state.walletAddress} changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></DeploySmartContract>}\n\n                {this.state.initializeStep === 5 && <AbsolventenListe changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></AbsolventenListe>}\n\n                {this.state.initializeStep === 6 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}\n                    changeStep={this.changeStep.bind(this)}></Hauptansicht>}\n\n                {this.state.initializeStep === 0 && <Button onClick={this.changeStep} label=\"Konfiguration Beginnen\"></Button>}\n                {this.state.initializeStep != 0 && this.state.initializeStep < 6 && <Button onClick={this.changeStep} label=\"Schritt Überspringen\"></Button>}\n                {this.state.initializeStep === 6 && <Box pad=\"medium\"> <Button label=\"Zurück\" onClick={this.changeStep}></Button></Box>}\n            </Box>\n        );\n    }\n}\n\nexport default SystemInitalisierung;\n","import React from 'react';\nimport { Box, Button, Select, Text, List, TextInput, DataTable, Meter } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\n\n\nclass ShopManagementConfMaxTickets extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            Absolvententickets: \"\",\n            Begleitertickets: \"\",\n            Parktickets: \"\",            \n        }\n        this.changeValues = this.changeValues.bind(this);\n        this.setValuesAndChangeStep = this.setValuesAndChangeStep.bind(this)\n    }\n\n    async changeValues() {\n        /* TODO: NEU EINFÜGEN UND ANPASSEN \n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/setup/\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n        */\n        //var data = await response.json().catch(console.log)\n\n        //if (!data) return\n        /*\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n        */\n    }\n\n\n    setValuesAndChangeStep (){\n        this.props.setMaxTicketMenge(this.state.Absolvententickets, this.state.Begleitertickets, this.state.Parktickets)\n        this.props.changeInitializeStep(0)\n    }\n\n    render() {\n        var Ansicht = [];\n        return (\n            Ansicht[0]=\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xxlarge\">Ticketkonfiguration</Text>\n                <Box pad=\"medium\"></Box>\n                Hier können die maximalen Tickets, die ein Benutzer (Absolvent) erwerben kann, konfiguriert werden. \n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Absolvententickets:</Text>\n                    <TextInput\n                        placeholder=\"Absolvententickets\"\n                        value={this.state.Absolvententickets}\n                        onChange={(event) => { this.setState({ Absolvententickets: event.target.value }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Begleitertickets:</Text>\n                    <TextInput\n                        placeholder=\"Begleitertickets\"\n                        value={this.state.Begleitertickets}\n                        onChange={(event) => { this.setState({ Begleitertickets: event.target.value }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Parktickets:</Text>\n                    <TextInput\n                        placeholder=\"Parktickets\"\n                        value={this.state.Parktickets}\n                        onChange={(event) => { this.setState({ Parktickets: event.target.value }) }}\n                    />\n                </Box>\n                <Button label=\"Bestätigen\" onClick={this.setValuesAndChangeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementConfMaxTickets;\n","import React from 'react';\nimport { Box, Button, Select, Text, List, TextInput, DataTable, Meter } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\n\n\nclass ShopManagementSalesStatistics extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.changeStep = this.changeStep.bind(this);\n    }\n\n    changeStep (){\n        this.props.changeInitializeStep(0)\n\n    }\n    \n\n    render() {\n        return (\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                \n                <Button label=\"Bestätigen\" onClick={this.changeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementSalesStatistics;\n","import React from 'react';\nimport { Box, Button, Select, Text, List, TextInput, DataTable, Meter } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementViewBookings extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        this.changeStep = this.changeStep.bind(this);\n    }\n    changeStep(){\n        this.props.changeInitializeStep(0);\n    }\n\n    render(){\n        var ansicht = [];\n        return(\n            ansicht[0] =\n            <box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xlarge\">Bestellungsübersicht</Text>\n                <Box pad=\"medium\"></Box>\n                <Text>Hier können die Bestellungen eingesehen und freigegeben werden.</Text>\n                <Box pad=\"medium\"></Box>\n                <Button label=\"Zurück zur Übersicht\" onClick={this.changeStep}></Button>\n            </box>\n        );\n    }\n\n}\nexport default ShopManagementViewBookings;","import React from 'react';\nimport { Box, Button, Text, DataTable } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport ShopManagementConfMaxTickets from './ShopManagementConfMaxTickets';\nimport ShopManagementSalesStatistics from './ShopManagementSalesStatistics'\nimport ShopManagementViewBookings from './ShopManagementViewBookings'\n\nimport UserContext from '../../AppContexts/UserContext'\n\nclass DataQuickViewMaxTickets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagamentConfTickets = this.callShopManagamentConfTickets.bind(this);\n\n    }\n    callShopManagamentConfTickets() {\n        var value = 1;\n        this.props.changeInitializeStep(value);\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"purchaseableTicketsPerPerson\" className=\"quickViewOuterBox\" >\n            <Text>Anzahl der Tickets die ein Absolvent erwerben kann:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'Tickettype',\n                        header: <Text weight=\"bold\">Tickettyp</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Freigebene Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.maxTicketmenge}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Ticketanzahl konfigurieren\" onClick={this.callShopManagamentConfTickets}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewPayment extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    switchBooleanToString() {\n        var bezahloptionenArray = [];\n        for (let [key, value] of this.props.konfigurierteBezahloptionen) {\n            var switcher = \"\";\n            if (!value) {\n                switcher = \"Nicht Konfiguriert\"\n            }\n            if (value) {\n                switcher = \"Konfiguriert\"\n            }\n            bezahloptionenArray.push({ bezahlOption: key, konfiguriert: switcher })\n        }\n        return bezahloptionenArray;\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[0] = <Box name=\"paymentOptions\" className=\"quickViewOuterBox\">\n            <Text>Übersicht der Konfigurierten Bezahloptionen:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'bezahlOption',\n                        header: <Text weight=\"bold\">Bezahloption</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'konfiguriert',\n                        header: <Text weight=\"bold\">Ist Konfiguriert</Text>,\n                    },\n                ]}\n                data={this.switchBooleanToString()}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Bezahloptionen konfigurieren\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\nclass DataQuickViewBookings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagementViewBookings = this.callShopManagementViewBookings.bind(this);\n    }\n\n    callShopManagementViewBookings() {\n        var value = 3;\n        this.props.changeInitializeStep(value);\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"statusBookings\" className=\"quickViewOuterBox\">\n            <Text>Anzahl und Status der Buchungen im System:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'status',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.statusBookings}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Buchungen \" onClick={this.callShopManagementViewBookings}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewSalesStatistics extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.callShopManagementSalesStatistics = this.callShopManagementSalesStatistics.bind(this)\n    }\n\n    callShopManagementSalesStatistics() {\n        var value = 4;\n        this.props.changeInitializeStep(value);\n    }\n\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"statusSales\" className=\"quickViewOuterBox\">\n            <Text>Anzahl und Status der Ticketbuchungen im System:</Text>\n            <Box pad=\"small\"></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'status',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.statusSales}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box Class-Name=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Tickets verwalten\" onClick={this.callShopManagementSalesStatistics}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewManageSales extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    \n\n    callShopManagementManageSales() {\n        var value = 5;\n        this.props.changeInitializeStep(value);\n    }\n\n\n    render() {\n        var salesStatus;\n        if(this.props.salesStatus){salesStatus = {Beschreibung: \"Ticketverkauf\", Status: \"Aktiv\"};};\n        if(!this.props.salesStatus){salesStatus= {Beschreibung: \"Ticketverkauf\", Status: \"Deaktiviert\"};};\n\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"boxManageSales\" className=\"quickViewOuterBox\">\n            <Text>Anzeige für den Status und das aktivieren und \n                deaktivieren des Ticketverkaufs</Text>\n            <Box pad=\"small\"></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'Beschreibung',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Status',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={salesStatus}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box Class-Name=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Status ändern\" onClick={this.callShopManagementManageSales}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ShopManagement extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            initializeStep: 0,\n            openBookings: 0,\n            salesStatus: true,\n            maxTicketmenge: [{ Tickettype: \"Absolvententickets\", Anzahl: 1 },\n            { Tickettype: \"Begleitertickets\", Anzahl: 2 },\n            { Tickettype: \"Parkttickets\", Anzahl: 1 }],\n            konfigurierteBezahloptionen: new Map([[\"Paypal\", false], [\"Überweisung\", false]]),\n            statusBookings:\n                [{ status: \"Gebucht\", Anzahl: 0 },\n                { status: \"Offen\", Anzahl: 0 },\n                { status: \"Stornieren\", Anzahl: 0 }],\n            statusSales:\n                [{ status: \"Verfügbar\", Anzahl: 0 },\n                { status: \"Verkauft\", Anzahl: 0 },\n                { status: \"Beantragt\", Anzahl: 0 },\n                { status: \"Stornieren\", Anzahl: 0 }],\n        }\n        this.changeInitializeStep = this.changeInitializeStep.bind(this);\n        this.setMaxTicketMenge = this.setMaxTicketMenge.bind(this);\n        this.getBookings = this.getBookings.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n\n    changeInitializeStep(value) {\n        this.setState({ initializeStep: value });\n    }\n\n    componentDidMount(){\n        this.getBookings();\n    }\n\n    async getBookings(){\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/', {\n            method: 'GET',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            switch (response.status) {\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                case 501:\n                    alert(\"Der Server kann die gewünschte Anfrage nicht ausführen.\");\n                    break;\n                default:\n                    alert(response.message);\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                console.log(rückgabe.length);\n                var bezahlt = 0;\n                var unbezahlt = 0;\n                for(var test = 0; test < rückgabe.length; test++){\n                    if(rückgabe[test].paidAt !== null){\n                        bezahlt = bezahlt + 1;\n                    }\n                    if(rückgabe[test].paidAt === null){\n                        unbezahlt = unbezahlt + 1;\n                    }\n                }\n                this.setBookings(bezahlt, unbezahlt);\n            }\n        }\n    }\n\n    setBookings(bezahlt, unbezahlt){\n        var data = [{ status: \"Gebucht\", Anzahl: bezahlt },\n        { status: \"Offen\", Anzahl: unbezahlt },\n        { status: \"Stornieren\", Anzahl: 0 }];\n        this.setState({statusBookings: data});\n    }\n\n    //TODO AUS KONFIG ABRUFEN und mit SHOPMANGEMENT CONFTICKETS VERKNÜPFEN\n    setMaxTicketMenge(Absolvententickets, Begleitertickets, Parkttickets) {\n        var data = [{ Tickettype: \"Absolvententickets\", Anzahl: Absolvententickets },\n        { Tickettype: \"Begleitertickets\", Anzahl: Begleitertickets },\n        { Tickettype: \"Parkttickets\", Anzahl: Parkttickets }]\n        this.setState({maxTicketmenge: data});\n    }\n    setSalesStatus(status){\n        this.setState({salesStatus: status});\n    }\n\n    render() {\n        return (\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                {this.state.initializeStep === 0 && <Box>\n                    <Box>\n                        <Text size=\"xxlarge\" weight=\"bold\">Hallo das ist die Übersicht der Shop Verwaltung</Text>\n                        <Box pad=\"medium\"></Box>\n                        <Button label=\"QuickView aktualisieren\" onClick={this.componentDidMount}></Button>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewMaxTickets maxTicketmenge={this.state.maxTicketmenge} changeInitializeStep={this.changeInitializeStep}></DataQuickViewMaxTickets>\n                        <DataQuickViewPayment konfigurierteBezahloptionen={this.state.konfigurierteBezahloptionen}></DataQuickViewPayment>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewBookings statusBookings={this.state.statusBookings} changeInitializeStep={this.changeInitializeStep}></DataQuickViewBookings>\n                        <DataQuickViewSalesStatistics statusSales={this.state.statusSales} changeInitializeStep={this.changeInitializeStep}></DataQuickViewSalesStatistics>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewManageSales salesStatus={this.state.salesStatus} setSalesStatus={this.setSalesStatus} changeInitializeStep={this.changeInitializeStep}></DataQuickViewManageSales>\n\n                    </Box>\n                </Box>}\n                {this.state.initializeStep === 1 && <ShopManagementConfMaxTickets\n                    maxTicketmenge={this.state.maxTicketmenge} setMaxTicketMenge={this.setMaxTicketMenge}\n                    changeInitializeStep={this.changeInitializeStep}></ShopManagementConfMaxTickets>}\n\n                {this.state.initializeStep === 3 && <ShopManagementViewBookings\n                    changeInitializeStep={this.changeInitializeStep}\n                ></ShopManagementViewBookings>}\n                {this.state.initializeStep === 4 && <ShopManagementSalesStatistics changeInitializeStep={this.changeInitializeStep}>\n                </ShopManagementSalesStatistics>}\n            </Box>\n        );\n    }\n}\n\nexport default ShopManagement;\n","import React from 'react';\nimport { Box, Header, Menu } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport EntranceDashboard from './Components/EntranceDashboard';\nimport TicketReaderManager from './Components/TicketReaderManager';\nimport SystemInitalisierung from './Components/SystemInitalisierung';\nimport ShopManagement from './Components/ShopManagement';\nimport UserContext from '../AppContexts/UserContext';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            console.log(connectionState);\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    break;\n                case \"disconnected\":\n                    break;\n                case \"failed\":\n                    // One or more transports has terminated unexpectedly or in an error\n                    console.debug(\"Attempting to remove closed remote ticket reader\");\n                    let RTRList = this.state.RTRList;\n                    let idx = RTRList.indexOf(remoteTicketReader);\n                    RTRList.splice(idx, 1);\n                    this.setState({ RTRList: RTRList });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => {\n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, secretIngredient, callback) => {\n            this.localTicketMirror.obliterateTicket(identifier, secretIngredient).then((result) => {\n                callback(result);\n            }).catch((error) => {\n                callback(null, error)\n            });\n        }\n    }\n\n    render() {\n        return (\n\n            <Box className=\"EventManagement\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/eventmgmt\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <ul>\n                    <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                    <li><Link to=\"/eventmgmt/entrancedb\">Show Entrance Dashboard</Link></li>\n                    <li><Link to=\"/eventmgmt/ticketshop\">Manage Ticketshop</Link></li>\n                    <li><Link to=\"/eventmgmt/SystemInitalisierung\">System Initalisieren</Link></li>\n                    <li><Link to=\"/eventmgmt/ShopManagement\">Shop Management</Link></li>\n                </ul>\n                <Switch>\n                    <Route path=\"/eventmgmt/rtrm\">\n                        <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                    </Route>\n                    <Route path=\"/eventmgmt/entrancedb\">\n                        <EntranceDashboard localTicketMirror={this.localTicketMirror}></EntranceDashboard>\n                    </Route>\n                    <Route path=\"/eventmgmt/ShopManagement\">\n                        <ShopManagement></ShopManagement>\n                    </Route>\n                    <Route path=\"/eventmgmt/SystemInitalisierung\">\n                        <SystemInitalisierung></SystemInitalisierung>\n                    </Route>\n                    <Route path=\"/eventmgmt/ticketshop\">\n                        <Box pad=\"medium\">Hier müsste dann sowas wie ein Ticketshop Management Dashboard hin...</Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\n\nimport UserContext from './AppContexts/UserContext';\nimport AccountManagement from './AccountManagement/AccountManagement'\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport Entrance from './Entrance/Entrance';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { userContext: {} };\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.init = this.init.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    let ls = JSON.parse(localStorage.getItem('userContext'));\n    this.setState({ userContext: ls ? ls : {} }, this.login);\n  }\n\n  logout() {\n    localStorage.clear();\n    this.setState({ userContext: {} }); \n    window.location.assign('#/');\n  }\n\n  login() {\n    if (!this.state.userContext.user) {\n      window.location.assign('#/Accountmanagement/');\n    } else if (this.state.userContext.user.role === 0) {\n      window.location.assign('#/eventmgmt/');\n    } else if (this.state.userContext.user.role === 1) {\n      window.location.assign('#/guest/');\n    }\n  }\n\n  render() {\n    return (\n      // @Robin Hinzugefügt für globales User Objekt siehe https://reactjs.org/docs/context.html\n      <UserContext.Provider value={Object.assign(this.state.userContext, { logout: this.logout, login: this.login, reloadLocalStorage: this.init })}>\n\n        <Grommet theme={grommet}>\n          <Switch>\n            <Route exact path=\"/\">\n              <ul>\n                <li><Link to=\"/guest\">Ticketshop</Link></li>\n                <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n                <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n                <li><Link to=\"/Accountmanagement\">Anmelden</Link></li>\n              </ul>\n            </Route>\n          </Switch>\n          <Switch>\n            <Route path=\"/guest\">\n              <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n            </Route>\n            <Route path=\"/entrance\">\n              <Entrance></Entrance>\n            </Route>\n            <Route path=\"/eventmgmt\">\n              <EventManagement></EventManagement>\n            </Route>\n            <Route path=\"/Accountmanagement\">\n              <AccountManagement></AccountManagement>\n            </Route>\n          </Switch>\n        </Grommet>\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\n// eslint-disable-next-line\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}