{"version":3,"sources":["Ticketshop/Components/WalletSetup.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/Obliterator.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/AccountManagement.js","Ticketshop/Components/Bestellungsuebsericht.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","EntranceManagement/EntranceManagement.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/IndexedDBExample.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["WalletSetup","props","state","sign","bind","connectWallet","this","init","alert","setState","walletAvailable","window","ethereum","walletLink","WalletLink","appName","appLogoUrl","darkMode","makeWeb3Provider","connected","selectedAddress","web3","Web3","enable","catch","displayError","accounts","console","log","eth","defaultAccount","message","from","text","msg","utils","stringToHex","params","currentProvider","send","method","err","result","error","recovered","recover","toLowerCase","open","Box","className","direction","gap","pad","Text","Button","label","onClick","linkToDownloadMetaMask","TextInput","placeholder","value","signMessage","onChange","event","target","React","Component","UserMainMenu","to","Obliterator","qrcode","undefined","givenProvider","connect","getSelectedAddress","sendAsync","signature","QRCode","toDataURL","then","url","getAccounts","src","alt","width","height","ticketType","onReady","TicketOverview","obliterate","onReadyHandler","AccountManagement","createCoinbaseWallet","createUser","otpBest√§tigen","otpInputHandler","setState1","setState6","otp","step","verifyAddress","walletLogin","fetch","mode","cache","headers","body","JSON","stringify","address","response","json","test","data","challenge","challengeString","a","classname","Bestellungsuebsericht","loadListHandler","tableFilled","buchungen","htmlListe","forEach","buchung","push","key","Ticketshop","Header","background","justify","Menu","items","path","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","canvas","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","contentType","match","groups","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","requestMap","Map","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","dataChannel","channel","_messageHandler","dt","Date","getTime","replace","c","r","Math","random","floor","toString","identifier","Promise","resolve","reject","reqId","_createUUID","set","type","context","e","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","EntranceManagement","connectTicketReader","scanDoneHandler","ticketReader","connectTR","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","parse","inflate","setMasterConfig","readTicketRemote","obliterateTicketRemote","LocalTicketMirror","_createDB","dumpTicketMirror","getTicketList","indexedDB","Error","waitingForIDBReadyQueue","_initDB","request","ev","db","errorCode","createObjectStore","keyPath","_getIDB","objectStore","transaction","item","add","getAll","onerror","onsuccess","tickets","get","ticket","isValid","isUsed","requestUpdate","put","IndexedDBExample","handleDumpMirror","showTickets","localTicketMirror","ltm","map","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","errorMessage","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","length","EventManagement","rTRHandler","getTicket","App","account","obliterateTokens","getAccountDetails","details","verified","getAccountBalance","balance","st","paidTickets","poolTickets","parkTickets","errorDisplay","number","Grommet","theme","grommet","exact","eigenschaft1","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be725ae9.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\nclass WalletSetup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.sign = this.sign.bind(this);\n        this.connectWallet = this.connectWallet.bind(this);\n        \n    }\n\n    /**\n     * Calling the initialization directly after this component\n     * was created and mounted in the DOM.\n     */\n    componentDidMount() {\n        this.init();\n    }\n\n    displayError() {\n        alert(\"Ups, das hat nicht geklappt\");\n    }\n\n    /**\n     * Initializes Ethereum Wallet Provider and Web3 Instance\n     * In case the browser is a desktop browser without wallet capability,\n     * the Standard WalletLink is used to create a Wallet Provider instance.\n     * WalletLink is supported by Coinbase as an example: https://github.com/walletlink/walletlink\n     */\n    init() {\n        // TODO: Move these constants to a global constants file\n        const APP_NAME = 'DHBW Bachelors Night Ticketing 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171' // Mainnet\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n\n            // Initialize WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            // Initialize a Web3 Provider object\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n        }\n\n        // Checking if wallet is already connected or not\n        // eslint-disable-next-line\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        // Creating Web3 Instance\n        this.web3 = new Web3(window.ethereum);\n    }\n\n    /**\n     * Attempts to connect with the Wallet\n     */\n    async connectWallet() {\n        // Requesting connection to wallet\n        var accounts = await window.ethereum.enable().catch(this.displayError);\n        if (!accounts) return;\n\n        console.log(`User's address is ${accounts[0]}`);\n        this.web3.eth.defaultAccount = accounts[0];\n        this.setState({ connected: true });\n    }\n\n    /**\n     * Example method for showing how a message can be signed and verified.\n     */\n    async sign(message) {\n        if (!window.ethereum) return this.displayError();\n        if (!window.ethereum.selectedAddress) return this.displayError();\n        var from = window.ethereum.selectedAddress;\n\n        var text = message;\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.send({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err) return console.error(err)\n            if (result.error) return console.error(result.error)\n\n            console.log(result);\n\n            var recovered = this.web3.eth.accounts.recover(msg, result.result);\n\n            if (recovered.toLowerCase() === from.toLowerCase()) {\n                alert('Successfully ecRecovered signer as ' + from)\n            } else {\n                alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n            }\n        })\n    }\n\n    /**\n     * Just a method to open a new tab...\n     */\n    linkToDownloadMetaMask() {\n        window.open('https://wallet.coinbase.com/', '_blank');\n    }\n\n    render() {\n        return (\n            <Box className=\"WalletSetup\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <h1>Wallet Setup</h1>\n                <Text>\n                    Um Tickets zu erwerben ben√∂tigen Sie ein sogenanntes Wallet.\n                    Dieses ist vergleichbar mit Ihrer Geldb√∂rse zu der nur Sie Zugriff haben.\n                </Text>\n                {(!this.state.walletAvailable && !this.state.connected) &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            F√ºr unser Ticket-System muss dieses Wallet Ethereum-f√§hig sein.\n                            Wir empfehlen Ihnen daher das Coinbase Wallet.\n                            Bitte installieren Sie sich das Coinbase Wallet √ºber die offizielle Website.\n                            Kommen Sie nach Abschluss der Einrichtung wieder auf diese Seite zur√ºck.\n                        </Text>\n                        <Button label=\"Coinbase f√ºr's Smartphone installieren\" onClick={this.linkToDownloadMetaMask}></Button>\n                    </Box>\n                }\n                {!this.state.connected &&\n                    <Box gap=\"medium\">\n                        <Text>\n                            Als N√§chstes ben√∂tigt unsere Plattform die Adresse Ihres Wallets.\n                            Bitte best√§tigen Sie daher die Verbindung mit Ihrem Wallet √ºber folgende Schaltfl√§che.\n                            Sie geben dadurch <b>nicht</b> Ihre Kontrolle √ºber das Wallet ab!\n                        </Text>\n                        <Button label=\"Mit dem Wallet verbinden\" onClick={this.connectWallet}></Button>\n                    </Box>\n                }\n                <Text>\n                    Hier folgt eine DEMO!!!\n                </Text>\n                <TextInput\n                    placeholder=\"Nachricht zum signieren\"\n                    value={this.state.signMessage}\n                    onChange={(event) => { this.setState({ signMessage: event.target.value }) }}\n                ></TextInput>\n                <Button label=\"Sign and Verify Message\" onClick={() => { this.sign(this.state.signMessage) }}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default WalletSetup;\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/\">Tickets Bestellen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/\">Bestellungen Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/setup\">Setup</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './Obliterator.css';\nimport QRCode from 'qrcode';\nimport Web3 from 'web3';\nimport { Box, Button, Text } from 'grommet';\n\nclass Obliterator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { qrcode: undefined };\n        this.web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545');\n        this.state = { error: false };\n        this.sign();\n    }\n\n    async sign() {\n        await this.connect();\n        var from = await this.getSelectedAddress();\n\n        var text = 'Hallo du Frosch!';\n        var msg = this.web3.utils.stringToHex(text);\n\n        var params = [msg, from]\n        var method = 'personal_sign'\n\n        this.web3.currentProvider.sendAsync({\n            method,\n            params,\n            from,\n        }, (err, result) => {\n            if (err){\n                this.setState({ error: true });\n                return console.error(err)\n            } \n            if (result.error){\n                this.setState({ error: true });\n                return console.error(result.error)\n            } \n\n            const signature = result.result;\n            \n            QRCode.toDataURL(signature)\n            .then(url => {\n                this.setState({ qrcode: url });\n            })\n            .catch(err => {\n                this.setState({ error: true });\n                console.error(err);\n            })\n\n        })\n    }\n\n    async connect() {\n        if (typeof window.ethereum !== 'undefined') {\n            await window.ethereum.enable().catch(console.error);\n        }\n    }\n\n    async getSelectedAddress() {\n        var accounts = await this.web3.eth.getAccounts().catch(console.error);\n        return accounts[0].toLowerCase();\n    }\n\n    render() {\n        return (\n            <Box className=\"Obliterator\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                { !this.state.error && <Box>\n                    <img src={this.state.qrcode} alt=\"QRCODE\" width=\"300px\" height=\"300px\"></img>\n                    <h2>{this.props.ticketType}</h2>\n                </Box>}\n                { this.state.error && <Box>\n                    <Text>Ups, das hat nicht geklappt!</Text>\n                </Box>}\n                <Button label=\"Fertig\" onClick={this.props.onReady}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default Obliterator;\n","import React from 'react';\nimport './TicketOverview.css';\nimport Obliterator from './Obliterator.js';\nimport { Box, Button, Text } from 'grommet';\n\nclass TicketOverview extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.obliterate = this.obliterate.bind(this);\n        this.onReadyHandler = this.onReadyHandler.bind(this);\n        this.state = { obliterate: undefined };\n    }\n\n    onReadyHandler(){\n        this.setState({ obliterate: undefined })\n    }\n\n    obliterate(){\n        this.setState({ obliterate: \"Absolvent\" })\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    <Box>\n                        <h1 className=\"NumberOfTickets\">4</h1>\n                    </Box>\n                    <Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Absolvent</Text><Button label=\"Einl√∂sen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Gast Regul√§r</Text><Button label=\"Einl√∂sen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Gast Regul√§r</Text><Button label=\"Einl√∂sen\" onClick={this.obliterate}></Button>\n                        </Box>\n                        <Box className=\"Ticket\" direction=\"row\" gap=\"small\" pad=\"small\">\n                            <Text className=\"Type\">Parken</Text><Button label=\"Einl√∂sen\" onClick={this.obliterate}></Button>\n                        </Box>\n                    </Box>\n                </Box>\n                {this.state.obliterate && <Obliterator ticketType={this.state.obliterate} onReady={this.onReadyHandler}></Obliterator>}\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport { Box, Button, TextInput, Text } from 'grommet';\nimport Web3 from 'web3';\nimport WalletLink from 'walletlink';\n\n\n    class AccountManagement extends React.Component{\n\n        constructor(props){\n            super(props);\n            this.connectWallet = this.connectWallet.bind(this);\n            this.createCoinbaseWallet = this.createCoinbaseWallet.bind(this);\n            this.createUser = this.createUser.bind(this);\n            this.otpBest√§tigen = this.otpBest√§tigen.bind(this);\n            this.otpInputHandler = this.otpInputHandler.bind(this);\n            this.setState1 = this.setState1.bind(this);\n            this.setState6 = this.setState6.bind(this);\n            this.sign = this.sign.bind(this);\n            this.state = { otp: \"\", step: 0 };\n            this.verifyAddress = this.verifyAddress.bind(this);\n            this.walletLogin = this.walletLogin.bind(this);\n        }\n\ncomponentDidMount() {\n    //Ruft die Initialisierung auf, nachdem die Komponente erstellt wurde\n    this.init();\n}\n\ninit(){\n        const APP_NAME = 'DHBW Bachelors Night Ticketing - 2020'\n        const APP_LOGO_URL = 'https://einfachtierisch.de/media/cache/article_teaser/cms/2015/09/Katze-lacht-in-die-Kamera-shutterstock-Foonia-76562038.jpg?595617'\n        const ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171' // Mainnet\n        const CHAIN_ID = 1\n\n        this.setState({ walletAvailable: window.ethereum ? true : false });\n\n        if (!window.ethereum) {\n            //Initialisiere WalletLink\n            this.walletLink = new WalletLink({\n                appName: APP_NAME,\n                appLogoUrl: APP_LOGO_URL,\n                darkMode: false\n            })\n\n            window.ethereum = this.walletLink.makeWeb3Provider(ETH_JSONRPC_URL, CHAIN_ID);\n\n        }\n        this.setState({ connected: window.ethereum.selectedAddress ? true : false });\n\n        this.web3 = new Web3(window.ethereum);\n\n    }\n\notpInputHandler(event){\n    this.setState({otp: event.target.value});\n}\n\notpBest√§tigen(){\n    console.log(this.state.otp);\n    this.setState({step: 2});\n}\n\ncreateCoinbaseWallet(){\n    window.open('https://wallet.coinbase.com/#signup', '_blank');\n}\n\nasync connectWallet(){\n    var accounts = await window.ethereum.enable().catch(this.displayError)\n    if (!accounts) return;\n\n    console.log(`User's address is ${accounts[0]}`);\n    this.setState({connected: true});\n    this.setState({step: 3});\n}\n\ndisplayError(){\n    alert(\"Ups, das hat leider nicht funktioniert. Bitte versuche es erneut.\")\n}\n\nasync verifyAddress(){\n    if (!window.ethereum) return this.displayError();\n    if (!window.ethereum.selectedAddress) return this.displayError();\n    var from = window.ethereum.selectedAddress;\n\n    var testsignatur = 'Drei3333';\n    var msg = this.web3.utils.stringToHex(testsignatur);\n    \n    var params = [msg, from]\n    var method = 'personal_sign'\n\n    this.web3.currentProvider.send({\n        method,\n        params,\n        from,\n    }, (err, result) => {\n        if (err) return console.error(err)\n        if (result.error) return console.error(result.error)\n\n        console.log(result);\n\n        var recovered = this.web3.eth.accounts.recover(msg, result.result);\n        if (recovered.toLowerCase() === from.toLowerCase()){\n            alert('Successfully ecRecovered signer as ' + from)\n            this.setState({ step: 4 })\n        } else {\n            alert('Failed to verify signer when comparing ' + recovered + ' to ' + from)\n        }\n    })\n}\n\nasync createUser(){\n    const response = await fetch('http://localhost:3000/auth/otpcreate/' + this.state.otp, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ address: window.ethereum.selectedAddress})\n    }).catch(console.log);\n\n    if(!response) {\n        alert(\"Fehler\");\n        return;\n    }\n\n    const test = await response.json().catch(console.log);\n\n    console.log(test);\n    this.setState({step: 5});\n}\n\nasync walletLogin(){\n    //if(!this.state.walletAvailable){\n    // this.setState({step: 2})\n    //}\n    //if(!this.state.walletAvailable && !this.state.connected){\n    // this.connectWallet();\n    //}\n    const response = await fetch(\"http://localhost:3000/auth/login\", {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ address: window.ethereum.selectedAddress})\n    }).catch(console.log);\n\n    if (!response) {\n        alert(\"Fehler!\");\n        return;\n    }\n\n    const data = await response.json().catch(console.log);\n    console.log(data);\n    //if(!data.challenge)\n    this.sign(data.challenge);\n}\n\nasync sign(challengeString){\n    if(!window.ethereum) return this.displayError();\n    if(!window.ethereum.selectedAddress) return this.displayError();\n    var from = window.ethereum.selectedAddress;\n\n    var text = challengeString;\n    var msg = this.web3.utils.stringToHex(text);\n\n    var params = [msg, from]\n    var method = 'personal_sign'\n\n    this.web3.currentProvider.send({\n        method,\n        params,\n        from,\n    }, async (err, result) => {\n        if (err) return console.error(err)\n        if (result.error) return console.error(result.error)\n\n        console.log(result);\n        //Mit dem Result weiterrechnen\n\n        const response = await fetch('http://localhost:3000/auth/chr/' + challengeString,{\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ address: from, signature: result.result})\n        }).catch(console.log);\n\n        if(!response) {\n            alert(\"Fehler\");\n            return;\n        }\n        console.log(response)\n    })\n}\n\nsetState1(){\n    this.setState({step: 1});\n}\n\nsetState6(){\n    this.setState({step: 6});\n}\n\n\nrender() {\n    return (\n            <Box className=\"AccountManagement\" pad=\"medium\" gap=\"small\">\n              {this.state.step === 0 &&\n                <Box gap=\"small\">\n                    <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                    <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                    <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                    <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                </Box>   \n              } \n              {this.state.step === 1 &&\n                <Box gap=\"small\">\n                    <Text>Bitte geben Sie das OneTime-Passwort ein und best√§tigen Sie die Eingabe</Text>\n                    <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                    <Button label=\"Eingabe best√§tigen\" onClick={this.otpBest√§tigen}></Button>\n                </Box>\n              }\n              {this.state.step === 2 &&\n                <Box classname=\"WalletSetup\" direction=\"column\" gap=\"small\">\n                    <h1>Wallet Setup</h1>\n                    <Text>Um Tickets zu erwerben ben√∂tigen Sie ein sogenanntes Wallet. Dieses ist vergleichbar mit Ihrer Geldb√∂rse zu der nur Sie Zugriff haben.</Text>\n                    {(!this.state.walletAvailable && !this.state.connected) &&\n                        <Box gap=\"small\">\n                            <Button label=\"Wallet auf dem Smartphone erstellen\" onClick={this.createCoinbaseWallet}></Button>\n                        </Box>\n                    }\n                    {(!this.state.connected)&&\n                        <Box gap=\"small\">\n                            <Text>Als N√§chstes ben√∂tigt unsere Plattform die Addresse Ihres Wallets. Bitte best√§tigen Sie daher die Verbindung mit Ihrem Wallet √ºber folgende Schaltfl√§che.Sie geben dadurch <b>nicht</b> Ihre Kontrolle √ºber das Wallet ab!\n                            Nach einem Klick auf den Button muss mit Coinbase Wallet der angezeigte QR-Code eingescannt werden, um das Wallet zu √ºberpr√ºfen.</Text>\n                            <Button label=\"Mit vorhandenem Wallet anmelden\" onClick={this.connectWallet}></Button>\n                        </Box>\n                    }\n                    {(this.state.walletAvailable && this.state.connected)&&\n                        this.verifyAddress()\n                        //Was kommt genau hier rein?\n                    }\n                </Box>    \n              }\n              {this.state.step === 3 &&\n                <Box gap=\"small\">\n                    <Text>Ein Wallet wurde erfolgreich verbunden. Das Wallet muss anhand einer Testsignatur √ºberpr√ºft werden.</Text>\n                    <Button label=\"F√ºhre Testsignatur aus\" onClick={this.verifyAddress}></Button>\n                </Box>\n              }\n              {this.state.step === 4 &&\n                <Box gap=\"small\">\n                    <Text>Klicke auf den Button, um einen Benutzer zu erstellen.</Text>\n                    <Button label=\"Benutzer erstellen\" onClick={this.createUser}></Button>\n                </Box>\n              }\n              {this.state.step === 5 &&\n                <Box gap=\"small\">\n                    <Text>Der Benutzer wurde erfolgreich angelegt. Klicke auf den Button, um zur Anmeldung zu gelangen. </Text>\n                    <Button label=\"Zur Anmeldung\" onClick={this.setState6}></Button>\n                </Box>    \n              }\n              {this.state.step === 6 &&\n                <Box gap=\"small\">\n                    <h1>Anmeldung mit einem vorhandenen Wallet</h1>\n                    <Button label=\"Anmeldung starten\" onClick={this.walletLogin}></Button>\n                </Box>\n              }\n            </Box>\n    );\n}\n\n}   \nexport default AccountManagement;","import React from 'react';\nimport './TicketOverview.css';\nimport Obliterator from './Obliterator.js';\nimport { Box, Button, Text, Header } from 'grommet';\n\nclass Bestellungsuebsericht extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this)\n        this.state = { tableFilled: false, buchungen: [] };\n    }\n\n    async loadListHandler() {\n        var liste = [{ label: \"abc\" }, { label: \"blue\" }, { label: \"Yellow\" }]\n\n        var response = await fetch(\"http://localhost:3000/api/v1/bookings/user/0x1\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 43059960ead1db519cbbed4aa934462808262fa6204daefabcab4b0b38b667d61828556556e4b9e80b6a91e9990fc8704bbf399cdafd41b06ddc0c31a500accb94b96fa096bf8789c7c582f9e5df0ead8f23ef77a9b045ccbb78a60cd2401592e79b8c396cd4520297cfb0603011a7f373f9dbbc6a37527bd160b5e754850cbf8779a4c5049e816a9b9bee268e110baf53e901e80aa8df89d6a07b92cf33b581294bedc1b8da2c9a583845b13766f4c89abc9ac3466b69748a1ba0bf6a80a8c2b6aa6ec084c88c2cc4d212470089dbb9e4bce056c90e8a0ebaa5b9e563c80d20ac173b791769eac9d29c509810086f1700c7cec0071a03bb7aed67fec7215979',\n            }\n        }).catch(console.log)\n\n        if(!response) return\n\n        console.log(response)\n\n        var data = await response.json().catch(console.log)\n\n        //this.setState({ buchungen: liste })\n    }\n\n    render() {\n        var htmlListe = []\n        this.state.buchungen.forEach((buchung) => {\n            htmlListe.push(<p key={buchung.label}>{buchung.label}</p>)\n        })\n\n        return (\n            <Box className=\"Bestellungsuebsericht\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    <Button label=\"Liste laden\" onClick={this.loadListHandler}></Button>\n                </Box>\n                <Box>\n                    {htmlListe}\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default Bestellungsuebsericht;\n","import React from 'react';\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport WalletSetup from './Components/WalletSetup';\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport AccountManagement from './Components/AccountManagement';\nimport Bestellungsuebsericht from './Components/Bestellungsuebsericht';\n\nclass Ticketshop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    <Menu label=\"Account\" items={[{ label: 'Logout' }]} />\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/tickets\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/setup\">\n                        <AccountManagement></AccountManagement>\n                    </Route>\n                    <Route path=\"/guest/demosetup\">\n                        <WalletSetup></WalletSetup>\n                    </Route>\n                    <Route path=\"/guest/bestellungsuebsericht\">\n                        <Bestellungsuebsericht></Bestellungsuebsericht>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterst√ºtzt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        alert(event.data);\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport { Switch, Route } from \"react-router-dom\";\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass EntranceManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    render() {\n        return (\n            <Box className=\"EntranceManagement\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Ger√§t als Ticket Leser verwenden m√∂chten, m√ºssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Ger√§t mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Ger√§t scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Wunderbar, Sie sind verbunden...</p>\n                            <p>In Zukunft sollten hier Funktionen zum Ticket-Scan stehen...</p>\n                            <Button label=\"Lese ein Beispiel Ticket\" onClick={() => { this.ticketReader.readTicketRemote(\"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\") }}></Button>\n                            <Button label=\"Entwerte Ticket\" onClick={() => { this.ticketReader.obliterateTicketRemote(123, \"signature\") }}></Button>\n                            <Button label=\"Beispiel Funktion 3\"></Button>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte warten Sie einen Moment...</p>\n                        </Route>\n                    </Switch>\n                }\n                {this.state.connected === 'failed' &&\n                    <Switch>\n                        <Route path=\"/entrance/\">\n                            <p>Die Verbindung wurde unterbrochen!</p>\n                            <p>Bitte aktivieren Sie den Reader erneut.</p>\n                            <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                        </Route>\n                    </Switch>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default EntranceManagement;\n","/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.dumpTicketMirror = this.dumpTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(\"TicketMirror\", 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async dumpTicketMirror() {\n        var db = await this._getIDB().catch(console.error);\n        if (!db) return;\n\n        var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n\n        // TODO: Fetch real data from the blockchain when online\n        const dummyData = [{\n            \"identifier\": \"ca6c9409-0ec9-42fb-9ca7-d42a74642d7e\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Parken\"\n        }, {\n            \"identifier\": \"cea4b540-63a4-4abd-9a9a-499bb3879b8c\",\n            \"isValid\": false,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"2537f4c1-2bfa-416f-9098-9b61fe4bb59d\",\n            \"isValid\": true,\n            \"isUsed\": false,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"c3573a44-f9e8-4772-bf80-57d1d07239c8\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }, {\n            \"identifier\": \"5506d14d-8090-411a-897c-3f6c898ec8d2\",\n            \"isValid\": true,\n            \"isUsed\": true,\n            \"ticketType\": \"Begleitperson\"\n        }]\n\n        dummyData.forEach((item) => {\n            objectStore.add(item);\n        });\n\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The signature of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} signature - Specific signature of the owner that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, signature) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n\n                // TODO: Check signature and identifier hash\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Ticket is not valid.\");\n                if (ticket.isUsed) return reject(\"Ticket was already used.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = resolve;\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button } from 'grommet';\n\n// eslint-disable-next-line\nimport { LocalTicketMirror } from '../Classes/LocalTicketMirror';\n\n\nclass IndexedDBExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n        this.showTickets();\n    }\n\n    handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        ltm.dumpTicketMirror();\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets });\n    }\n\n    render() {\n        let tickets = this.state.tickets.map((ticket) => {\n            return <li key={ticket.identifier}>{ticket.isValid && 'Valid'}{!ticket.isValid && 'Not Valid'} -  {ticket.isUsed && 'Used'}{!ticket.isUsed && 'Not Used'} - {ticket.ticketType}</li>\n        });\n\n        return (\n            <Box className=\"IndexedDBExample\" pad=\"medium\">\n                <ul>\n                    {tickets}\n                </ul>\n                <Button label=\"Dump Mirror\" onClick={this.handleDumpMirror}></Button>\n            </Box>\n        );\n    }\n}\n\nexport default IndexedDBExample;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and signature and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} signature - Signature used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, signature, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { ticket: ticket, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: { success: success, errorMessage: errorMsg }\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    disconnectRemoteTicketReader(remoteTicketReader) {\n\n    }\n\n    disconnectAll() {\n\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzuf√ºgen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzuf√ºgen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielger√§t scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielger√§ts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\nimport { Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport IndexedDBExample from './Components/IndexedDBExample';\nimport TicketReaderManager from './Components/TicketReaderManager';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            console.log(connectionState);\n            /**console.debug(\"Attempting to remove closed remote ticket reader\");\n            let RTRList = this.state.RTRList;\n            let idx = RTRList.indexOf(remoteTicketReader);\n            RTRList.splice(idx, 1);\n            this.setState({ RTRList: RTRList });*/\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => { \n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, signature, callback) => {\n            // TODO: Request localmirror \n            callback(true);\n        }\n    }\n\n    render() {\n        return (\n            <Box className=\"EventManagement\">\n                <ul>\n                    <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                    <li><Link to=\"/eventmgmt/entrancedb\">Show Entrance Dashboard</Link></li>\n                    <li><Link to=\"/eventmgmt/ticketshop\">Manage Ticketshop</Link></li>\n                </ul>\n                <Switch>\n                    <Route path=\"/eventmgmt/rtrm\">\n                        <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                    </Route>\n                    <Route path=\"/eventmgmt/entrancedb\">\n                        <IndexedDBExample localTicketMirror={this.localTicketMirror}></IndexedDBExample>\n                    </Route>\n                    <Route path=\"/eventmgmt/ticketshop\">\n                        <Box pad=\"medium\">Hier m√ºsste dann sowas wie ein Ticketshop Management Dashboard hin...</Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport EntranceManagement from './EntranceManagement/EntranceManagement';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null\n    };\n    this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    this.obliterateTokens = this.obliterateTokens.bind(this);\n  }\n\n  errorDisplay(msg) {\n    alert('Sorry, there was an error. Please try again.');\n  }\n\n  scanDoneHandler(address) {\n    this.getAccountDetails(address).then((details) => {\n      if (!details.verified) {\n        return alert('Account nicht f√ºr TBN-Nutzung verifiziert');\n      }\n\n      this.getAccountBalance(address).then((balance) => {\n        const st = this.state;\n        st.account = {\n          address: address,\n          balance: balance,\n          verified: details.verified,\n          paidTickets: details.paidTickets,\n          poolTickets: details.poolTickets,\n          parkTickets: details.parkTickets\n        };\n        this.setState(st);\n      })\n    });\n  }\n\n  async getAccountBalance(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/balanceOf?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  async getAccountDetails(address) {\n    // Fetch current token balance\n    const response = await fetch('http://localhost:3000/accountDetails?address=' + address, {\n      method: 'GET',\n      //headers: myHeaders,\n      mode: 'cors',\n      cache: 'no-cache',\n    }).catch(this.errorDisplay);\n    const data = await response.json().catch(this.errorDisplay);\n    return data;\n  }\n\n  obliterateTokens(number) {\n    let prom = new Promise((resolve, reject) => {\n      setTimeout(() => { resolve('√úbertragen'); this.scanDoneHandler(null) }, 3000); // DUMMY\n      // Call transferFrom address to obliterate-wallet\n    });\n\n    return prom;\n  }\n\n  render() {\n    return (\n      <Grommet theme={grommet}>\n        <Switch>\n          <Route exact path=\"/\">\n            <ul>\n              <li><Link to=\"/guest\">Gast</Link></li>\n              <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n              <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n            </ul>\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/guest\">\n            <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n          </Route>\n          <Route path=\"/entrance\">\n            <EntranceManagement></EntranceManagement>\n          </Route>\n          <Route path=\"/eventmgmt\">\n            <EventManagement></EventManagement>\n          </Route>\n        </Switch>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}