{"version":3,"sources":["config.js","AppContexts/UserContext.js","AccountManagement/AccountManagement.js","Ticketshop/Components/UserMainMenu.js","Ticketshop/Components/TicketOverview.js","Ticketshop/Components/BookingOverview.js","Ticketshop/Components/TicketBestellung.js","Ticketshop/Ticketshop.js","Utilities/Components/QRScanner.js","Utilities/Components/Dialog.js","EventManagement/Classes/TicketReader.js","Entrance/Entrance.js","EventManagement/Classes/LocalTicketMirror.js","EventManagement/Components/EntranceDashboard.js","EventManagement/Classes/RemoteTicketReader.js","EventManagement/Components/TicketReaderManager.js","EventManagement/Components/SystemInitalisierung.js","EventManagement/Components/ShopManagementConfMaxTickets.js","EventManagement/Components/ShopManagementSalesStatistics.js","EventManagement/Components/ShopManagementViewBookings.js","EventManagement/Components/ShopManagement.js","EventManagement/EventManagement.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKEND_BASE_URI","INFURA_URI","IDB_NAME","UserContext","React","createContext","AccountManagement","props","createUser","bind","login","loginPassHandler","mailHandler","otpBestätigen","otpInputHandler","pass1Handler","pass2Handler","setState1","setState6","state","dhbw_mail","login_pass","new_pass","otp","pass1","pass2","step","access_token","tokenHandler","verifyPasswort","event","this","setState","target","value","console","log","alert","pw","fetch","Config","method","mode","cache","headers","body","JSON","stringify","newPassword","catch","response","ok","json","rückgabe","message","handleFinalLogin","mose","email","password","status","userData","localStorage","setItem","context","reloadLocalStorage","Box","className","gap","Header","background","justify","pad","Text","Button","label","onClick","TextInput","placeholder","onChange","classname","direction","Component","contextType","UserMainMenu","to","SingleTicketViewer","identifier","window","location","hash","replace","ticket","forename","surename","ticketType","tempTicket","tickets","find","generateQRCode","data","id","sIG","user","secretIngredient","QRCode","toDataURL","then","url","qrcode","surname","width","height","src","alt","TicketListItem","assign","TicketOverview","loading","fetchTickets","token","forEach","Token","getItem","ticketElements","map","key","path","length","BuchungsItem","ticketsForBooking","push","buchung","booking","accPanelLabel","Date","createdAt","toLocaleDateString","paidAt","AccordionPanel","margin","BookingOverview","loadListHandler","loadTicketsHandler","buchungen","indexOfBooking","undefined","bookingId","findIndex","kopieTickets","concat","filteredTickets","filter","Accordion","onActive","activeItems","PersonInput","onInputHandler","onCheckBox","isWheelchairUser","stateCopy","name","onInput","CheckBox","checked","TicketBestellung","increment","property","guestcount","personsIndex","persons","personInput","personName","personsList","personInputFields","parkcount","decrement","pop","WindowAbsolventTicket","WindowGuestTicket","WindowParkTicket","ToOverview","ToOrder","ToPayment","createTickets","createBooking","graduate","bookingResult","type","userId","result","element","Ticketshop","Consumer","userContext","Menu","items","logout","QRScanner","video","createRef","canvasElement","startScan","tick","stopScan","current","readyState","HAVE_ENOUGH_DATA","canvas","drawImage","imageData","getImageData","code","jsQR","inversionAttempts","contentType","match","groups","address","onDone","requestAnimationFrame","navigator","mediaDevices","getUserMedia","facingMode","stream","getContext","srcObject","setAttribute","play","isScanning","err","error","getVideoTracks","stop","ref","hidden","Dialog","title","onAbort","children","TicketReader","_iceCandidatesHandler","_dataChannelOpenHandler","_receiveChannelHandler","_dataChannelClosedHandler","_connectionChangeHandler","_generateAnswer","_messageHandler","requestMap","Map","icecandidates","remoteICECandidates","onConnectionChanged","connectionState","_initConnection","localPeerConnection","RTCPeerConnection","addEventListener","candidate","answer","setTimeout","debug","onReady","parse","reqId","callbacks","get","dataChannel","channel","dt","getTime","c","r","Math","random","floor","toString","Promise","resolve","reject","_createUUID","set","msg","params","send","e","signature","config","setRemoteDescription","RTCSessionDescription","offer","candidates","addIceCandidate","createAnswer","setLocalDescription","onAnswer","lstore","localDescription","currentLocalDescription","remoteDescription","currentRemoteDescription","Entrance","connected","currentTicket","connectTicketReader","scanDoneHandler","capturedTicketHandler","obliterateTicketHandler","closeTicketViewHandler","ticketReader","connectTR","a","binaryString","pako","deflate","level","TRQRCode","connectTRStep","obj","inflate","setMasterConfig","ticketData","Error","readTicketRemote","currentSecretIngredient","obliterateTicketRemote","size","translateTicketType","isValid","isUsed","LocalTicketMirror","_createDB","saveTicketMirror","getTicketList","indexedDB","waitingForIDBReadyQueue","_initDB","request","open","ev","db","errorCode","createObjectStore","keyPath","_getIDB","objectStore","transaction","clear","add","getAll","onerror","onsuccess","valuesForHash","Web3","utils","sha3","requestUpdate","put","EntranceDashboard","lockDataset","handleDumpMirror","showTickets","lockHandler","localTicketMirror","ltm","confirm","disabled","toggle","List","primaryKey","secondaryKey","RemoteTicketReader","iceCandidatesHandler","dataChannelOpenHandler","generateOfferCode","dataChannelClosedHandler","connectionChangeHandler","setTicketReaderConfig","messageHandler","uuid","createUUID","onOffer","onGetTicket","callback","onObliterateTicket","initConnection","createDataChannel","createOffer","errorMsg","answerMsg","success","handleError","TicketReaderManager","connectRemoteTicketReader","connectRTR","remoteTicketReader","onRTR","RTRQRCode","addRTRStep","RTRList","rtr","onClickItem","onRemoveRTR","Hauptansicht","getConfigured","wert","mapTest","Ansicht","initializeStep","textAlign","weight","doneSteps","AddWallet","httpProvider","configureTheAdminWallet","http_provider","setWalletAddress","wallet_address","changeValueOfmapTest","changeStep","DeploySmartContract","walletBalance","neededBalance","deploySmartContract","getBalanceFromWallet","getPriceOfContract","require","providers","HttpProvider","eth","getBalance","balance","ConfigureAdminAccount","configureTheAdminAcc","ConfigureDatabase","host","port","configureTheDatabase","database","ConfigureMailserver","conncetion","standardMail","standardPrefix","configureTheMailserver","secure","default_from","default_subject_prefix","textInput","Select","options","option","AbsolventenListe","handleOnDrop","liste","listeEingelesen","initialeListe","handleOnError","file","inputElem","reason","handleOnRemoveFile","finished","dateiTyp","useListAndSendMail","emailList","onDrop","onError","delimiter","header","addRemoveButton","onRemoveFile","SystemInitalisierung","walletAddress","align","ShopManagementConfMaxTickets","Absolvententickets","Begleitertickets","Parktickets","changeValues","setValuesAndChangeStep","setMaxTicketMenge","changeInitializeStep","ShopManagementSalesStatistics","ShopManagementViewBookings","DataQuickViewMaxTickets","callShopManagamentConfTickets","DataTable","columns","primary","maxTicketmenge","DataQuickViewPayment","bezahloptionenArray","konfigurierteBezahloptionen","switcher","bezahlOption","konfiguriert","switchBooleanToString","DataQuickViewBookings","callShopManagementViewBookings","statusBookings","DataQuickViewSalesStatistics","callShopManagementSalesStatistics","statusSales","Class-Name","DataQuickViewManageSales","salesStatus","Beschreibung","Status","callShopManagementManageSales","ShopManagement","openBookings","Tickettype","Anzahl","getBookings","componentDidMount","bezahlt","unbezahlt","test","setBookings","Parkttickets","ClassName","wrap","setSalesStatus","EventManagement","rTRHandler","removeRTR","forceUpdate","getTicket","obliterateTicket","idx","indexOf","splice","App","init","ls","role","deleteDatabase","includes","Provider","Object","Grommet","theme","grommet","exact","eigenschaft1","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8HAAAA,EAAOC,QAAU,CACbC,iBAAkB,wBAClBC,WAAY,gEACZC,SAAU,iB,uXCCCC,G,OAFKC,IAAMC,iB,qFCGpBC,E,kDAIF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,mBAAgB,EAAKA,mBAAcJ,KAAnB,gBACrB,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBACvB,EAAKM,aAAe,EAAKA,aAAaN,KAAlB,gBACpB,EAAKO,aAAe,EAAKA,aAAaP,KAAlB,gBACpB,EAAKQ,UAAY,EAAKA,UAAUR,KAAf,gBACjB,EAAKS,UAAY,EAAKA,UAAUT,KAAf,gBACjB,EAAKU,MAAQ,CAAEC,UAAW,GAAIC,WAAY,GAAIC,SAAU,GAAIC,IAAK,GAAIC,MAAO,GAAIC,MAAO,GAAIC,KAAM,EAAGC,aAAc,IAClH,EAAKC,aAAe,EAAKA,aAAanB,KAAlB,gBACpB,EAAKoB,eAAiB,EAAKA,eAAepB,KAApB,gBAdP,E,4DAiBHqB,GAEZC,KAAKC,SAAS,CAAET,IAAKO,EAAMG,OAAOC,U,mCAGzBJ,GAETC,KAAKC,SAAS,CAAEL,aAAcG,EAAMG,OAAOC,U,yCAK3CC,QAAQC,IAAIL,KAAKZ,MAAMI,KACvBQ,KAAKC,SAAS,CAAEN,KAAM,M,mCAGbI,GACTC,KAAKC,SAAS,CAAER,MAAOM,EAAMG,OAAOC,U,mCAG3BJ,GACTC,KAAKC,SAAS,CAAEP,MAAOK,EAAMG,OAAOC,U,kCAG5BJ,GACRC,KAAKC,SAAS,CAAEZ,UAAWU,EAAMG,OAAOC,U,uCAG3BJ,GACbC,KAAKC,SAAS,CAAEX,WAAYS,EAAMG,OAAOC,U,uCAIrCH,KAAKZ,MAAMK,QAAUO,KAAKZ,MAAMM,OAChCY,MAAM,qDACNN,KAAKvB,WAAWuB,KAAKZ,MAAMM,SAG3BY,MAAM,2DACNN,KAAKC,SAAS,CAAER,MAAO,KACvBO,KAAKC,SAAS,CAAEP,MAAO,Q,qCAM3BY,MAAM,4E,0EAGOC,G,2FAEUC,MAAMC,IAAOxC,iBAAmB,oBAAsB+B,KAAKZ,MAAMI,IAAK,CACzFkB,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEC,YAAaV,MACrCW,MAAMd,QAAQC,K,WARXc,E,QAUQC,G,wBACVd,MAAM,gE,SACiBa,EAASE,OAAOH,MAAMd,QAAQC,K,cAA/CiB,E,QACOC,UACTjB,MAAMgB,EAASC,QAAU,8FACzBvB,KAAKC,SAAS,CAAEN,KAAM,K,4CAIHwB,EAASE,OAAOH,MAAMd,QAAQC,K,SAA/CiB,E,UAEFhB,MAAM,0CACNN,KAAKwB,iBAAiBF,I,0QAMPd,MAAMC,IAAOxC,iBAAmB,cAAe,CAClEyC,OAAQ,OACRe,KAAM,OACNb,MAAO,WACPC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEU,MAAO1B,KAAKZ,MAAMC,UAAWsC,SAAU3B,KAAKZ,MAAME,eAC1E4B,MAAMd,QAAQC,K,WARXc,E,QAUQC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QAGA,M,gCAFDtB,MAAM,yF,oCAGNA,MAAM,4G,6BAGNA,MAAMgB,EAASC,S,eAEvBvB,KAAKC,SAAS,CAAEN,KAAM,I,4CAGCwB,EAASE,OAAOH,MAAMd,QAAQC,K,SAA/CiB,E,SAEFtB,KAAKwB,iBAAiBF,G,8IAKjBO,GACbC,aAAaC,QAAQ,cAAehB,KAAKC,UAAUa,IACnD7B,KAAKgC,QAAQC,uB,kCAKbjC,KAAKC,SAAS,CAAEN,KAAM,M,kCAKtBK,KAAKC,SAAS,CAAEN,KAAM,M,+BAKtB,OAEI,kBAACuC,EAAA,EAAD,CAAKC,UAAU,oBAAoBC,IAAI,SACnC,kBAACC,EAAA,EAAD,CAAQC,WAAW,QAAQC,QAAQ,UAAUC,IAAI,QAC7C,kBAACC,EAAA,EAAD,0BAEJ,kBAACP,EAAA,EAAD,CAAKM,IAAI,SACgB,IAApBxC,KAAKZ,MAAMO,MAER,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,sDACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,wBAAwBP,IAAI,QAAQQ,QAAS5C,KAAKd,YAChE,kBAACuD,EAAA,EAAD,sEACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,mCAAmCC,QAAS5C,KAAKb,aAGlD,IAApBa,KAAKZ,MAAMO,MAER,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,sIACA,kBAACI,EAAA,EAAD,CAAWC,YAAY,eAAe3C,MAAOH,KAAKZ,MAAMI,IAAKuD,SAAU/C,KAAKjB,kBAC5E,kBAAC2D,EAAA,EAAD,CAAQC,MAAM,wBAAqBC,QAAS5C,KAAKlB,sBAGpC,IAApBkB,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKc,UAAU,kBAAkBC,UAAU,SAASb,IAAI,SACpD,+CACA,kBAACK,EAAA,EAAD,mEACA,kBAACI,EAAA,EAAD,CAAWC,YAAY,0BAA0B3C,MAAOH,KAAKZ,MAAMK,MAAOsD,SAAU/C,KAAKhB,eACzF,kBAAC6D,EAAA,EAAD,CAAWC,YAAY,+BAA4B3C,MAAOH,KAAKZ,MAAMM,MAAOqD,SAAU/C,KAAKf,eAC3F,kBAACyD,EAAA,EAAD,CAAQC,MAAM,yBAAsBC,QAAS5C,KAAKF,kBAGrC,IAApBE,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,uEACA,kBAACS,EAAA,EAAD,CAAWC,YAAY,4BAA4B3C,MAAOH,KAAKZ,MAAMC,UAAW0D,SAAU/C,KAAKnB,cAC/F,kBAACgE,EAAA,EAAD,CAAWC,YAAY,4BAA4B3C,MAAOH,KAAKZ,MAAME,WAAYyD,SAAU/C,KAAKpB,mBAChG,kBAAC8D,EAAA,EAAD,CAAQC,MAAM,WAAWC,QAAS5C,KAAKrB,e,GA3LnCN,IAAM6E,WAAhC3E,EAEK4E,YAAc/E,EAiMVG,Q,iBCjLA6E,G,yDAhBX,WAAY5E,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,qDAMf,OACI,kBAAC8C,EAAA,EAAD,CAAKC,UAAU,eAAec,UAAU,SAASb,IAAI,SAASI,IAAI,UAC9D,kBAAC,IAAD,CAAML,UAAU,WAAWkB,GAAG,kBAA9B,oBACA,kBAAC,IAAD,CAAMlB,UAAU,WAAWkB,GAAG,cAA9B,kBACA,kBAAC,IAAD,CAAMlB,UAAU,WAAWkB,GAAG,mBAA9B,2B,GAZWhF,IAAM6E,Y,0BCI3BI,E,kDAIF,WAAY9E,GAAQ,IAAD,uBACf,cAAMA,IACDY,MAAQ,GACb,EAAKmE,WAAaC,OAAOC,SAASC,KAAKC,QAAQ,mBAAoB,IACnE,EAAKC,OAAS,CAAEC,SAAU,KAAMC,SAAU,KAAMC,WAAY,MAC5D,IAAIC,EAAa,EAAKxF,MAAMyF,QAAQC,MAAK,SAAAN,GAAM,OAAIA,EAAOL,aAAe,EAAKA,cAL/D,OAMXS,IACA,EAAKJ,OAASI,GAPH,E,gEAYfhE,KAAKmE,eAAenE,KAAK4D,U,8EAGRA,G,8EAEbQ,EAAO,CAAEC,GAAIT,EAAOL,WAAYe,IAAKtE,KAAKgC,QAAQuC,KAAKC,kBAC3DC,IAAOC,UAAU3D,KAAKC,UAAUoD,IAAOO,MAAK,SAACC,GACzC,EAAK3E,SAAS,CAAE4E,OAAQD,OACzB1D,MAAMd,QAAQC,K,sIAIjB,OACI,kBAAC6B,EAAA,EAAD,CAAKC,UAAU,gBACX,kBAACD,EAAA,EAAD,CAAKM,IAAI,SACL,2BAAIxC,KAAK4D,OAAOC,UAChB,2BAAI7D,KAAK4D,OAAOkB,SAChB,2BAAI9E,KAAK4D,OAAOG,aAEpB,kBAAC7B,EAAA,EAAD,CAAKM,IAAI,SACL,yBAAKuC,MAAM,MAAMC,OAAO,MAAMC,IAAKjF,KAAKZ,MAAMyF,OAAQK,IAAI,yC,GApC7C7G,IAAM6E,WA2CvC,SAASiC,EAAe3G,GACpB,OACI,kBAAC0D,EAAA,EAAD,CAAKC,UAAU,iBAAiBc,UAAU,MAAMb,IAAI,QAAQI,IAAI,SAC5D,kBAACC,EAAA,EAAD,CAAMN,UAAU,QAAQ3D,EAAMoF,OAAOC,SAArC,IAAgDrF,EAAMoF,OAAOkB,SAC7D,kBAACrC,EAAA,EAAD,CAAMN,UAAU,QAAQ3D,EAAMoF,OAAOG,YACrC,kBAACrB,EAAA,EAAD,CAAQC,MAAM,WAAWC,QAAS,WAAQY,OAAOC,SAAS2B,OAAO,mBAAqB5G,EAAMoF,OAAOL,gBAhDzGD,EAEKH,YAAc/E,E,IAmDnBiH,E,kDAIF,WAAY7G,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAE6E,QAAS,GAAIqB,SAAS,GAFtB,E,gEAMftF,KAAKuF,iB,8JAILvF,KAAKC,SAAS,CAAEqF,SAAS,I,SACJ9E,MAAMC,IAAOxC,iBAAmB,iBAAmB+B,KAAKgC,QAAQuC,KAAKF,GAAK,WAAY,CAEvG1D,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARbc,E,QAUUC,G,uBACVpB,KAAKC,SAAS,CAAEqF,SAAS,IACzBhF,MAAM,sD,2CAIUa,EAASE,OAAOH,MAAMd,QAAQC,K,WAA9C4D,E,0DAIJA,EAAQwB,SAAQ,SAAC7B,GACb,OAAQA,EAAOG,YACX,IAAK,IAAKH,EAAOG,WAAa,YAAa,MAC3C,IAAK,IAAKH,EAAOG,WAAa,gBAAiB,MAC/C,IAAK,IAAKH,EAAOG,WAAa,iBAKtC/D,KAAKC,SAAS,CAAEgE,QAASA,EAASqB,SAAS,I,sIAGtCI,GACL5D,aAAaC,QAAQ,YAAa2D,K,iCAGlC,IAAIvF,EAAQ2B,aAAa6D,QAAQ,aACjCvF,QAAQC,IAAIF,K,+BAIZ,IAAIyF,EAAiB5F,KAAKZ,MAAM6E,QAAQ4B,KAAI,SAACjC,GAAD,OAAY,kBAACuB,EAAD,CAAgBW,IAAKlC,EAAOL,WAAYK,OAAQA,OAExG,OACI,kBAAC1B,EAAA,EAAD,CAAKC,UAAU,iBAAiBc,UAAU,SAASb,IAAI,SAASI,IAAI,UAChE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuD,KAAK,8BACR,kBAAC,IAAD,CAAM1C,GAAG,mBAAT,yBACA,kBAAC,EAAD,CAAoBY,QAASjE,KAAKZ,MAAM6E,WAE5C,kBAAC,IAAD,CAAO8B,KAAK,mBACR,kBAAC7D,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,KACI,wBAAIC,UAAU,mBAAmBnC,KAAKZ,MAAM6E,QAAQ+B,SAExD,kBAAC9D,EAAA,EAAD,CAAKC,UAAU,cACVnC,KAAKZ,MAAMkG,SAAW,uBAAGnD,UAAU,WACnCyD,W,GAxEJvH,IAAM6E,WAA7BmC,EAEKlC,YAAc/E,EAgFViH,Q,kBC1ITY,E,kDAEF,WAAYzH,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,qDAMf,IAAI8G,EAAoB,GACxBlG,KAAKxB,MAAMyF,QAAQwB,SAAQ,SAAC7B,GACxBsC,EAAkBC,KACd,kBAACjE,EAAA,EAAD,CAAK4D,IAAKlC,EAAOL,WAAYf,IAAI,SAC7B,oDAA0BoB,EAAOL,YACjC,2CAAiBK,EAAOkB,SACxB,0CAAgBlB,EAAOC,UACvB,6CAAmBD,EAAOG,iBAItC,IAAIqC,EAAUpG,KAAKxB,MAAM6H,QACrBC,EAAgB,WAAaF,EAAQ/B,GAAK,gBAAmB,IAAIkC,KAAKH,EAAQI,WAAWC,qBAAwB,OAASL,EAAQM,OAAS,UAAY,sBAC3J,OACI,kBAACC,EAAA,EAAD,CAAgBhE,MAAO2D,GAClBJ,EAAkBF,OAAS,GACxB,kBAACvD,EAAA,EAAD,CAAMmE,OAAO,SAAb,oCAEHV,EAAkBF,OAAS,GAAKE,EACH,IAA7BA,EAAkBF,QAAgB,kBAACvD,EAAA,EAAD,CAAMmE,OAAO,SAAb,+B,GA3BxBvI,IAAM6E,WAkC3B2D,E,kDAIF,WAAYrI,GAAQ,IAAD,8BACf,cAAMA,IACDsI,gBAAkB,EAAKA,gBAAgBpI,KAArB,gBACvB,EAAKqI,mBAAqB,EAAKA,mBAAmBrI,KAAxB,gBAC1B,EAAKU,MAAQ,CAAE4H,UAAW,GAAI/C,QAAS,IAJxB,E,gEAQfjE,KAAK8G,oB,iKAIL9G,KAAKC,SAAS,CAAEqF,SAAS,I,SACJ9E,MAAMC,IAAOxC,iBAAmB,iBAAmB+B,KAAKgC,QAAQuC,KAAKF,GAAK,YAAa,CACxG3D,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARbc,E,QAUUC,G,uBACVd,MAAM,2C,0CAIOa,EAASE,OAAOH,MAAMd,QAAQC,K,UAA3C+D,E,0DAGJpE,KAAKC,SAAS,CAAE+G,UAAW5C,EAAMkB,SAAS,I,yLAGrB2B,G,qFACEC,IAAnBD,E,oDAEAE,EAAYnH,KAAKZ,MAAM4H,UAAUC,GAAgB5C,IAK9B,IAJHrE,KAAKZ,MAAM6E,QAAQmD,WAAU,SAACxD,GAC9C,OAAOA,EAAOuD,YAAcA,K,iEAKX3G,MAAMC,IAAOxC,iBAAmB,oBAAsBkJ,EAAY,iBAAkB,CACrGzG,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARbc,E,QAUUC,G,wBACVd,MAAM,kD,4CAIOa,EAASE,OAAOH,MAAMd,QAAQC,K,WAA3C+D,E,0DAKJiD,GADIA,EAAerH,KAAKZ,MAAM6E,SACFqD,OAAOlD,GAEnCpE,KAAKC,SAAS,CAAEgE,QAASoD,I,uIAGnB,IAAD,OACDL,EAAY,GAQhB,OAPAhH,KAAKZ,MAAM4H,UAAUvB,SAAQ,SAACW,GAC1B,IAAImB,EAAkB,EAAKnI,MAAM6E,QAAQuD,QAAO,SAAC5D,GAC7C,OAAOA,EAAOuD,YAAcf,EAAQ/B,MAExC2C,EAAUb,KAAK,kBAAC,EAAD,CAAcL,IAAKM,EAAQ/B,GAAIgC,QAASD,EAASnC,QAASsD,QAIzE,kBAACrF,EAAA,EAAD,CAAKC,UAAU,kBAAkBc,UAAU,SAASb,IAAI,SAASI,IAAI,UACjE,kBAACN,EAAA,EAAD,KACKlC,KAAKZ,MAAMkG,SAAW,uBAAGnD,UAAU,WACnC6E,EAAUhB,OAAS,GAChB,kBAACyB,EAAA,EAAD,CAAWC,SAAU,SAACC,GAAkB,EAAKZ,mBAAmBY,EAAY,MACvEX,GAGa,IAArBA,EAAUhB,QACP,kBAACvD,EAAA,EAAD,wC,GA5FMpE,IAAM6E,WAA9B2D,EAEK1D,YAAc/E,EAkGVyI,Q,iBCxITe,E,kDAEF,WAAYpJ,GAAQ,IAAD,8BACf,cAAMA,IACDqJ,eAAiB,EAAKA,eAAenJ,KAApB,gBACtB,EAAKoJ,WAAa,EAAKA,WAAWpJ,KAAhB,gBAClB,EAAKU,MAAQ,CACTyE,SAAU,GACViB,QAAS,GACTiD,kBAAkB,GAPP,E,2DAWJhI,GACX,IAAMiI,EAAYhI,KAAKZ,MACvB4I,EAAUjI,EAAMG,OAAO+H,MAAQlI,EAAMG,OAAOC,MAC5CH,KAAKC,SAAS+H,GACdhI,KAAKxB,MAAM0J,QAAQlI,KAAKZ,S,iCAGjBW,GACP,IAAMiI,EAAYhI,KAAKZ,MACvB4I,EAAUjI,EAAMG,OAAO+H,OAASD,EAAUjI,EAAMG,OAAO+H,MACvDjI,KAAKC,SAAS+H,GACdhI,KAAKxB,MAAM0J,QAAQlI,KAAKZ,S,+BAIxB,OACI,kBAAC8C,EAAA,EAAD,KACI,kBAACW,EAAA,EAAD,CAAWoF,KAAK,WAAWnF,YAAY,qBAAqB3C,MAAOH,KAAKZ,MAAMyE,SAAUd,SAAU/C,KAAK6H,iBACvG,kBAAChF,EAAA,EAAD,CAAWoF,KAAK,UAAUnF,YAAY,sBAAsB3C,MAAOH,KAAKZ,MAAM0F,QAAS/B,SAAU/C,KAAK6H,iBACtG,kBAACM,EAAA,EAAD,CAAUF,KAAK,mBAAmBtF,MAAM,kCAAkCI,SAAU/C,KAAK8H,WAAYM,QAASpI,KAAKZ,MAAM2I,wB,GAhC/G1J,IAAM6E,WA2WjBmF,E,kDAlUX,WAAY7J,GAAQ,IAAD,8BACf,cAAMA,IA0EV8J,UAAY,SAACC,GACT,GAAiB,UAAbA,GAAwB,EAAKnJ,MAAMoJ,WAAa,EAAG,CAEnD,IAAIC,EAAe,EAAKrJ,MAAMsJ,QAAQ1C,OAClC2C,EAAc,kBAAC,EAAD,CAAa7C,IAAK2C,EAAcP,QAAS,SAACU,GAAiB,IAAIC,EAAc,EAAKzJ,MAAMsJ,QAASG,EAAYJ,GAAgBG,EAAY,EAAK3I,SAAS,CAAEyI,QAASG,OAChLA,EAAc,EAAKzJ,MAAMsJ,QAC7BG,EAAYJ,GAAgB,GAC5B,EAAKrJ,MAAM0J,kBAAkB3C,KAAKwC,GAClC,EAAK1I,SAAS,CAAEyI,QAASG,EAAaC,kBAAmB,EAAK1J,MAAM0J,kBAAmBN,WAAY,EAAKpJ,MAAMoJ,WAAa,QAGzG,SAAbD,GAAuB,EAAKnJ,MAAM2J,UAAY,GACnD,EAAK9I,SAAS,CAAE8I,UAAW,EAAK3J,MAAM2J,UAAY,KAvFvC,EA0FnBC,UAAY,SAACT,GACQ,UAAbA,GAAwB,EAAKnJ,MAAMoJ,WAAa,GAEhD,EAAKpJ,MAAM0J,kBAAkBG,MAC7B,EAAK7J,MAAMsJ,QAAQO,MAEnB,EAAKhJ,SAAS,CAAEuI,WAAY,EAAKpJ,MAAMoJ,WAAa,EAAGM,kBAAmB,EAAK1J,MAAM0J,kBAAmBJ,QAAS,EAAKtJ,MAAMsJ,WAE1G,SAAbH,GAAuB,EAAKnJ,MAAM2J,UAAY,GACnD,EAAK9I,SAAS,CAAE8I,UAAW,EAAK3J,MAAM2J,UAAY,KAjGtD,EAAKG,sBAAwB,EAAKA,sBAAsBxK,KAA3B,gBAC7B,EAAKyK,kBAAoB,EAAKA,kBAAkBzK,KAAvB,gBACzB,EAAK0K,iBAAmB,EAAKA,iBAAiB1K,KAAtB,gBACxB,EAAK2K,WAAa,EAAKA,WAAW3K,KAAhB,gBAClB,EAAK4K,QAAU,EAAKA,QAAQ5K,KAAb,gBACf,EAAK6K,UAAY,EAAKA,UAAU7K,KAAf,gBACjB,EAAK8K,cAAgB,EAAKA,cAAc9K,KAAnB,gBACrB,EAAK+K,cAAgB,EAAKA,cAAc/K,KAAnB,gBACrB,EAAKmJ,eAAiB,EAAKA,eAAenJ,KAApB,gBAItB,EAAKU,MAAQ,CACToJ,WAAY,EACZO,UAAW,EACXpJ,KAAM,EACN+I,QAAS,GACTI,kBAAmB,GACnBY,SAAU,CACN7F,SAAU,GACViB,QAAS,GACTiD,kBAAkB,GAEtB4B,cAAe,MAzBJ,E,2DAkCJ5J,EAAO6J,GACL,aAATA,EACA5J,KAAKC,SAAS,CACVyJ,SAAU,CACN7F,SAAU9D,EAAMG,OAAOC,MACvB2E,QAAS9E,KAAKZ,MAAMsK,SAAS5E,WAIrC9E,KAAKC,SAAS,CACVyJ,SAAU,CACN5E,QAAS/E,EAAMG,OAAOC,MACtB0D,SAAU7D,KAAKZ,MAAMsK,SAAS7F,c,8CAS1C7D,KAAKC,SAAS,CAAEN,KAAM,M,0CAGtBK,KAAKC,SAAS,CAAEN,KAAM,M,yCAGtBK,KAAKC,SAAS,CAAEN,KAAM,M,mCAGtBK,KAAKC,SAAS,CAAEN,KAAM,M,kCAGtBK,KAAKC,SAAS,CAAEN,KAAM,M,gCAGtBK,KAAKC,SAAS,CAAEN,KAAM,M,8JAmCT,I,SACQa,MAAMC,IAAOxC,iBAAmB,mBAAoB,CACrEyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,2gBAErBC,KAAMC,KAAKC,UAAU,CAAE6I,OATd,QAUV3I,MAAMd,QAAQC,K,UATbc,E,8BAYAnB,KAAKC,SAAS,CAAEN,KAAM,M,0CAKPwB,EAASE,OAAOH,MAAMd,QAAQC,K,UAA7CyJ,E,OACJ1J,QAAQC,IAAIyJ,GACZ9J,KAAKC,SAAS,CAAE0J,cAAeG,IAE1BA,E,wBACD9J,KAAKC,SAAS,CAAEN,KAAM,M,kCAG1BS,QAAQC,IAAIyJ,G,UAEN9J,KAAKwJ,gB,6QAIXpJ,QAAQC,IAAIL,KAAKZ,OACbuK,EAAgB3J,KAAKZ,MAAMuK,cAActF,G,cACzBrE,KAAKZ,MAAMsJ,S,gEAAtBqB,E,QACL3J,QAAQC,IAAI0J,G,UACSvJ,MAAMC,IAAOxC,iBAAmB,wBAAyB,CAC1EyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,2gBAErBC,KAAMC,KAAKC,UAAU,CACjBmG,UAAWwC,EACX5F,WAAY,EACZF,SAAUkG,EAAQlG,SAClBiB,QAASiF,EAAQjF,QACjBiD,iBAAkBgC,EAAQhC,qBAE/B7G,MAAMd,QAAQC,K,YAfbc,E,QAiBUC,G,wBACVpB,KAAKC,SAAS,CAAEN,KAAM,M,4CAGPwB,EAASE,OAAOH,MAAMd,QAAQC,K,WAA7CyJ,E,+BAEA9J,KAAKC,SAAS,CAAEN,KAAM,M,2BAG1BS,QAAQC,IAAIyJ,G,gKAGCtJ,MAAMC,IAAOxC,iBAAmB,wBAAyB,CACtEyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,2gBAErBC,KAAMC,KAAKC,UAAU,CACjBmG,UAAWwC,EACX5F,WAAY,EACZF,SAAU7D,KAAKZ,MAAMsK,SAAS7F,SAC9BiB,QAAS9E,KAAKZ,MAAMsK,SAAS5E,QAC7BiD,kBAAkB,MAEvB7G,MAAMd,QAAQC,K,YAfjBc,E,QAiBcC,G,wBACVpB,KAAKC,SAAS,CAAEN,KAAM,M,4CAIXwB,EAASE,OAAOH,MAAMd,QAAQC,K,WAA7CyJ,E,+BAGI9J,KAAKC,SAAS,CAAEN,KAAM,M,2BAG1BS,QAAQC,IAAIyJ,GACZ9J,KAAKsJ,U,cAGetJ,KAAKZ,MAAM2J,W,kEAAtBgB,E,QACL3J,QAAQC,IAAI0J,G,UACSvJ,MAAMC,IAAOxC,iBAAmB,wBAAyB,CAC1EyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,2gBAErBC,KAAMC,KAAKC,UAAU,CACjBmG,UAAWwC,EACX5F,WAAY,EACZF,SAAUkG,EAAQlG,SAClBiB,QAASiF,EAAQjF,QACjBiD,iBAAkBgC,EAAQhC,qBAE/B7G,MAAMd,QAAQC,K,YAfbc,E,QAiBUC,G,wBACVpB,KAAKC,SAAS,CAAEN,KAAM,M,4CAGXwB,EAASE,OAAOH,MAAMd,QAAQC,K,WAA7CyJ,E,+BAEI9J,KAAKC,SAAS,CAAEN,KAAM,M,2BAG1BS,QAAQC,IAAIyJ,G,4SAQV,IAAD,OAGL,OAFA1J,QAAQC,IAAIL,KAAKZ,MAAMsJ,SAGnB,kBAACxG,EAAA,EAAD,CAAKC,UAAU,mBAAmBc,UAAU,SAASb,IAAI,SAASI,IAAI,UAE7C,IAApBxC,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,yGACA,kBAACI,EAAA,EAAD,CAAWoF,KAAK,WAAWnF,YAAY,0BAA0B3C,MAAOH,KAAKZ,MAAMsK,SAAS7F,SAAUd,SAAU,SAAChD,GAAD,OAAW,EAAK8H,eAAe9H,EAAO,eACtJ,kBAAC8C,EAAA,EAAD,CAAWoF,KAAK,UAAUnF,YAAY,2BAA2B3C,MAAOH,KAAKZ,MAAMsK,SAAS5E,QAAS/B,SAAU,SAAChD,GAAD,OAAW,EAAK8H,eAAe9H,EAAO,cACrJ,kBAACoI,EAAA,EAAD,CAAUF,KAAK,mBAAmBtF,MAAM,kCAAkCxC,MAAOH,KAAKZ,MAAMsK,SAAS3B,iBAAkBhF,SAAU/C,KAAK8H,WAAYM,QAASpI,KAAKZ,MAAM2I,mBAEtK,kBAACrF,EAAA,EAAD,CAAQC,MAAM,iCAAiCC,QAAS5C,KAAKmJ,kBAAmB/G,IAAI,WAIvE,IAApBpC,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,4EACA,kBAACC,EAAA,EAAD,CAAQE,QAAS,kBAAM,EAAK0F,UAAU,UAAUnG,UAAU,aAAaQ,MAAM,MAC7E,kBAACD,EAAA,EAAD,CAAQE,QAAS,kBAAM,EAAKoG,UAAU,UAAU7G,UAAU,aAAaQ,MAAM,MAC7E,4BAAK3C,KAAKZ,MAAMoJ,YACfxI,KAAKZ,MAAM0J,kBACZ,kBAACpG,EAAA,EAAD,CAAQE,QAAS5C,KAAKkJ,sBAAuBvG,MAAM,cACnD,kBAACD,EAAA,EAAD,CAAQE,QAAS5C,KAAKoJ,iBAAkBzG,MAAM,YAIjC,IAApB3C,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,oEACA,kBAACC,EAAA,EAAD,CAAQE,QAAS,kBAAM,EAAK0F,UAAU,SAASnG,UAAU,YAAYQ,MAAM,MAC3E,kBAACD,EAAA,EAAD,CAAQE,QAAS,kBAAM,EAAKoG,UAAU,SAAS7G,UAAU,YAAYQ,MAAM,MAC3E,uDAA6B3C,KAAKZ,MAAM2J,WACxC,kBAACrG,EAAA,EAAD,CAAQE,QAAS5C,KAAKmJ,kBAAmBxG,MAAM,cAC/C,kBAACD,EAAA,EAAD,CAAQE,QAAS5C,KAAKqJ,WAAY1G,MAAM,YAI3B,IAApB3C,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,6CAA2C,6BAA3C,mBACY,6BADZ,oBAEczC,KAAKZ,MAAMoJ,WAFzB,IAEqC,6BAFrC,cAGQxI,KAAKZ,MAAM2J,WAEnB,kBAACrG,EAAA,EAAD,CAAQE,QAAS5C,KAAKoJ,iBAAkBzG,MAAM,cAC9C,kBAACD,EAAA,EAAD,CAAQE,QAAS5C,KAAKuJ,UAAW5G,MAAM,iCAG1B,IAApB3C,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,gEAA8D,6BAA9D,wEAC8D,6BAD9D,iDAE0C,6BAF1C,0EAGmE,8BAEnE,kBAACA,EAAA,EAAD,6CAA2C,6BAA3C,mBACY,6BADZ,oBAEczC,KAAKZ,MAAMoJ,WAFzB,IAEqC,6BAFrC,cAGQxI,KAAKZ,MAAM2J,WAEnB,kBAACrG,EAAA,EAAD,CAAQC,MAAM,oBAAoBC,QAAS5C,KAAKyJ,iBAGnC,IAApBzJ,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SAAT,yBAKiB,MAApBpC,KAAKZ,MAAMO,MACR,kBAACuC,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACK,EAAA,EAAD,4D,GA1TOpE,IAAM6E,WCKtB8G,E,kDAnCX,WAAYxL,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,qDAMf,OACI,kBAAC8C,EAAA,EAAD,CAAKC,UAAU,SACX,kBAACE,EAAA,EAAD,CAAQC,WAAW,QAAQC,QAAQ,UAAUC,IAAI,QAC7C,kBAAC,IAAD,CAAMa,GAAG,UAAT,QAEI,kBAAC,EAAY4G,SAAb,MACK,SAAAC,GAAW,OAAI,kBAACC,EAAA,EAAD,CAAMxH,MAAM,UAAUyH,MAAO,CAAC,CAAEzH,MAAO,SAAUC,QAASsH,EAAYG,eAIlG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtE,KAAK,cACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,mBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,mBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,a,GA7BC1H,IAAM6E,W,2BCuFhBoH,E,kDA5Fb,WAAY9L,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,GACb,EAAKmL,MAAQlM,IAAMmM,YACnB,EAAKC,cAAgBpM,IAAMmM,YAC3B,EAAKE,UAAY,EAAKA,UAAUhM,KAAf,gBACjB,EAAKiM,KAAO,EAAKA,KAAKjM,KAAV,gBANK,E,mEAUjBsB,KAAK4K,a,6BAIL,GAAK5K,KAAKuK,OAAUvK,KAAKuK,MAAMM,QAA/B,CACA,GAAI7K,KAAKuK,MAAMM,QAAQC,aAAe9K,KAAKuK,MAAMM,QAAQE,iBAAkB,CACzE/K,KAAKyK,cAAcI,QAAQ7F,OAAS,IACpChF,KAAKyK,cAAcI,QAAQ9F,MAAQ,IACnC/E,KAAKgL,OAAOC,UAAUjL,KAAKuK,MAAMM,QAAS,EAAG,EAAG7K,KAAKyK,cAAcI,QAAQ9F,MAAO/E,KAAKyK,cAAcI,QAAQ7F,QAC7G,IAAIkG,EAAYlL,KAAKgL,OAAOG,aAAa,EAAG,EAAGnL,KAAKyK,cAAcI,QAAQ9F,MAAO/E,KAAKyK,cAAcI,QAAQ7F,QACxGoG,EAAOC,IAAKH,EAAU9G,KAAM8G,EAAUnG,MAAOmG,EAAUlG,OAAQ,CAAEsG,kBAAmB,eACxF,GAAIF,EAGF,OAAQpL,KAAKxB,MAAM+M,aACjB,IAAK,mBACH,IAAIC,EAAQJ,EAAKhH,KAAKoH,MAAV,YAAgB,gCAAhB,cACZ,GAAIA,GAASA,EAAMC,OAAOC,QAGxB,OAFA1L,KAAK4K,gBACL5K,KAAKxB,MAAMmN,OAAOH,EAAMC,OAAOC,SAGjC,MACF,IAAK,qBAGL,IAAK,aAGL,IAAK,YAEH,MACF,QAGE,OAFA1L,KAAK4K,gBACL5K,KAAKxB,MAAMmN,OAAOP,EAAKhH,OAK/BwH,sBAAsB5L,KAAK2K,S,kCAGhB,IAAD,OACV,IAAKkB,UAAUC,aAAc,OAAOxL,MAAM,oDAE1CuL,UAAUC,aAAaC,aADH,CAAExB,MAAO,CAAEyB,WAAY,cAAejH,MAAO,IAAKC,OAAQ,OAE3EL,MAAK,SAACsH,GAEL,EAAKjB,OAAS,EAAKP,cAAcI,QAAQqB,WAAW,MACpD,EAAK3B,MAAMM,QAAQsB,UAAYF,EAC/B,EAAK1B,MAAMM,QAAQuB,aAAa,eAAe,GAC/C,EAAK7B,MAAMM,QAAQwB,OACnBT,sBAAsB,EAAKjB,MAC3B,EAAK1K,SAAS,CAAEqM,YAAY,OAE7BpL,OAAM,SAAUqL,GACfnM,QAAQoM,MAAMD,GAEdjM,MAAM,0D,iCAKLN,KAAKuK,OAAUvK,KAAKuK,MAAMM,SAAY7K,KAAKuK,MAAMM,QAAQsB,YAC5CnM,KAAKuK,MAAMM,QAAQsB,UAAUM,iBACnC,GAAGC,OACf1M,KAAKC,SAAS,CAAEqM,YAAY,O,+BAI5B,OACE,kBAACpK,EAAA,EAAD,CAAKC,UAAU,aACb,6BACE,4BAAQwK,IAAK3M,KAAKyK,cAAemC,QAAS5M,KAAKZ,MAAMkN,aACrD,2BAAOK,IAAK3M,KAAKuK,MAAOqC,QAAM,MAE9B5M,KAAKZ,MAAMkN,YAAc,kBAAC5J,EAAA,EAAD,CAAQC,MAAO3C,KAAKxB,MAAMmE,OAAS,OAAQC,QAAS5C,KAAK0K,iB,GAxFpErM,IAAM6E,WC2Bf2J,G,yDAzBX,WAAYrO,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,qDAMf,OACI,yBAAK+C,UAAU,UACX,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,iBACX,4BAAKnC,KAAKxB,MAAMsO,OAChB,kBAACpK,EAAA,EAAD,CAAQP,UAAU,QAAQS,QAAS5C,KAAKxB,MAAMuO,SAA9C,MAEJ,yBAAK5K,UAAU,eACVnC,KAAKxB,MAAMwO,iB,GAlBnB3O,IAAM6E,YCoMZ+J,G,kBA/LX,aAAe,oBACXjN,KAAKkN,sBAAwBlN,KAAKkN,sBAAsBxO,KAAKsB,MAC7DA,KAAKmN,wBAA0BnN,KAAKmN,wBAAwBzO,KAAKsB,MACjEA,KAAKoN,uBAAyBpN,KAAKoN,uBAAuB1O,KAAKsB,MAC/DA,KAAKqN,0BAA4BrN,KAAKqN,0BAA0B3O,KAAKsB,MACrEA,KAAKsN,yBAA2BtN,KAAKsN,yBAAyB5O,KAAKsB,MACnEA,KAAKuN,gBAAkBvN,KAAKuN,gBAAgB7O,KAAKsB,MACjDA,KAAKwN,gBAAkBxN,KAAKwN,gBAAgB9O,KAAKsB,MAGjDA,KAAKyN,WAAa,IAAIC,IAGtB1N,KAAK2N,cAAgB,GAGrB3N,KAAK4N,oBAAsB,GAO3B5N,KAAK6N,oBAAsB,SAAUC,KAGrC9N,KAAK+N,kB,wKAOW,KAEhB/N,KAAKgO,oBAAsB,IAAIC,kBAFf,MAGhBjO,KAAKgO,oBAAoBE,iBAAiB,eAAgBlO,KAAKkN,uBAC/DlN,KAAKgO,oBAAoBE,iBAAiB,wBAAyBlO,KAAKsN,0BACxEtN,KAAKgO,oBAAoBE,iBAAiB,cAAelO,KAAKoN,wB,kJAG5CrN,GAClBC,KAAK2N,cAAcxH,KAAKpG,EAAMoO,WAC1BnO,KAAKoO,SAAWpO,KAAK6E,QACrBwJ,WAAWrO,KAAKuN,gBAAiB,O,+CAIhBxN,GACrBK,QAAQkO,MAAMvO,GACd,IAAI+N,EAAkB/N,EAAMG,OAAO4N,gBAkBnC9N,KAAK6N,oBAAoBC,K,8CAIL/N,GACpBK,QAAQkO,MAAMvO,GACdC,KAAKuO,Y,gDAGiBxO,GACtBK,QAAQkO,MAAMvO,K,sCAGFA,GACZK,QAAQkO,MAAMvO,EAAMqE,MACpB,IACI,IAAIjD,EAAWJ,KAAKyN,MAAMzO,EAAMqE,MAChC,GAAGjD,EAASsN,MAAM,CACd,IAAIC,EAAY1O,KAAKyN,WAAWkB,IAAIxN,EAASsN,OAC1CtN,EAASqL,MACRkC,EAAS,OAAWvN,EAASqL,OAE7BkC,EAAS,QAAYvN,EAAS2I,SAGxC,MAAM0C,GACJpM,QAAQoM,MAAMA,M,6CAICzM,GACnBC,KAAK4O,YAAc7O,EAAM8O,QACzB7O,KAAK4O,YAAYV,iBAAiB,UAAWlO,KAAKwN,iBAClDxN,KAAK4O,YAAYV,iBAAiB,OAAQlO,KAAKmN,yBAC/CnN,KAAK4O,YAAYV,iBAAiB,QAASlO,KAAKqN,6B,oCAIhD,IAAIyB,GAAK,IAAIvI,MAAOwI,UAMpB,MALW,uCAAuCpL,QAAQ,SAAS,SAAUqL,GACzE,IAAIC,GAAKH,EAAqB,GAAhBI,KAAKC,UAAiB,GAAK,EAEzC,OADAL,EAAKI,KAAKE,MAAMN,EAAK,KACP,MAANE,EAAYC,EAAS,EAAJA,GAAgBI,SAAS,S,uCAKzC9L,GAAa,IAAD,OACzB,OAAO,IAAI+L,SAAQ,SAACC,EAASC,GACzB,IAAIf,EAAQ,EAAKgB,cACjB,EAAKhC,WAAWiC,IAAIjB,EAAO,CAAEc,QAASA,EAASC,OAAQA,IACvD,IAAMG,EAAM,CACR/F,KAAM,UACN6E,MAAOA,EACPzM,QAAS,eACTtB,OAAQ,YACRkP,OAAQ,CAACrM,IAEb,IACI,EAAKqL,YAAYiB,KAAK9O,KAAKC,UAAU2O,IACvC,MAAOG,GACLN,EAAOM,S,6CAKIvM,EAAYwM,GAAY,IAAD,OAC1C,OAAO,IAAIT,SAAQ,SAACC,EAASC,GACzB,IAAIf,EAAQ,EAAKgB,cACjB,EAAKhC,WAAWiC,IAAIjB,EAAO,CAAEc,QAASA,EAASC,OAAQA,IACvD,IAAMG,EAAM,CACR/F,KAAM,UACN6E,MAAOA,EACPzM,QAAS,eACTtB,OAAQ,mBACRkP,OAAQ,CAACrM,EAAYwM,IAEzB,IACI,EAAKnB,YAAYiB,KAAK9O,KAAKC,UAAU2O,IACvC,MAAOG,GACLN,EAAOM,S,+EASGE,G,4FAEZhQ,KAAKgO,oBAAoBiC,qBAAqB,IAAIC,sBAAsBF,EAAOG,QAAQjP,MAAMd,QAAQoM,O,cAG3GwD,EAAOI,WAAW3K,SAAQ,SAAC0I,GACvB,EAAKH,oBAAoBqC,gBAAgBlC,GAAWjN,MAAMd,QAAQoM,OAClE,EAAKoB,oBAAoBzH,KAAKgI,M,SAIdnO,KAAKgO,oBAAoBsC,eAAepP,MAAMd,QAAQoM,O,cAA1ExM,KAAKoO,O,gBACCpO,KAAKgO,oBAAoBuC,oBAAoBvQ,KAAKoO,QAAQlN,MAAMd,QAAQoM,O,+IAI9E,IAAIpI,EAAO,CAAEgK,OAAQpO,KAAKoO,OAAQgC,WAAYpQ,KAAK2N,eACnD3N,KAAKwQ,SAASpM,K,+BAOd,IAAIqM,EAAS,CACTC,iBAAkB1Q,KAAKgO,oBAAoB2C,wBAC3CC,kBAAmB5Q,KAAKgO,oBAAoB6C,yBAC5CT,WAAYpQ,KAAK4N,qBAErB,OAAO7M,KAAKC,UAAUyP,O,uBCTfK,E,kDA9KX,WAAYtS,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAE2R,UAAW,KAAMC,cAAe,MAC/C,EAAKC,oBAAsB,EAAKA,oBAAoBvS,KAAzB,gBAC3B,EAAKwS,gBAAkB,EAAKA,gBAAgBxS,KAArB,gBACvB,EAAKyS,sBAAwB,EAAKA,sBAAsBzS,KAA3B,gBAC7B,EAAK0S,wBAA0B,EAAKA,wBAAwB1S,KAA7B,gBAC/B,EAAK2S,uBAAyB,EAAKA,uBAAuB3S,KAA5B,gBAI9B,EAAK4S,aAAe,KAXL,E,gEAcCvN,GAChB,OAAQA,GACJ,IAAK,IAAK,MAAO,YACjB,IAAK,IAAK,MAAO,gBACjB,IAAK,IAAK,MAAO,gB,4CAKF,IAAD,OACduN,EAAe,IAAIrE,EACvBqE,EAAa/C,QAAU,WACnB,EAAK+C,aAAe,EAAKlS,MAAMmS,UAC/B,EAAKtR,SAAS,CAAEsR,UAAW,QAE/BD,EAAazD,oBAAsB,SAACC,GAChC,OAAQA,GACJ,IAAK,YAIL,IAAK,eAGL,IAAK,SAGL,IAAK,SAED,EAAK7N,SAAS,CAAE8Q,UAAWjD,MAMvCwD,EAAad,SAAb,uCAAwB,WAAOR,GAAP,iBAAAwB,EAAA,6DAEhBC,EAAeC,IAAKC,QAAQ5Q,KAAKC,UAAUgP,GAAS,CAAE4B,MAAO,EAAGvO,GAAI,WAFpD,SAKJoB,IAAOC,UAAU+M,GAAcvQ,MAAMd,QAAQoM,OALzC,OAKhB5H,EALgB,OAMpB,EAAK3E,SAAS,CAAE4R,SAAUjN,EAAKkN,cAAe,IAN1B,2CAAxB,sDAQA9R,KAAKC,SAAS,CAAEsR,UAAWD,EAAcQ,cAAe,M,sCAG5CL,GACZ,IAAIM,EAAMhR,KAAKyN,MAAMkD,IAAKM,QAAQP,EAAc,CAAEpO,GAAI,YACtDrD,KAAKZ,MAAMmS,UAAUU,gBAAgBF,K,qFAab3N,G,sFAEhB8N,EAAanR,KAAKyN,MAAMpK,IACZC,IAAO6N,EAAW5N,I,sBAAW6N,MAAM,sF,uBAChCnS,KAAKsR,aAAac,iBAAiBF,EAAW7N,I,OAA7DT,E,OACJ5D,KAAKC,SAAS,CAAE+Q,cAAepN,EAAQyO,wBAAyBH,EAAW5N,M,kDAE3EhE,MAAM,EAAD,I,oSASCN,KAAKsR,aAAagB,uBAAuBtS,KAAKZ,MAAM4R,cAAczN,WAAYvD,KAAKZ,MAAMiT,yB,OAC/F/R,MAAM,0BACNN,KAAKqR,yB,gDAEL/Q,MAAM,EAAD,I,8JAKTN,KAAKC,SAAS,CAAE+Q,cAAe,KAAMqB,wBAAyB,S,+BAGxD,IAAD,OACL,OACI,kBAACnQ,EAAA,EAAD,CAAKC,UAAU,WAAWK,IAAI,WACxBxC,KAAKZ,MAAM2R,WACT,kBAAC7O,EAAA,EAAD,KACI,qJACA,mJACA,kBAACQ,EAAA,EAAD,CAAQE,QAAS5C,KAAKiR,oBAAqBtO,MAAM,6BAChD3C,KAAKZ,MAAMmS,WACR,kBAAC,EAAD,CAAQzE,MAAM,8BAA8BC,QAAS,WAAQ,EAAK9M,SAAS,CAAEsR,UAAW,SACtD,IAA7BvR,KAAKZ,MAAM0S,eACR,6BACI,yBAAK3P,UAAU,WACX,kBAAC,EAAD,CAAWwJ,OAAQ3L,KAAKkR,gBAAiBvO,MAAM,yBAEnD,yBAAKR,UAAU,eACX,sEAIkB,IAA7BnC,KAAKZ,MAAM0S,eACR,6BACI,yBAAK3P,UAAU,WACTnC,KAAKZ,MAAMyS,UAAY,yBAAK1P,UAAU,UAAf,cACxBnC,KAAKZ,MAAMyS,UAAY,yBAAK5M,IAAKjF,KAAKZ,MAAMyS,SAAU9M,MAAM,OAAOG,IAAI,+CAE5E,yBAAK/C,UAAU,eACX,+EAQF,cAAzBnC,KAAKZ,MAAM2R,WACR,kBAAC7O,EAAA,EAAD,KACI,iDAC8B,OAA7BlC,KAAKZ,MAAM4R,eAA0B,kBAAC,EAAD,CAAWrF,OAAQ3L,KAAKmR,sBAAuBxO,MAAM,wBAC1F3C,KAAKZ,MAAM4R,eACR,kBAAC9O,EAAA,EAAD,KACI,4BAAKlC,KAAKZ,MAAM4R,cAAclM,QAA9B,KAAyC9E,KAAKZ,MAAM4R,cAAcnN,UAClE,kBAACpB,EAAA,EAAD,CAAM8P,KAAK,MAAM/P,IAAI,SAASxC,KAAKwS,oBAAoBxS,KAAKZ,MAAM4R,cAAcjN,aAChF,kBAACtB,EAAA,EAAD,CAAM8P,KAAK,MAAM/P,IAAI,SAAUxC,KAAKZ,MAAM4R,cAAcyB,UAAYzS,KAAKZ,MAAM4R,cAAc0B,OAAU,KAAO,yBAC9G,kBAACxQ,EAAA,EAAD,CAAKE,IAAI,SACL,kBAACM,EAAA,EAAD,CAAQC,MAAM,kBAAkBC,QAAS5C,KAAKoR,0BAC9C,kBAAC1O,EAAA,EAAD,CAAQC,MAAM,eAAYC,QAAS5C,KAAKqR,4BAMlC,iBAAzBrR,KAAKZ,MAAM2R,WACR,kBAAC7O,EAAA,EAAD,KACI,iEACA,+DACA,uBAAGC,UAAU,YAGK,WAAzBnC,KAAKZ,MAAM2R,WACR,kBAAC7O,EAAA,EAAD,KACI,iEACA,sEACA,kBAACQ,EAAA,EAAD,CAAQE,QAAS,WAAQ,EAAK3C,SAAS,CAAE8Q,UAAW,OAAS,EAAKE,uBAAyBtO,MAAM,mC,GAxKlGtE,IAAM6E,W,+BC2KdyP,G,WA7KX,aAQI,GARW,oBAGX3S,KAAK4S,UAAY5S,KAAK4S,UAAUlU,KAAKsB,MACrCA,KAAK6S,iBAAmB7S,KAAK6S,iBAAiBnU,KAAKsB,MACnDA,KAAK8S,cAAgB9S,KAAK8S,cAAcpU,KAAKsB,OAGxCwD,OAAOuP,UACR,MAAMZ,MAAM,4GAIhBnS,KAAKgT,wBAA0B,GAG/BhT,KAAKiT,U,sDAOE,IAAD,OACN7S,QAAQkO,MAAM,+BACd,IAAI4E,EAAU1P,OAAOuP,UAAUI,KAAK1S,IAAOtC,SAAU,GAErD+U,EAAQhF,iBAAiB,gBAAiBlO,KAAK4S,WAC/CM,EAAQhF,iBAAiB,WAAW,SAACkF,GACjChT,QAAQkO,MAAM,8BACd,EAAK+E,GAAKD,EAAGlT,OAAO4J,OACpB,EAAKkJ,wBAAwBvN,SAAQ,SAAC8J,GAClCA,EAAQ,EAAK8D,UAGrBH,EAAQhF,iBAAiB,SAAS,SAACkF,GAC/BhT,QAAQoM,MAAM,mBAAqB4G,EAAGlT,OAAOoT,gB,gCAS3CvT,GACNC,KAAKqT,GAAKtT,EAAMG,OAAO4J,OAGvB9J,KAAKqT,GAAGE,kBAAkB,UAAW,CAAEC,QAAS,iB,gCAOzC,IAAD,OACN,OAAO,IAAIlE,SAAQ,SAACC,GACZ,EAAK8D,GACL9D,EAAQ,EAAK8D,IAEb,EAAKL,wBAAwB7M,KAAKoJ,Q,gFAQvBtL,G,kGAEAjE,KAAKyT,U,OAAhBJ,E,QAEAK,EAAcL,EAAGM,YAAY,UAAW,aAAaD,YAAY,YACzDE,QAEZ3P,EAAQwB,SAAQ,SAAC7B,GACb8P,EAAYG,IAAIjQ,M,gDAGpBxD,QAAQoM,MAAR,MACAlM,MAAM,oD,sJAiBG,IAAD,OACZ,OAAO,IAAIgP,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAgC,EAAA,sEACA,EAAKiC,UAAUvS,MAAMd,QAAQoM,OAD7B,UACX6G,EADW,gDAEC7D,KAFD,OAGXkE,EAAcL,EAAGM,YAAY,UAAW,YAAYD,YAAY,YAChER,EAAUQ,EAAYI,UAClBC,QAAUvE,EAClB0D,EAAQc,UAAY,SAAUjU,GAC1B,IAAIkE,EAAUlE,EAAMG,OAAO4J,OAC3B,OAAOyF,EAAQtL,IARJ,2CAAZ,2D,gCAkBDV,GAAa,IAAD,OAClB,OAAO,IAAI+L,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAgC,EAAA,sEACA,EAAKiC,UAAUvS,MAAMd,QAAQoM,OAD7B,UACX6G,EADW,gDAEC7D,KAFD,OAGXkE,EAAcL,EAAGM,YAAY,UAAW,YAAYD,YAAY,YAChER,EAAUQ,EAAY/E,IAAIpL,IACtBwQ,QAAUvE,EAClB0D,EAAQc,UAAY,SAAUjU,GAC1B,IAAI6D,EAAS7D,EAAMG,OAAO4J,OAC1B,OAAKlG,EACE2L,EAAQ3L,GADK4L,EAAO,2BARhB,2CAAZ,2D,uCAqBMjM,EAAYiB,GAAmB,IAAD,OAC3C,OAAO,IAAI8K,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAgC,EAAA,sEACA,EAAKiC,UAAUvS,MAAMd,QAAQoM,OAD7B,UACX6G,EADW,gDAEC7D,KAFD,OAGXkE,EAAcL,EAAGM,YAAY,UAAW,aAAaD,YAAY,YACjER,EAAUQ,EAAY/E,IAAIpL,IACtBwQ,QAAUvE,EAClB0D,EAAQc,UAAY,SAACjU,GAEjB,IAAI6D,EAAS7D,EAAMG,OAAO4J,OAC1B,IAAKlG,EAAQ,OAAO4L,EAAO,+BAG3B,IAAIyE,EAAgBzP,EAAmBZ,EAAOC,SAAWD,EAAOkB,QAAUlB,EAAOG,WAGjF,GAFemQ,KAAKC,MAAMC,KAAKH,KAEd1Q,EAAY,OAAOiM,EAAO,iEAG3C,IAAK5L,EAAO6O,QAAS,OAAOjD,EAAO,mCACnC,GAAI5L,EAAO8O,OAAQ,OAAOlD,EAAO,sCAEjC5L,EAAO8O,QAAS,EAGhB,IAAI2B,EAAgBX,EAAYY,IAAI1Q,GACpCyQ,EAAcN,QAAUvE,EACxB6E,EAAcL,UAAYzE,GA1Bf,2CAAZ,6D,KC3ITgF,G,kDAIF,WAAY/V,GAAQ,IAAD,EAMf,GANe,qBACf,cAAMA,IACDY,MAAQ,CAAEoV,aAAa,EAAOvQ,QAAS,IAC5C,EAAKwQ,iBAAmB,EAAKA,iBAAiB/V,KAAtB,gBACxB,EAAKgW,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,YAAc,EAAKA,YAAYjW,KAAjB,iBACd,EAAKF,MAAMoW,kBAAmB,MAAM,IAAIzC,MAAM,6BANpC,OAOf,EAAKuC,cAPU,E,gEAUC3Q,GAChB,OAAQA,GACJ,IAAK,IAAK,MAAO,YACjB,IAAK,IAAK,MAAO,gBACjB,IAAK,IAAK,MAAO,gB,oKASjB8Q,EAAM7U,KAAKxB,MAAMoW,kB,SAEApU,MAAMC,IAAOxC,iBAAmB,mBAAoB,CACrEyC,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARbc,E,QAUUC,G,yCACHd,MAAM,uD,uBAGGa,EAASE,OAAOH,MAAMd,QAAQC,K,UAA9C4D,E,iDAEiB3D,MAAM,uD,QAE3BuU,EAAIhC,iBAAiB5O,GAErBjE,KAAK0U,c,oQAQDG,EAAM7U,KAAKxB,MAAMoW,kB,SACDC,EAAI/B,gBAAgB5R,MAAMd,QAAQoM,O,UAAlDvI,E,wDAGJjE,KAAKC,SAAS,CAAEgE,UAASuQ,YAAcvQ,EAAQ+B,OAAS,I,wIAGhDjG,GACCyD,OAAOsR,QAAQ,oJAEpB9U,KAAKC,SAAS,CAAEuU,YAAazU,EAAMG,OAAOkI,Y,+BAIxC,IAAD,OACL,OACI,kBAAClG,EAAA,EAAD,CAAKC,UAAU,oBAAoBK,IAAI,SAASJ,IAAI,SAChD,kBAACF,EAAA,EAAD,CAAKe,UAAU,MAAMb,IAAI,SACrB,kBAACM,EAAA,EAAD,CAAQC,MAAM,uDAAoDC,QAAS5C,KAAKyU,iBAAkBM,SAAU/U,KAAKZ,MAAMoV,cACvH,kBAACrM,EAAA,EAAD,CAAUxF,MAAM,wBAAqBqS,QAAQ,EAAMjS,SAAU/C,KAAK2U,YAAavM,QAASpI,KAAKZ,MAAMoV,eAEvG,kBAACS,GAAA,EAAD,CACIC,WAAY,SAACtR,GAAa,OAAO,uBAAGkC,IAAKlC,EAAOL,WAAa,KAAMK,EAAOkB,SAAW,SAApD,KAAgElB,EAAOC,UAAY,SAAnF,MAAgG,EAAK2O,oBAAoB5O,EAAOG,YAAhI,IAA8IH,EAAOmE,iBAAmB,oBAAsB,KAC/NoN,aAAc,SAACvR,GAAa,OAAO,0BAAMkC,IAAKlC,EAAOL,WAAa,KAAMK,EAAO6O,QAAU,YAAW,cAAjE,MAAgF7O,EAAO8O,OAAS,UAAY,cAC/ItO,KAAMpE,KAAKZ,MAAM6E,e,GAjFL5F,IAAM6E,WAAhCqR,GAEKpR,YAAc/E,EAsFVmW,UC2MAa,G,WApSX,aAAe,oBAEXpV,KAAKqV,qBAAuBrV,KAAKqV,qBAAqB3W,KAAKsB,MAC3DA,KAAKsV,uBAAyBtV,KAAKsV,uBAAuB5W,KAAKsB,MAC/DA,KAAKuV,kBAAoBvV,KAAKuV,kBAAkB7W,KAAKsB,MACrDA,KAAKwV,yBAA2BxV,KAAKwV,yBAAyB9W,KAAKsB,MACnEA,KAAKyV,wBAA0BzV,KAAKyV,wBAAwB/W,KAAKsB,MACjEA,KAAK0V,sBAAwB1V,KAAK0V,sBAAsBhX,KAAKsB,MAC7DA,KAAK2V,eAAiB3V,KAAK2V,eAAejX,KAAKsB,MAG/CA,KAAK4V,KAAO5V,KAAK6V,aAUjB7V,KAAK6N,oBAAsB,SAAUC,KAOrC9N,KAAKuO,QAAU,aAQfvO,KAAK8V,QAAU,SAAU9F,KAiBzBhQ,KAAK+V,YAAc,SAAUxS,EAAYyS,KAkBzChW,KAAKiW,mBAAqB,SAAU1S,EAAYiB,EAAkBwR,KAGlEhW,KAAKkW,iB,6DAYLlW,KAAK2N,cAAgB,GAErB3N,KAAKgO,oBAAsB,IAAIC,kBALf,MAMhBjO,KAAKgO,oBAAoBE,iBAAiB,eAAgBlO,KAAKqV,sBAE/DrV,KAAKgO,oBAAoBE,iBAAiB,wBAAyBlO,KAAKyV,yBAExEzV,KAAK4O,YAAc5O,KAAKgO,oBAAoBmI,kBAAkB,kBATvC,MAUvBnW,KAAK4O,YAAYV,iBAAiB,UAAWlO,KAAK2V,gBAClD3V,KAAK4O,YAAYV,iBAAiB,OAAQlO,KAAKsV,wBAC/CtV,KAAK4O,YAAYV,iBAAiB,QAASlO,KAAKwV,0BAEhDxV,KAAKoW,gB,2CASYrW,GACjBC,KAAK2N,cAAcxH,KAAKpG,EAAMoO,WAC1BnO,KAAKmQ,QAAUnQ,KAAK6E,QACpBwJ,WAAWrO,KAAKuV,kBAAmB,O,8CAWnBxV,GACpBK,QAAQkO,MAAMvO,GACd,IAAI+N,EAAkB/N,EAAMG,OAAO4N,gBAkBnC9N,KAAK6N,oBAAoBC,K,6CASN/N,GACnBK,QAAQkO,MAAMvO,GACdC,KAAKuO,UACLvO,KAAK4O,YAAYiB,KAAK,mB,+CAQD9P,GACrBK,QAAQkO,MAAM,sBAAuBvO,K,qCAQ1BA,GAAQ,IAEf4P,EAFc,OAClBvP,QAAQkO,MAAM,oBAAqBvO,EAAMqE,MAEzC,IACIuL,EAAM5O,KAAKyN,MAAMzO,EAAMqE,MACzB,MAAO0L,GAGL,OAFA1P,QAAQoM,MAAMsD,QACd1P,QAAQkO,MAAM,eAAgBvO,EAAMqE,MAwBxC,OAAQuL,EAAI3N,SACR,IAAK,eACkB,cAAf2N,EAAIjP,OACJV,KAAK+V,YAAYpG,EAAIC,OAAO,IAAI,SAAChM,EAAQyS,GACrC,IAAIC,EAAY,CACZ7H,MAAOkB,EAAIlB,MACX3E,OAAQlG,EACR4I,MAAO6J,GAEX,IACI,EAAKzH,YAAYiB,KAAK9O,KAAKC,UAAUsV,IACvC,MAAO9J,GACLpM,QAAQoM,MAAMA,OAGA,qBAAfmD,EAAIjP,QACXV,KAAKiW,mBAAmBtG,EAAIC,OAAO,GAAID,EAAIC,OAAO,IAAI,SAAC2G,EAASF,GAC5D,IAAIC,EAAY,CACZ7H,MAAOkB,EAAIlB,MACX3E,OAAQyM,EACR/J,MAAO6J,GAEX,IACI,EAAKzH,YAAYiB,KAAK9O,KAAKC,UAAUsV,IACvC,MAAO9J,GACLpM,QAAQoM,MAAMA,U,mCAelC,IAAIsC,GAAK,IAAIvI,MAAOwI,UAMpB,MALW,uCAAuCpL,QAAQ,SAAS,SAAUqL,GACzE,IAAIC,GAAKH,EAAqB,GAAhBI,KAAKC,UAAiB,GAAK,EAEzC,OADAL,EAAKI,KAAKE,MAAMN,EAAK,KACP,MAANE,EAAYC,EAAS,EAAJA,GAAgBI,SAAS,S,8JAUnCrP,KAAKgO,oBAAoBoI,cAAclV,MAAMd,QAAQoM,O,cAAxExM,KAAKmQ,M,gBACCnQ,KAAKgO,oBAAoBuC,oBAAoBvQ,KAAKmQ,OAAOjP,MAAMd,QAAQoM,O,gQASzEpI,EAAO,CAAE+L,MAAOnQ,KAAKmQ,MAAOC,WAAYpQ,KAAK2N,eACjD3N,KAAK8V,QAAQ1R,G,2LAeW4L,G,4FAElBhQ,KAAKgO,oBAAoBiC,qBAAqB,IAAIC,sBAAsBF,EAAO5B,SAASlN,MAAMlB,KAAKwW,a,OAGzGxG,EAAOI,WAAW3K,SAAQ,SAAC0I,GACvB,EAAKH,oBAAoBqC,gBAAgBlC,GAAWjN,MAAM,EAAKsV,gB,8GCzM5DC,G,kDA/EX,WAAYjY,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GACb,EAAKsX,0BAA4B,EAAKA,0BAA0BhY,KAA/B,gBACjC,EAAKwS,gBAAkB,EAAKA,gBAAgBxS,KAArB,gBAJR,E,4DAOH+S,GACZ,IAAIzB,EAASjP,KAAKyN,MAAMkD,IAAKM,QAAQP,EAAc,CAAEpO,GAAI,YACzDrD,KAAKZ,MAAMuX,WAAWjB,sBAAsB1F,K,kDAMnB,IAAD,OACpB4G,EAAqB,IAAIxB,GAC7BwB,EAAmBrI,QAAU,WACzB,EAAKtO,SAAS,CAAE0W,WAAY,OAC5B,EAAKnY,MAAMqY,MAAMD,IAErBA,EAAmBd,QAAnB,uCAA6B,WAAO9F,GAAP,iBAAAwB,EAAA,6DAErBC,EAAeC,IAAKC,QAAQ5Q,KAAKC,UAAUgP,GAAS,CAAE4B,MAAO,EAAGvO,GAAI,WAF/C,SAKToB,IAAOC,UAAU+M,GAAcvQ,MAAMd,QAAQoM,OALpC,OAKrB5H,EALqB,OAMzB,EAAK3E,SAAS,CAAE6W,UAAWlS,IANF,2CAA7B,sDAQA5E,KAAKC,SAAS,CAAE0W,WAAYC,EAAoBG,WAAY,M,+BAGtD,IAAD,OACL,OACI,kBAAC7U,EAAA,EAAD,CAAKC,UAAU,sBAAsBK,IAAI,UACrC,2CACkBxC,KAAKxB,MAAMwY,QAAQhR,OADrC,4BAGA,kBAACiP,GAAA,EAAD,CACIC,WAAY,SAAC+B,GAAU,OAAO,uBAAGnR,IAAKmR,EAAIrB,KAAO,KAAnB,IAA0BqB,EAAIrB,KAA9B,MAAuCqB,EAAIjJ,oBAAoBF,gBAA/D,MAC9BqH,aAAc,SAAC8B,GAAU,OAAO,0BAAMnR,IAAKmR,EAAIrB,KAAO,KAAtB,sBAChCsB,YAAalX,KAAKxB,MAAM2Y,YACxB/S,KAAMpE,KAAKxB,MAAMwY,UAErB,kBAACtU,EAAA,EAAD,CAAQE,QAAS5C,KAAK0W,0BAA2B/T,MAAM,+BACtD3C,KAAKZ,MAAMuX,YACR,kBAAC,EAAD,CAAQ7J,MAAM,qCAAkCC,QAAS,WAAQ,EAAK9M,SAAS,CAAE0W,WAAY,SAC9D,IAA1B3W,KAAKZ,MAAM2X,YACR,6BACI,yBAAK5U,UAAU,yBACTnC,KAAKZ,MAAM0X,WAAa,yBAAK3U,UAAU,UAAf,cACzBnC,KAAKZ,MAAM0X,WAAa,yBAAK7R,IAAKjF,KAAKZ,MAAM0X,UAAW/R,MAAM,OAAOG,IAAI,+CAE9E,yBAAK/C,UAAU,6BACX,kEAEJ,yBAAKA,UAAU,wBACX,kBAACO,EAAA,EAAD,CAAQE,QAAS,WAAQ,EAAK3C,SAAS,CAAE8W,WAAY,KAASpU,MAAM,aAIrD,IAA1B3C,KAAKZ,MAAM2X,YACR,6BACI,yBAAK5U,UAAU,yBACX,kBAAC,EAAD,CAAWwJ,OAAQ3L,KAAKkR,gBAAiBvO,MAAM,yBAEnD,yBAAKR,UAAU,6BACX,mF,GArEF9D,IAAM6E,W,oBCPlCkU,G,kDAEF,WAAY5Y,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GACb,EAAKiY,cAAgB,EAAKA,cAAc3Y,KAAnB,gBAHN,E,0DAMLoH,GACV,IAAIwR,EAAOtX,KAAKxB,MAAM+Y,QAAQ5I,IAAI7I,GAClC,OAAKwR,EAEDA,EACO,kBAAC7U,EAAA,EAAD,CAAMqD,IAAKA,GAAX,iBADX,EADW,kBAACrD,EAAA,EAAD,CAAMqD,IAAKA,GAAX,oB,+BAMX,IAAI0R,EAAU,GAwCd,OAvCkC,IAA9BxX,KAAKxB,MAAMiZ,iBACXD,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAKM,IAAI,SAASsD,IAAI,SAC/B,kBAACrD,EAAA,EAAD,CAAMiV,UAAU,SAASC,OAAO,OAAOpF,KAAK,WAA5C,sDAGA,kBAACrQ,EAAA,EAAD,CAAKM,IAAI,WACT,kBAACC,EAAA,EAAD,2IAIA,kBAACA,EAAA,EAAD,CAAMiV,UAAU,UAAhB,gEAK0B,IAA9B1X,KAAKxB,MAAMiZ,iBACXD,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAKM,IAAI,SAASsD,IAAI,OAC/B,kBAACrD,EAAA,EAAD,CAAMiV,UAAU,UAAhB,gMAORF,EAAQ,GACJ,kBAACtV,EAAA,EAAD,KACI,kBAAC+S,GAAA,EAAD,CACIC,WAAW,iBACXC,aAAa,YACb/Q,KAAM,CACF,CAAEqT,eAAgB,kBAAChV,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,OAAO7R,IAAI,UAArC,yBAA4E8R,UAAW,kBAACnV,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,OAAO7R,IAAI,iBAArC,YACzG,CAAE2R,eAAgB,kBAAChV,EAAA,EAAD,CAAMkV,OAAO,SAAS7R,IAAI,YAA1B,gCAA0E8R,UAAW5X,KAAKqX,cAAc,OAC1H,CAAEI,eAAgB,kBAAChV,EAAA,EAAD,CAAMkV,OAAO,SAAS7R,IAAI,sBAA1B,8CAA+F8R,UAAW5X,KAAKqX,cAAc,OAC/I,CAAEI,eAAgB,kBAAChV,EAAA,EAAD,CAAMkV,OAAO,SAAS7R,IAAI,YAA1B,kCAA4E8R,UAAW5X,KAAKqX,cAAc,OAC5H,CAAEI,eAAgB,kBAAChV,EAAA,EAAD,CAAMkV,OAAO,SAAS7R,IAAI,qBAA1B,iCAAoF8R,UAAW5X,KAAKqX,cAAc,OACpI,CAAEI,eAAgB,kBAAChV,EAAA,EAAD,CAAMkV,OAAO,SAAS7R,IAAI,eAA1B,4EAAsH8R,UAAW5X,KAAKqX,cAAc,WAI/KG,M,GAzDYnZ,IAAM6E,WA6D3B2U,G,kDAEF,WAAYrZ,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAE0Y,aAAc,IAC7B,EAAKC,wBAA0B,EAAKA,wBAAwBrZ,KAA7B,gBAHhB,E,0MAQM8B,MAAMC,IAAOxC,iBAAmB,wBAAyB,CAC1EyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBgX,cAAehY,KAAKZ,MAAM0Y,iBAG/B5W,MAAMd,QAAQC,K,WAXbc,E,QAaUC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QACA,M,QACA,M,gDAAKtB,MAAMgB,EAASC,S,6BAErBjB,MAAMgB,EAASC,S,QAIvBJ,EAASC,KACLsK,EAAUvK,EAASE,OAAOH,MAAMd,QAAQC,KAC5CL,KAAKxB,MAAMyZ,iBAAiBvM,EAAQwM,gBACpClY,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,c,sIAIT,IAAD,OAeL,OAbU,kBAAClW,EAAA,EAAD,KACN,kBAACA,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,sDAEJ,kBAACzV,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACK,EAAA,EAAD,CACIC,YAAY,yBACZ3C,MAAOH,KAAKZ,MAAM0Y,aAClB/U,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE6X,aAAc/X,EAAMG,OAAOC,YAG1E,kBAACuC,EAAA,EAAD,CAAQE,QAAS5C,KAAK+X,wBAAyBpV,MAAM,uB,GAvDzCtE,IAAM6E,WA6DxBmV,G,kDAEF,WAAY7Z,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAEkZ,cAAe,GAAIC,cAAe,IACjD,EAAKC,oBAAsB,EAAKA,oBAAoB9Z,KAAzB,gBAC3B,EAAK+Z,qBAAuB,EAAKA,qBAAqB/Z,KAA1B,gBAC5B,EAAKga,mBAAqB,EAAKA,mBAAmBha,KAAxB,gBALX,E,qMASM8B,MAAMC,IAAOxC,iBAAmB,qBAAsB,CACvEyC,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARbc,E,QAUUC,G,gCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,OACEhB,MAAMgB,EAASC,S,wBAGVJ,EAASE,OAAOH,MAAMd,QAAQC,K,WAA3C+D,E,0DAIJhE,QAAQC,IAAI+D,G,2QAKR8P,EAAOyE,EAAQ,KACR,IAAIzE,EAAK,IAAIA,EAAK0E,UAAUC,aAAa7Y,KAAKxB,MAAMsZ,eAC1DgB,IAAIC,WAAW,8CAA8C,SAACvM,EAAOrL,GAUtE,GATIqL,GACApM,QAAQC,IAAI,6CAEXc,IACDf,QAAQC,IAAI,6CACZC,MAAMa,EAASI,UAEnBnB,QAAQC,IAAIc,GAERA,EAAU,CACV,IAAI6X,EAAU7X,EACdf,QAAQC,IAAI2Y,GACZ,EAAK/Y,SAAS,CAAEqY,cAAeU,Q,oRAQlBxY,MAAMC,IAAOxC,iBAAmB,wBAAyB,CAC1EyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,sBAErBK,MAAMd,QAAQC,K,WAPbc,E,QASUC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QACA,M,QACA,M,gDAAKtB,MAAMgB,EAASC,S,6BAErBjB,MAAMgB,EAASC,S,QAIvBJ,EAASC,KACTpB,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,c,sIAIT,IAAD,OAgBL,OAdU,kBAAClW,EAAA,EAAD,KACN,kBAACA,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,0DAEJ,kBAACzV,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACK,EAAA,EAAD,CACIC,YAAY,yBACZ3C,MAAOH,KAAKZ,MAAM0Y,aAClB/U,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE6X,aAAc/X,EAAMG,OAAOC,WAEtE,kBAACuC,EAAA,EAAD,CAAQC,MAAM,OAAOC,QAAS5C,KAAK0Y,sBAEvC,kBAAChW,EAAA,EAAD,CAAQE,QAAS5C,KAAK+X,wBAAyBpV,MAAM,uB,GAlG/BtE,IAAM6E,WA0GlC+V,G,kDAEF,WAAYza,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAEsC,MAAO,GAAIC,SAAU,IACpC,EAAKuX,qBAAuB,EAAKA,qBAAqBxa,KAA1B,gBAHb,E,qMAQM8B,MAAMC,IAAOxC,iBAAmB,mBAAoB,CACrEyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBU,MAAO1B,KAAKZ,MAAMsC,MAClBC,SAAU3B,KAAKZ,MAAMuC,aAE1BT,MAAMd,QAAQC,K,WAXbc,E,QAaUC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QACA,M,QACA,M,gDAAKtB,MAAMgB,EAASC,S,6BAErBjB,MAAMgB,EAASC,S,QAIvBJ,EAASC,KACTpB,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,c,sIAIT,IAAD,OAwBL,OAtBU,kBAAClW,EAAA,EAAD,KACN,kBAACA,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,8CAEJ,kBAACzV,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,kBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,SACZ3C,MAAOH,KAAKZ,MAAMsC,MAClBqB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEyB,MAAO3B,EAAMG,OAAOC,YAGnE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,aACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,WACZ3C,MAAOH,KAAKZ,MAAMuC,SAClBoB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE0B,SAAU5B,EAAMG,OAAOC,YAGtE,kBAACuC,EAAA,EAAD,CAAQE,QAAS5C,KAAKkZ,qBAAsBvW,MAAM,uB,GA9D1BtE,IAAM6E,WAoEpCiW,G,kDAEF,WAAY3a,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAEga,KAAM,GAAI7U,KAAM,GAAI5C,SAAU,GAAI0R,GAAI,GAAIgG,KAAM,IAC/D,EAAKC,qBAAuB,EAAKA,qBAAqB5a,KAA1B,gBAHb,E,qMAQM8B,MAAMC,IAAOxC,iBAAmB,kBAAmB,CACpEyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBoY,KAAMpZ,KAAKZ,MAAMga,KACjB7U,KAAMvE,KAAKZ,MAAMmF,KACjB5C,SAAU3B,KAAKZ,MAAMuC,SACrB4X,SAAUvZ,KAAKZ,MAAMiU,GACrBgG,KAAMrZ,KAAKZ,MAAMia,SAEtBnY,MAAMd,QAAQC,K,WAdbc,E,QAeUC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QACA,M,QACA,M,gDAAKtB,MAAMgB,EAASC,S,6BAErBjB,MAAMgB,EAASC,S,QAGvBJ,EAASC,KACTpB,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,c,sIAIT,IAAD,OAkDL,OAhDU,kBAAClW,EAAA,EAAD,KACN,kBAACA,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,iCAEJ,kBAACzV,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,mBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,yCACZ3C,MAAOH,KAAKZ,MAAMga,KAClBrW,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEmZ,KAAMrZ,EAAMG,OAAOC,YAGlE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,SACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,+BACZ3C,MAAOH,KAAKZ,MAAMia,KAClBtW,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEoZ,KAAMtZ,EAAMG,OAAOC,YAGlE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,aACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,mCACZ3C,MAAOH,KAAKZ,MAAMmF,KAClBxB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEsE,KAAMxE,EAAMG,OAAOC,YAGlE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,aACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,mCACZ3C,MAAOH,KAAKZ,MAAMuC,SAClBoB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE0B,SAAU5B,EAAMG,OAAOC,YAGtE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,eACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,oCACZ3C,MAAOH,KAAKZ,MAAMiU,GAClBtQ,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEoT,GAAItT,EAAMG,OAAOC,YAGhE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACE,EAAA,EAAD,CAAQE,QAAS5C,KAAKsZ,qBAAsB3W,MAAM,yB,GAxFlCtE,IAAM6E,WA+FhCsW,G,kDAEF,WAAYhb,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAAEga,KAAM,GAAIC,KAAM,KAAMI,YAAY,EAAMlV,KAAM,GAAI5C,SAAU,GAAI+X,aAAc,GAAIC,eAAgB,IACjH,EAAKC,uBAAyB,EAAKA,uBAAuBlb,KAA5B,gBAHf,E,uMAMM8B,MAAMC,IAAOxC,iBAAmB,oBAAqB,CACtEyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,oBAGpBC,KAAMC,KAAKC,UAAU,CACjBoY,KAAMpZ,KAAKZ,MAAMga,KACjBC,KAAMrZ,KAAKZ,MAAMia,KACjBQ,OAAQ7Z,KAAKZ,MAAMqa,WACnBlV,KAAMvE,KAAKZ,MAAMmF,KACjB5C,SAAU3B,KAAKZ,MAAMuC,SACrBmY,aAAc9Z,KAAKZ,MAAMsa,aACzBK,uBAAwB/Z,KAAKZ,MAAMua,mBAExCzY,MAAMd,QAAQC,K,WAjBbc,E,QAmBUC,G,iCACaD,EAASE,OAAOH,MAAMd,QAAQC,K,OAA/CiB,E,YACEH,EAASS,O,OACR,M,QACA,M,QACA,M,gDAAKtB,MAAMgB,EAASC,S,6BAErBjB,MAAMgB,EAASC,S,QAIvBJ,EAASC,KACTpB,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,c,sIAIT,IAAD,OAkEL,OAhEU,kBAAClW,EAAA,EAAD,KACN,kBAACO,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,kCACA,kBAACzV,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,oBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,0CACZ3C,MAAOH,KAAKZ,MAAM4a,UAClBjX,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEmZ,KAAMrZ,EAAMG,OAAOC,YAGlE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,UACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,+BACZ3C,MAAOH,KAAKZ,MAAMia,KAClBtW,SACE,SAAChD,GAAY,EAAKE,SAAS,CAAEoZ,KAAMtZ,EAAMG,OAAOC,YAG1D,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,uBACA,kBAACsC,GAAA,EAAD,CACIC,QAAS,CAAC,OAAQ,SAClB/Z,MAAOH,KAAKZ,MAAMqa,WAClB1W,SAAU,YAAuB,EAApB5C,MAAqB,IAAdga,EAAa,EAAbA,OAAe,EAAKla,SAAS,CAAEwZ,WAAYU,QAGvE,kBAACjY,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,cACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,mCACZ3C,MAAOH,KAAKZ,MAAMmF,KAClBxB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEsE,KAAMxE,EAAMG,OAAOC,YAIlE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,cACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,mCACZ3C,MAAOH,KAAKZ,MAAMuC,SAClBoB,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE0B,SAAU5B,EAAMG,OAAOC,YAGtE,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,kBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,wCACZ3C,MAAOH,KAAKZ,MAAMsa,aAClB3W,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAEyZ,aAAc3Z,EAAMG,OAAOC,YAG1E,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,4BACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,0CACZ3C,MAAOH,KAAKZ,MAAMua,eAClB5W,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE0Z,eAAgB5Z,EAAMG,OAAOC,YAG5E,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,SACL,kBAACE,EAAA,EAAD,CAAQE,QAAS5C,KAAK4Z,uBAAwBjX,MAAM,yB,GA3GlCtE,IAAM6E,WAmHlCkX,G,kDAEF,WAAY5b,GAAQ,IAAD,8BACf,cAAMA,IA6BV6b,aAAe,SAACjW,GACZ,IAAIkW,EAAQ,GACZla,QAAQC,IAAI,+BACZD,QAAQC,IAAI+D,GACZhE,QAAQC,IAAI,+BAEZ+D,EAAKqB,SAAQ,SAACrB,GACVhE,QAAQC,IAAI+D,EAAKA,MACjBkW,EAAMnU,KAAK/B,EAAKA,SAGpB,EAAKnE,SAAS,CAAEsa,iBAAiB,EAAMC,cAAeF,KAzCvC,EA4CnBG,cAAgB,SAAClO,EAAKmO,EAAMC,EAAWC,GACnCxa,QAAQC,IAAIkM,IA7CG,EAgDnBsO,mBAAqB,SAACzW,GAClBhE,QAAQC,IAAI,+BACZD,QAAQC,IAAI+D,GACZhE,QAAQC,IAAI,gCAjDZ,EAAKjB,MAAQ,CAAEmb,iBAAiB,EAAOO,UAAU,EAAON,cAAe,GAAIO,SAAU,MAAOhV,KAAM,IAClG,EAAKiV,mBAAqB,EAAKA,mBAAmBtc,KAAxB,gBAHX,E,iMAQM8B,MAAMC,IAAOxC,iBAAmB,GAAI,CACrDyC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,6gBAEtBK,MAAMd,QAAQC,K,UARbc,E,wEAYaA,EAASE,OAAOH,MAAMd,QAAQC,K,iBAErCkB,Q,mDAEVvB,KAAKC,SAAS,CAAE6a,UAAU,IAC1B9a,KAAKxB,MAAM2Z,qBAAqB,MAChCnY,KAAKxB,MAAM4Z,a,sIA8BX,IACI6C,EAAYjb,KAAKZ,MAAMob,cA4C3B,OA3CU,kBAACtY,EAAA,EAAD,KACN,kBAACA,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAM8P,KAAK,QAAQoF,OAAO,QAA1B,oCAGF3X,KAAKZ,MAAMmb,kBAAoBva,KAAKZ,MAAM0b,UACxC,kBAAC5Y,EAAA,EAAD,CAAKC,UAAU,YACX,kBAACD,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,gEACA,8BAAM,kBAACA,EAAA,EAAD,CAAMkV,OAAO,QAAb,YAAmC,kBAAClV,EAAA,EAAD,sBACzC,8BAAM,kBAACA,EAAA,EAAD,CAAMkV,OAAO,QAAb,iBAAwC,kBAAClV,EAAA,EAAD,2CAElD,kBAAC,KAAD,CACIyY,OAAQlb,KAAKqa,aACbc,QAASnb,KAAKya,cACdzK,OAAQ,CACJoL,UAAW,IACXC,QAAQ,GAEZC,iBAAe,EACfC,aAAcvb,KAAK6a,oBAEnB,0EAKX7a,KAAKZ,MAAMmb,kBAAoBva,KAAKZ,MAAM0b,UACvC,kBAAC7F,GAAA,EAAD,CAAM9S,UAAU,aAAaK,IAAI,SAC7B0S,WAAW,SACXC,aAAa,OACb/Q,KAAM6W,IAGd,kBAAC/Y,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACE,EAAA,EAAD,CAAQE,QAAS5C,KAAKgb,mBAAoBrY,MAAM,oBAGnD3C,KAAKZ,MAAMmb,iBAAmBva,KAAKZ,MAAM0b,UACtC,kBAACrY,EAAA,EAAD,2C,GAnGepE,IAAM6E,WAwLtBsY,G,kDA3EX,WAAYhd,GAAQ,IAAD,8BACf,cAAMA,IACD4Z,WAAa,EAAKA,WAAW1Z,KAAhB,gBAClB,EAAKyZ,qBAAuB,EAAKA,qBAAqBzZ,KAA1B,gBAC5B,EAAKuZ,iBAAmB,EAAKA,iBAAiBvZ,KAAtB,gBACxB,EAAKU,MAAQ,CACTqY,eAAgB,EAChBF,QAAS,IAAI7J,IAAI,CAAC,CAAC,MAAM,GAAQ,CAAC,MAAM,GAAQ,CAAC,MAAM,GAAQ,CAAC,MAAM,GAAQ,CAAC,MAAM,GAAQ,CAAC,MAAM,KACpG+N,cAAe,GACf3D,aAAc,IATH,E,iEAiBEhS,GACjB9F,KAAKC,SAASD,KAAKZ,MAAMmY,QAAQ7H,IAAI5J,GAAK,M,uCAG7B4F,GACb1L,KAAKC,SAAS,CAAEwb,cAAe/P,M,sCAGnBoM,GACZ9X,KAAKC,SAAS,CAAE6X,aAAcA,M,mCAI9B,IAAI3X,EACAH,KAAKZ,MAAMqY,eAAiB,IAC5BtX,EAAQ,GAERH,KAAKZ,MAAMqY,eAAiB,IAC5BtX,EAAQ,EAAIH,KAAKZ,MAAMqY,gBAE3BzX,KAAKC,SAAS,CAAEwX,eAAgBtX,M,+BAKhC,OACI,kBAAC+B,EAAA,EAAD,CAAKC,UAAU,uBAAuBc,UAAU,SAASb,IAAI,SAASI,IAAI,SAASkZ,MAAM,UACtD,IAA9B1b,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAcF,QAASvX,KAAKZ,MAAMmY,QAASE,eAAgBzX,KAAKZ,MAAMqY,iBAE3E,IAA9BzX,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAmBU,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MACxGoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAuBU,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MAC5GoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAqBU,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MAC1GoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAWQ,iBAAkBjY,KAAKiY,iBAAiBvZ,KAAKsB,MAAOmY,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MACpJoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAqBK,aAAc9X,KAAKZ,MAAM0Y,aAAc2D,cAAezb,KAAKZ,MAAMqc,cAAetD,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MAC1LoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAkBU,qBAAsBnY,KAAKmY,qBAAqBzZ,KAAKsB,MACvGoY,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAAcF,QAASvX,KAAKZ,MAAMmY,QAASE,eAAgBzX,KAAKZ,MAAMqY,eACtGW,WAAYpY,KAAKoY,WAAW1Z,KAAKsB,QAEN,IAA9BA,KAAKZ,MAAMqY,gBAAwB,kBAAC/U,EAAA,EAAD,CAAQE,QAAS5C,KAAKoY,WAAYzV,MAAM,2BAC7C,IAA9B3C,KAAKZ,MAAMqY,gBAAwBzX,KAAKZ,MAAMqY,eAAiB,GAAK,kBAAC/U,EAAA,EAAD,CAAQE,QAAS5C,KAAKoY,WAAYzV,MAAM,4BAC9E,IAA9B3C,KAAKZ,MAAMqY,gBAAwB,kBAACvV,EAAA,EAAD,CAAKM,IAAI,UAAT,IAAmB,kBAACE,EAAA,EAAD,CAAQC,MAAM,YAASC,QAAS5C,KAAKoY,mB,GAvEzE/Z,IAAM6E,W,oBCphB1ByY,I,wDA/EX,WAAYnd,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTwc,mBAAoB,GACpBC,iBAAkB,GAClBC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAard,KAAlB,gBACpB,EAAKsd,uBAAyB,EAAKA,uBAAuBtd,KAA5B,gBARf,E,8SAsCfsB,KAAKxB,MAAMyd,kBAAkBjc,KAAKZ,MAAMwc,mBAAoB5b,KAAKZ,MAAMyc,iBAAkB7b,KAAKZ,MAAM0c,aACpG9b,KAAKxB,MAAM0d,qBAAqB,K,+BAG1B,IAAD,OAEL,MADc,GAEF,GACR,kBAACha,EAAA,EAAD,CAAKC,UAAU,mBAAmBc,UAAU,SAASyY,MAAM,UACvD,kBAACjZ,EAAA,EAAD,CAAMkV,OAAO,OAAOpF,KAAK,WAAzB,uBACA,kBAACrQ,EAAA,EAAD,CAAKM,IAAI,WAFb,yGAII,kBAACN,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,uBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,qBACZ3C,MAAOH,KAAKZ,MAAMwc,mBAClB7Y,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE2b,mBAAoB7b,EAAMG,OAAOC,YAGhF,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,qBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,mBACZ3C,MAAOH,KAAKZ,MAAMyc,iBAClB9Y,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE4b,iBAAkB9b,EAAMG,OAAOC,YAG9E,kBAAC+B,EAAA,EAAD,CAAKM,IAAI,UACL,kBAACC,EAAA,EAAD,CAAMkV,OAAO,QAAb,gBACA,kBAAC9U,EAAA,EAAD,CACIC,YAAY,cACZ3C,MAAOH,KAAKZ,MAAM0c,YAClB/Y,SAAU,SAAChD,GAAY,EAAKE,SAAS,CAAE6b,YAAa/b,EAAMG,OAAOC,YAGzE,kBAACuC,EAAA,EAAD,CAAQC,MAAM,gBAAaC,QAAS5C,KAAKgc,8B,GA5Ed3d,IAAM6E,YCyBlCiZ,G,kDAvBX,WAAY3d,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAGb,EAAKgZ,WAAa,EAAKA,WAAW1Z,KAAhB,gBALH,E,yDASfsB,KAAKxB,MAAM0d,qBAAqB,K,+BAMhC,OACI,kBAACha,EAAA,EAAD,CAAKC,UAAU,mBAAmBc,UAAU,SAASyY,MAAM,UAEvD,kBAAChZ,EAAA,EAAD,CAAQC,MAAM,gBAAaC,QAAS5C,KAAKoY,kB,GApBb/Z,IAAM6E,WC4BnCkZ,G,kDA1BX,WAAY5d,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAGb,EAAKgZ,WAAa,EAAKA,WAAW1Z,KAAhB,gBALH,E,yDAQfsB,KAAKxB,MAAM0d,qBAAqB,K,+BAKhC,MADc,GAEF,GACR,yBAAK/Z,UAAU,mBAAmBc,UAAU,SAASyY,MAAM,UACvD,kBAACjZ,EAAA,EAAD,CAAMkV,OAAO,OAAOpF,KAAK,UAAzB,2BACA,kBAACrQ,EAAA,EAAD,CAAKM,IAAI,WACT,kBAACC,EAAA,EAAD,2EACA,kBAACP,EAAA,EAAD,CAAKM,IAAI,WACT,kBAACE,EAAA,EAAD,CAAQC,MAAM,6BAAuBC,QAAS5C,KAAKoY,kB,GAtB1B/Z,IAAM6E,WCIzCmZ,G,kDACF,WAAY7d,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAEb,EAAKkd,8BAAgC,EAAKA,8BAA8B5d,KAAnC,gBAJtB,E,4EASfsB,KAAKxB,MAAM0d,qBADC,K,+BAKZ,IAAI1E,EAAU,GAuBd,OAtBAA,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAK+F,KAAK,+BAA+B9F,UAAU,qBAC5D,kBAACM,EAAA,EAAD,4DACA,kBAACP,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACoa,GAAA,EAAD,CAAWpa,UAAU,sBACjBqa,QAAS,CACL,CACIjU,SAAU,aACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,aACR8E,SAAS,GAEb,CACIlU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,uBAGhBvT,KAAMpE,KAAKxB,MAAMke,iBAErB,kBAACxa,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACD,EAAA,EAAD,CAAKC,UAAU,aACX,kBAACO,EAAA,EAAD,CAAQP,UAAU,eAAeQ,MAAM,6BAA6BC,QAAS5C,KAAKsc,kCAGnF9E,M,GArCuBnZ,IAAM6E,WAyCtCyZ,G,kDACF,WAAYne,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,oEAKf,IADoB,EAChBwd,EAAsB,GADN,cAEK5c,KAAKxB,MAAMqe,6BAFhB,IAEpB,2BAAiE,CAAC,IAAD,0BAAvD/W,EAAuD,KAAlD3F,EAAkD,KACzD2c,EAAW,GACV3c,IACD2c,EAAW,sBAEX3c,IACA2c,EAAW,gBAEfF,EAAoBzW,KAAK,CAAE4W,aAAcjX,EAAKkX,aAAcF,KAV5C,8BAYpB,OAAOF,I,+BAIP,IAAIpF,EAAU,GAuBd,OAtBAA,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAK+F,KAAK,iBAAiB9F,UAAU,qBAC9C,kBAACM,EAAA,EAAD,wDACA,kBAACP,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACoa,GAAA,EAAD,CAAWpa,UAAU,sBACjBqa,QAAS,CACL,CACIjU,SAAU,eACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,gBACR8E,SAAS,GAEb,CACIlU,SAAU,eACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,sBAGhBvT,KAAMpE,KAAKid,0BAEf,kBAAC/a,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACD,EAAA,EAAD,CAAKC,UAAU,aACX,kBAACO,EAAA,EAAD,CAAQP,UAAU,eAAeQ,MAAM,mCAGxC6U,M,GA5CoBnZ,IAAM6E,WA+CnCga,G,kDACF,WAAY1e,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAEb,EAAK+d,+BAAiC,EAAKA,+BAA+Bze,KAApC,gBAJvB,E,6EASfsB,KAAKxB,MAAM0d,qBADC,K,+BAKZ,IAAI1E,EAAU,GAuBd,OAtBAA,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAK+F,KAAK,iBAAiB9F,UAAU,qBAC9C,kBAACM,EAAA,EAAD,mDACA,kBAACP,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACoa,GAAA,EAAD,CAAWpa,UAAU,sBACjBqa,QAAS,CACL,CACIjU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,UACR8E,SAAS,GAEb,CACIlU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,YAGhBvT,KAAMpE,KAAKxB,MAAM4e,iBAErB,kBAAClb,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACD,EAAA,EAAD,CAAKC,UAAU,aACX,kBAACO,EAAA,EAAD,CAAQP,UAAU,eAAeQ,MAAM,aAAaC,QAAS5C,KAAKmd,mCAGnE3F,M,GArCqBnZ,IAAM6E,WAyCpCma,G,kDACF,WAAY7e,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAGb,EAAKke,kCAAoC,EAAKA,kCAAkC5e,KAAvC,gBAL1B,E,gFAUfsB,KAAKxB,MAAM0d,qBADC,K,+BAMZ,IAAI1E,EAAU,GAuBd,OAtBAA,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAK+F,KAAK,cAAc9F,UAAU,qBAC3C,kBAACM,EAAA,EAAD,yDACA,kBAACP,EAAA,EAAD,CAAKM,IAAI,UACT,kBAAC+Z,GAAA,EAAD,CAAWpa,UAAU,sBACjBqa,QAAS,CACL,CACIjU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,UACR8E,SAAS,GAEb,CACIlU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,YAGhBvT,KAAMpE,KAAKxB,MAAM+e,cAErB,kBAACrb,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACD,EAAA,EAAD,CAAKsb,aAAW,aACZ,kBAAC9a,EAAA,EAAD,CAAQP,UAAU,eAAeQ,MAAM,oBAAoBC,QAAS5C,KAAKsd,sCAG1E9F,M,GAvC4BnZ,IAAM6E,WA2C3Cua,G,kDACF,WAAYjf,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,GAFE,E,4EASfY,KAAKxB,MAAM0d,qBADC,K,+BAMZ,IAAIwB,EACD1d,KAAKxB,MAAMkf,cAAaA,EAAc,CAACC,aAAc,gBAAiBC,OAAQ,UAC7E5d,KAAKxB,MAAMkf,cAAaA,EAAa,CAACC,aAAc,gBAAiBC,OAAQ,gBAEjF,IAAIpG,EAAU,GAwBd,OAvBAA,EAAQ,GAAK,kBAACtV,EAAA,EAAD,CAAK+F,KAAK,iBAAiB9F,UAAU,qBAC9C,kBAACM,EAAA,EAAD,yFAEA,kBAACP,EAAA,EAAD,CAAKM,IAAI,UACT,kBAAC+Z,GAAA,EAAD,CAAWpa,UAAU,sBACjBqa,QAAS,CACL,CACIjU,SAAU,eACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,UACR8E,SAAS,GAEb,CACIlU,SAAU,SACV8S,OAAQ,kBAAC5Y,EAAA,EAAD,CAAMkV,OAAO,QAAb,YAGhBvT,KAAMsZ,IAEV,kBAACxb,EAAA,EAAD,CAAKC,UAAU,gBACf,kBAACD,EAAA,EAAD,CAAKsb,aAAW,aACZ,kBAAC9a,EAAA,EAAD,CAAQP,UAAU,eAAeQ,MAAM,mBAAgBC,QAAS5C,KAAK6d,kCAGtErG,M,GA3CwBnZ,IAAM6E,WA+CvC4a,G,kDAIF,WAAYtf,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTqY,eAAgB,EAChBsG,aAAc,EACdL,aAAa,EACbhB,eAAgB,CAAC,CAAEsB,WAAY,qBAAsBC,OAAQ,GAC7D,CAAED,WAAY,mBAAoBC,OAAQ,GAC1C,CAAED,WAAY,eAAgBC,OAAQ,IACtCpB,4BAA6B,IAAInP,IAAI,CAAC,CAAC,UAAU,GAAQ,CAAC,kBAAe,KACzE0P,eACI,CAAC,CAAExb,OAAQ,UAAWqc,OAAQ,GAC9B,CAAErc,OAAQ,QAASqc,OAAQ,GAC3B,CAAErc,OAAQ,aAAcqc,OAAQ,IACpCV,YACI,CAAC,CAAE3b,OAAQ,eAAaqc,OAAQ,GAChC,CAAErc,OAAQ,WAAYqc,OAAQ,GAC9B,CAAErc,OAAQ,YAAaqc,OAAQ,GAC/B,CAAErc,OAAQ,aAAcqc,OAAQ,KAExC,EAAK/B,qBAAuB,EAAKA,qBAAqBxd,KAA1B,gBAC5B,EAAKud,kBAAoB,EAAKA,kBAAkBvd,KAAvB,gBACzB,EAAKwf,YAAc,EAAKA,YAAYxf,KAAjB,gBACnB,EAAKyf,kBAAoB,EAAKA,kBAAkBzf,KAAvB,gBAvBV,E,iEA0BEyB,GACjBH,KAAKC,SAAS,CAAEwX,eAAgBtX,M,0CAIhCH,KAAKke,gB,4KAIkB1d,MAAMC,IAAOxC,iBAAmB,oBAAqB,CACxEyC,OAAQ,MACRe,KAAM,OACNb,MAAO,WACPC,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAYb,KAAKgC,QAAQwD,SAE/CtE,MAAMd,QAAQC,K,WARXc,E,QAUQC,G,sBACFD,EAASS,O,OACR,M,OAGA,M,8BAFDtB,MAAM,4G,mCAGNA,MAAM,iE,6BAGNA,MAAMa,EAASI,S,2DAIAJ,EAASE,OAAOH,MAAMd,QAAQC,K,QACrD,GADMiB,E,OACQ,CAIV,IAHAlB,QAAQC,IAAIiB,EAAS0E,QACjBoY,EAAU,EACVC,EAAY,EACRC,EAAO,EAAGA,EAAOhd,EAAS0E,OAAQsY,IACT,OAA1Bhd,EAASgd,GAAM5X,SACd0X,GAAoB,GAEK,OAA1B9c,EAASgd,GAAM5X,SACd2X,GAAwB,GAGhCre,KAAKue,YAAYH,EAASC,G,yIAK1BD,EAASC,GACjB,IAAIja,EAAO,CAAC,CAAExC,OAAQ,UAAWqc,OAAQG,GACzC,CAAExc,OAAQ,QAASqc,OAAQI,GAC3B,CAAEzc,OAAQ,aAAcqc,OAAQ,IAChCje,KAAKC,SAAS,CAACmd,eAAgBhZ,M,wCAIjBwX,EAAoBC,EAAkB2C,GACpD,IAAIpa,EAAO,CAAC,CAAE4Z,WAAY,qBAAsBC,OAAQrC,GACxD,CAAEoC,WAAY,mBAAoBC,OAAQpC,GAC1C,CAAEmC,WAAY,eAAgBC,OAAQO,IACtCxe,KAAKC,SAAS,CAACyc,eAAgBtY,M,qCAEpBxC,GACX5B,KAAKC,SAAS,CAACyd,YAAa9b,M,+BAI5B,OACI,kBAACM,EAAA,EAAD,CAAKC,UAAU,mBAAmBc,UAAU,SAASyY,MAAM,UACxB,IAA9B1b,KAAKZ,MAAMqY,gBAAwB,kBAACvV,EAAA,EAAD,KAChC,kBAACA,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAM8P,KAAK,UAAUoF,OAAO,QAA5B,sDACA,kBAACzV,EAAA,EAAD,CAAKM,IAAI,WACT,kBAACE,EAAA,EAAD,CAAQC,MAAM,0BAA0BC,QAAS5C,KAAKme,qBAE1D,kBAACjc,EAAA,EAAD,CAAKuc,UAAU,mBAAmBxb,UAAU,MAAMyb,KAAK,QACnD,kBAAC,GAAD,CAAyBhC,eAAgB1c,KAAKZ,MAAMsd,eAAgBR,qBAAsBlc,KAAKkc,uBAC/F,kBAAC,GAAD,CAAsBW,4BAA6B7c,KAAKZ,MAAMyd,+BAElE,kBAAC3a,EAAA,EAAD,CAAKuc,UAAU,mBAAmBxb,UAAU,MAAMyb,KAAK,QACnD,kBAAC,GAAD,CAAuBtB,eAAgBpd,KAAKZ,MAAMge,eAAgBlB,qBAAsBlc,KAAKkc,uBAC7F,kBAAC,GAAD,CAA8BqB,YAAavd,KAAKZ,MAAMme,YAAarB,qBAAsBlc,KAAKkc,wBAElG,kBAACha,EAAA,EAAD,CAAKuc,UAAU,mBAAmBxb,UAAU,MAAMyb,KAAK,QACnD,kBAAC,GAAD,CAA0BhB,YAAa1d,KAAKZ,MAAMse,YAAaiB,eAAgB3e,KAAK2e,eAAgBzC,qBAAsBlc,KAAKkc,yBAIxG,IAA9Blc,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAChCiF,eAAgB1c,KAAKZ,MAAMsd,eAAgBT,kBAAmBjc,KAAKic,kBACnEC,qBAAsBlc,KAAKkc,uBAEA,IAA9Blc,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAChCyE,qBAAsBlc,KAAKkc,uBAEA,IAA9Blc,KAAKZ,MAAMqY,gBAAwB,kBAAC,GAAD,CAA+ByE,qBAAsBlc,KAAKkc,4B,GA/HjF7d,IAAM6E,WAA7B4a,GAEK3a,YAAc/E,EAoIV0f,UC3OAc,G,kDAhHX,WAAYpgB,GAAQ,IAAD,8BACf,cAAMA,IACDqgB,WAAa,EAAKA,WAAWngB,KAAhB,gBAGlB,EAAKkW,kBAAoB,IAAIjC,GAG7B,EAAKvT,MAAQ,CAAE4X,QAAS,IART,E,uDAeRJ,GAAqB,IAAD,OAEvBI,EAAUhX,KAAKZ,MAAM4X,QACzBA,EAAQ7Q,KAAKyQ,GACb5W,KAAKC,SAAS,CAAE+W,QAASA,IAGzBJ,EAAmB/I,oBAAsB,SAACC,GACtC,OAAQA,GACJ,IAAK,YAGL,IAAK,eACD,MACJ,IAAK,SAED,EAAKgR,UAAUlI,GAQvB,EAAKmI,eAITnI,EAAmBb,YAAc,SAACxS,EAAYyS,GAE1C,EAAKpB,kBAAkBoK,UAAUzb,GAAYoB,MAAK,SAACf,GAC/CoS,EAASpS,MACV1C,OAAM,SAACsL,GAENwJ,EAAS,KAAMxJ,OAKvBoK,EAAmBX,mBAAqB,SAAC1S,EAAYiB,EAAkBwR,GACnE,EAAKpB,kBAAkBqK,iBAAiB1b,EAAYiB,GAAkBG,MAAK,SAACmF,GACxEkM,EAASlM,MACV5I,OAAM,SAACsL,GACNwJ,EAAS,KAAMxJ,S,gCAKjBoK,GACNxW,QAAQkO,MAAM,oDACd,IAAI0I,EAAUhX,KAAKZ,MAAM4X,QACrBkI,EAAMlI,EAAQmI,QAAQvI,GAC1BI,EAAQoI,OAAOF,EAAK,GACpBlf,KAAKC,SAAS,CAAE+W,QAASA,M,+BAIzB,OAEI,kBAAC9U,EAAA,EAAD,CAAKC,UAAU,mBACX,kBAACE,EAAA,EAAD,CAAQC,WAAW,QAAQC,QAAQ,UAAUC,IAAI,QAC7C,kBAAC,IAAD,CAAMa,GAAG,cAAT,QAEI,kBAAC,EAAY4G,SAAb,MACK,SAAAC,GAAW,OAAI,kBAACC,EAAA,EAAD,CAAMxH,MAAM,UAAUyH,MAAO,CAAC,CAAEzH,MAAO,SAAUC,QAASsH,EAAYG,eAIlG,4BACI,4BAAI,kBAAC,IAAD,CAAMhH,GAAG,mBAAT,iCACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,yBAAT,4BACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,yBAAT,sBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,mCAAT,yBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,6BAAT,qBAER,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0C,KAAK,mBACR,kBAAC,GAAD,CAAqBiR,QAAShX,KAAKZ,MAAM4X,QAASH,MAAO7W,KAAK6e,cAElE,kBAAC,IAAD,CAAO9Y,KAAK,yBACR,kBAAC,GAAD,CAAmB6O,kBAAmB5U,KAAK4U,kBAAmBuC,YAAa,gBAE/E,kBAAC,IAAD,CAAOpR,KAAK,6BACR,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,mCACR,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,yBACR,kBAAC7D,EAAA,EAAD,CAAKM,IAAI,UAAT,mF,GA1GMnE,IAAM6E,W,oBC8ErBmc,G,kDA7Eb,WAAY7gB,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAE8K,YAAa,MAC5B,EAAKvL,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAK2L,OAAS,EAAKA,OAAO3L,KAAZ,gBACd,EAAK4gB,KAAO,EAAKA,KAAK5gB,KAAV,gBALK,E,gEASjBsB,KAAKsf,S,6BAIL,IAAIC,EAAKxe,KAAKyN,MAAM1M,aAAa6D,QAAQ,gBACzC3F,KAAKC,SAAS,CAAEiK,YAAaqV,GAAU,MAAQvf,KAAKrB,S,+BAIX,IAArCqB,KAAKZ,MAAM8K,YAAY3F,KAAKib,OACrBhc,OAAOsR,QAAQ,yGAAoG,SAE1HtR,OAAOuP,UAAU0M,eAAezP,IAAO7R,WAG3C2D,aAAa8R,QACb5T,KAAKC,SAAS,CAAEiK,YAAa,OAC7B1G,OAAOC,SAAS2B,OAAO,a,8BAIQ,OAA3BpF,KAAKZ,MAAM8K,YACb1G,OAAOC,SAAS2B,OAAO,aAEkB,IAArCpF,KAAKZ,MAAM8K,YAAY3F,KAAKib,MAAwC,KAAzBhc,OAAOC,SAASC,OAAeF,OAAOC,SAASC,KAAKgc,SAAS,UAC1Glc,OAAOC,SAAS2B,OAAO,gBAEgB,IAArCpF,KAAKZ,MAAM8K,YAAY3F,KAAKib,MAAwC,KAAzBhc,OAAOC,SAASC,MAAgBF,OAAOC,SAASC,KAAKgc,SAAS,WAAYlc,OAAOC,SAASC,KAAKgc,SAAS,UACrJlc,OAAOC,SAAS2B,OAAO,e,+BAM3B,OACE,kBAAC,EAAYua,SAAb,CAAsBxf,MAAOyf,OAAOxa,OAAOpF,KAAKZ,MAAM8K,aAAe,GAAI,CAAEG,OAAQrK,KAAKqK,OAAQ1L,MAAOqB,KAAKrB,MAAOsD,mBAAoBjC,KAAKsf,QAE1I,kBAACO,GAAA,EAAD,CAASC,MAAOC,MACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACja,KAAK,KAChB,4BACE,4BAAI,kBAAC,IAAD,CAAM1C,GAAG,UAAT,eACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,uBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,qBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,gBAIV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0C,KAAK,UACV,kBAAC,EAAD,CAAYka,aAAa,UAE3B,kBAAC,IAAD,CAAOla,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,c,GAtEI1H,IAAM6E,WCDlBgd,GAAcC,QACW,cAA7B3c,OAAOC,SAAS2c,UAEe,UAA7B5c,OAAOC,SAAS2c,UAEhB5c,OAAOC,SAAS2c,SAAS5U,MACvB,2DAsCN,SAAS6U,GAAgBC,EAAOtQ,GAC9BnE,UAAU0U,cACPC,SAASF,GACT3b,MAAK,SAAA8b,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvhB,QACfyM,UAAU0U,cAAcO,YAI1B1gB,QAAQC,IACN,iHAKE2P,GAAUA,EAAO+Q,UACnB/Q,EAAO+Q,SAASN,KAMlBrgB,QAAQC,IAAI,sCAGR2P,GAAUA,EAAOgR,WACnBhR,EAAOgR,UAAUP,WAO5Bvf,OAAM,SAAAsL,GACLpM,QAAQoM,MAAM,4CAA6CA,MCvFjEyU,IAASC,OAAO,kBAAC,IAAD,KAAY,kBAAC,GAAD,OAAsBC,SAASC,eAAe,SDanE,SAAkBpR,GACvB,GAA6C,kBAAmBnE,UAAW,CAGzE,GADkB,IAAIwV,IAAIC,gBAAwB9d,OAAOC,SAAS8d,MACpDC,SAAWhe,OAAOC,SAAS+d,OAIvC,OAGFhe,OAAO0K,iBAAiB,QAAQ,WAC9B,IAAMoS,EAAK,UAAMgB,gBAAN,sBAEPpB,KAgEV,SAAiCI,EAAOtQ,GAEtCxP,MAAM8f,EAAO,CACXzf,QAAS,CAAE,iBAAkB,YAE5B8D,MAAK,SAAAxD,GAEJ,IAAMoK,EAAcpK,EAASN,QAAQ8N,IAAI,gBAEnB,MAApBxN,EAASS,QACO,MAAf2J,IAA8D,IAAvCA,EAAY4T,QAAQ,cAG5CtT,UAAU0U,cAAckB,MAAM9c,MAAK,SAAA8b,GACjCA,EAAaiB,aAAa/c,MAAK,WAC7BnB,OAAOC,SAASke,eAKpBtB,GAAgBC,EAAOtQ,MAG1B9O,OAAM,WACLd,QAAQC,IACN,oEAvFAuhB,CAAwBtB,EAAOtQ,GAI/BnE,UAAU0U,cAAckB,MAAM9c,MAAK,WACjCvE,QAAQC,IACN,iHAMJggB,GAAgBC,EAAOtQ,OCpC/BuQ,I","file":"static/js/main.ed26368d.chunk.js","sourcesContent":["module.exports = {\n    BACKEND_BASE_URI: \"http://localhost:3000\",\n    INFURA_URI: \"https://mainnet.infura.io/v3/efaece4f5f4443979063839c124c8171\",\n    IDB_NAME: \"TicketMirror\"\n};","import React from 'react';\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React from 'react';\nimport { Box, Button, TextInput, Text, Header } from 'grommet';\nimport Config from '../config';\nimport UserContext from '../AppContexts/UserContext';\n\nclass AccountManagement extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.createUser = this.createUser.bind(this);\n        this.login = this.login.bind(this);\n        this.loginPassHandler = this.loginPassHandler.bind(this);\n        this.mailHandler = this.mailHandler.bind(this);\n        this.otpBestätigen = this.otpBestätigen.bind(this);\n        this.otpInputHandler = this.otpInputHandler.bind(this);\n        this.pass1Handler = this.pass1Handler.bind(this);\n        this.pass2Handler = this.pass2Handler.bind(this);\n        this.setState1 = this.setState1.bind(this);\n        this.setState6 = this.setState6.bind(this);\n        this.state = { dhbw_mail: \"\", login_pass: \"\", new_pass: \"\", otp: \"\", pass1: \"\", pass2: \"\", step: 0, access_token: \"\" };\n        this.tokenHandler = this.tokenHandler.bind(this);\n        this.verifyPasswort = this.verifyPasswort.bind(this);\n    }\n\n    otpInputHandler(event) {\n        //Liest das eingegebene OTP aus dem Input-Feld aus und speichert es zwischen\n        this.setState({ otp: event.target.value });\n    }\n\n    tokenHandler(event) {\n        //Liest den eingegebenen Token aus dem Input-Feld aus und speichert diesen zwischen\n        this.setState({ access_token: event.target.value });\n    }\n\n    otpBestätigen() {\n        //Gibt das OTP aus und springt zum nächsten Schritt\n        console.log(this.state.otp);\n        this.setState({ step: 2 });\n    }\n\n    pass1Handler(event) {\n        this.setState({ pass1: event.target.value });\n    }\n\n    pass2Handler(event) {\n        this.setState({ pass2: event.target.value });\n    }\n\n    mailHandler(event) {\n        this.setState({ dhbw_mail: event.target.value });\n    }\n\n    loginPassHandler(event) {\n        this.setState({ login_pass: event.target.value });\n    }\n\n    verifyPasswort() {\n        if (this.state.pass1 === this.state.pass2) {\n            alert(\"Die angegebenen Passwörter stimmen überein!\");\n            this.createUser(this.state.pass2);\n        }\n        else {\n            alert(\"Die angegebenen Passwörter stimmen nicht überein!\");\n            this.setState({ pass1: \"\" });\n            this.setState({ pass2: \"\" });\n        }\n    }\n\n    displayError() {\n        //Wirft eine Standardfehlermeldung aus\n        alert(\"Ups, das hat leider nicht funktioniert. Bitte versuchen Sie es erneut.\")\n    }\n\n    async createUser(pw) {\n        //Legt anhand des eingegebenen OTP's einen User mit dem gewählten Passwort an\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/createUser/' + this.state.otp, {\n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ newPassword: pw })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert(\"Für das eingegebene OTP konnte kein User angelegt werden.\");\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe.message) {\n                alert(rückgabe.message + \" Ihr angegebenes OTP scheint nicht zu exisitieren. Bitte überprüfen Sie die Eingabe.\");\n                this.setState({ step: 1 });\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                alert(\"Der Nutzer wurde erfolgreich angelegt.\");\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    async login() {\n        const response = await fetch(Config.BACKEND_BASE_URI + '/auth/login', {\n            method: 'POST',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email: this.state.dhbw_mail, password: this.state.login_pass })\n        }).catch(console.log);\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 401:\n                    alert(\"Ihre Anmeldedaten scheinen nicht zu stimmen. Bitte überprüfen Sie ihre Angaben.\");\n                    break;\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                default:\n                    alert(rückgabe.message);\n            }\n            this.setState({ step: 6 });\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                this.handleFinalLogin(rückgabe);\n            }\n        }\n    }\n\n    handleFinalLogin(userData) {\n        localStorage.setItem('userContext', JSON.stringify(userData));\n        this.context.reloadLocalStorage();\n    }\n\n    setState1() {\n        //Springt zur Eingabe des OTP's im Erstellungsprozess\n        this.setState({ step: 1 });\n    }\n\n    setState6() {\n        //Springt zur Anmeldung mit einem vorhandenen Wallet\n        this.setState({ step: 6 });\n    }\n\n    render() {\n        //Stellt die jeweiligen Schritte für den Benutzer dar\n        return (\n\n            <Box className=\"AccountManagement\" gap=\"small\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Text>BNT Ticketsystem</Text>\n                </Header>\n                <Box pad=\"small\">\n                    {this.state.step === 0 &&\n                        //Startseite des Accountmanagements, Auswahl zwischen Neuanlage eines Áccounts und Anmeldung mit einem bestehenden Account\n                        <Box gap=\"small\">\n                            <Text>Klicke hier, um einen neuen Account anzulegen</Text>\n                            <Button label=\"Neuen Account anlegen\" gap=\"small\" onClick={this.setState1}></Button>\n                            <Text>Klicke hier, um dich mit einem bestehenden Account anzumelden</Text>\n                            <Button label=\"Mit bestehendem Account anmelden\" onClick={this.setState6}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 1 &&\n                        //Eingabe des persönlichen OTP's\n                        <Box gap=\"small\">\n                            <Text>Bitte geben Sie das OneTime-Passwort ein, das wir an Ihre DHBW-Mailadresse versendet haben, und bestätigen Sie die Eingabe</Text>\n                            <TextInput placeholder=\"OTP eingeben\" value={this.state.otp} onChange={this.otpInputHandler}></TextInput>\n                            <Button label=\"Eingabe bestätigen\" onClick={this.otpBestätigen}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 2 &&\n                        <Box classname=\"Passwortvergabe\" direction=\"column\" gap=\"small\">\n                            <h1>Passwortvergabe</h1>\n                            <Text>Bitte vergeben Sie ein neues Passwort für Ihren Account</Text>\n                            <TextInput placeholder=\"Neues Passwort vergeben\" value={this.state.pass1} onChange={this.pass1Handler}></TextInput>\n                            <TextInput placeholder=\"Neues Passwort bestätigen\" value={this.state.pass2} onChange={this.pass2Handler}></TextInput>\n                            <Button label=\"Passwort bestätigen\" onClick={this.verifyPasswort}></Button>\n                        </Box>\n                    }\n                    {this.state.step === 6 &&\n                        <Box gap=\"small\">\n                            <h1>Anmeldung mit einem vorhandenen Account</h1>\n                            <TextInput placeholder=\"DHBW-Mailadresse eingeben\" value={this.state.dhbw_mail} onChange={this.mailHandler}></TextInput>\n                            <TextInput placeholder=\"Account-Passwort eingeben\" value={this.state.login_pass} onChange={this.loginPassHandler}></TextInput>\n                            <Button label=\"Anmelden\" onClick={this.login}></Button>\n                        </Box>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\nexport default AccountManagement;\n\n\n","import React from 'react';\nimport './UserMainMenu.css';\nimport { Box } from 'grommet';\nimport { Link } from \"react-router-dom\";\n\nclass UserMainMenu extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <Box className=\"UserMainMenu\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Link className=\"MenuLink\" to=\"/guest/tickets\">Tickets Anzeigen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/buy\">Tickets Buchen</Link>\n                <Link className=\"MenuLink\" to=\"/guest/bookings\">Buchungen Anzeigen</Link>\n            </Box>\n        );\n    }\n}\n\nexport default UserMainMenu;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Button, Text } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport QRCode from 'qrcode';\nimport Config from '../../config';\n\nimport UserContext from '../../AppContexts/UserContext';\n\nclass SingleTicketViewer extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.identifier = window.location.hash.replace(\"#/guest/tickets/\", \"\");\n        this.ticket = { forename: null, surename: null, ticketType: null };\n        let tempTicket = this.props.tickets.find(ticket => ticket.identifier === this.identifier);\n        if (tempTicket) {\n            this.ticket = tempTicket;\n        }\n    }\n\n    componentDidMount() {\n        this.generateQRCode(this.ticket);\n    }\n\n    async generateQRCode(ticket) {\n        // Generate code\n        let data = { id: ticket.identifier, sIG: this.context.user.secretIngredient }; // TODO Change to signature and so on...\n        QRCode.toDataURL(JSON.stringify(data)).then((url) => {\n            this.setState({ qrcode: url });\n        }).catch(console.log);\n    }\n\n    render() {\n        return (\n            <Box className=\"SingleTicket\">\n                <Box pad=\"small\">\n                    <p>{this.ticket.forename}</p>\n                    <p>{this.ticket.surname}</p>\n                    <p>{this.ticket.ticketType}</p>\n                </Box>\n                <Box pad=\"small\">\n                    <img width=\"300\" height=\"300\" src={this.state.qrcode} alt=\"Hier sollte ein QR-Code stehen\"></img>\n                </Box>\n            </Box>\n        );\n    }\n}\n\nfunction TicketListItem(props) {\n    return (\n        <Box className=\"TicketListItem\" direction=\"row\" gap=\"small\" pad=\"small\">\n            <Text className=\"Name\">{props.ticket.forename} {props.ticket.surname}</Text>\n            <Text className=\"Type\">{props.ticket.ticketType}</Text>\n            <Button label=\"Anzeigen\" onClick={() => { window.location.assign('#/guest/tickets/' + props.ticket.identifier); }}></Button>\n        </Box>\n    );\n}\n\nclass TicketOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { tickets: [], loading: false }\n    }\n\n    componentDidMount() {\n        this.fetchTickets();\n    }\n\n    async fetchTickets() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/tickets\", {\n            //method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            this.setState({ loading: false });\n            alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n            return;\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return;\n\n        tickets.forEach((ticket) => {\n            switch (ticket.ticketType) {\n                case \"0\": ticket.ticketType = \"Absolvent\"; break;\n                case \"1\": ticket.ticketType = \"Begleitperson\"; break;\n                case \"2\": ticket.ticketType = \"Parkticket\"; break;\n                default: break;\n            }\n        });\n\n        this.setState({ tickets: tickets, loading: false });\n    }\n\n    setToken(Token) {\n        localStorage.setItem('Tokenwert', Token);\n    }\n    getToken() {\n        var value = localStorage.getItem('Tokenwert');\n        console.log(value);\n    }\n\n    render() {\n        let ticketElements = this.state.tickets.map((ticket) => <TicketListItem key={ticket.identifier} ticket={ticket}></TicketListItem>);\n\n        return (\n            <Box className=\"TicketOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Switch>\n                    <Route path=\"/guest/tickets/:identifier\">\n                        <Link to=\"/guest/tickets/\">Alle Tickets anzeigen</Link>\n                        <SingleTicketViewer tickets={this.state.tickets}></SingleTicketViewer>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <Box>\n                            <Box>\n                                <h1 className=\"NumberOfTickets\">{this.state.tickets.length}</h1>\n                            </Box>\n                            <Box className=\"TicketList\">\n                                {this.state.loading && <p className=\"loader\"></p>}\n                                {ticketElements}\n                            </Box>\n                        </Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default TicketOverview;\n","import React from 'react';\nimport './TicketOverview.css';\nimport { Box, Text, Accordion, AccordionPanel } from 'grommet';\nimport Config from '../../config';\nimport UserContext from '../../AppContexts/UserContext';\n\nclass BuchungsItem extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        var ticketsForBooking = [];\n        this.props.tickets.forEach((ticket) => {\n            ticketsForBooking.push(\n                <Box key={ticket.identifier} pad=\"small\">\n                    <span>Ticket Identifier: {ticket.identifier}</span>\n                    <span>Nachname: {ticket.surname}</span>\n                    <span>Vorname: {ticket.forename}</span>\n                    <span>Ticket Typ: {ticket.ticketType}</span>\n                </Box>\n            )\n        });\n        var buchung = this.props.booking;\n        var accPanelLabel = \"Buchung \" + buchung.id + \", gebucht am \" + (new Date(buchung.createdAt).toLocaleDateString()) + \" - \" + (buchung.paidAt ? 'Bezahlt' : 'Zahlung ausstehend');\n        return (\n            <AccordionPanel label={accPanelLabel}>\n                {ticketsForBooking.length > 0 &&\n                    <Text margin=\"small\">Folgende Tickets wurden gebucht:</Text>\n                }\n                {ticketsForBooking.length > 0 && ticketsForBooking}\n                {ticketsForBooking.length === 0 && <Text margin=\"small\">Keine Daten vorhanden.</Text>}\n            </AccordionPanel >\n        )\n    }\n\n}\n\nclass BookingOverview extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.loadListHandler = this.loadListHandler.bind(this);\n        this.loadTicketsHandler = this.loadTicketsHandler.bind(this);\n        this.state = { buchungen: [], tickets: [] };\n    }\n\n    componentDidMount() {\n        this.loadListHandler();\n    }\n\n    async loadListHandler() {\n        this.setState({ loading: true });\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/users/\" + this.context.user.id + \"/bookings\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            alert('Buchungen konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n        if (!data) return;\n\n        this.setState({ buchungen: data, loading: false })\n    }\n\n    async loadTicketsHandler(indexOfBooking) {\n        if (indexOfBooking === undefined) return;\n\n        let bookingId = this.state.buchungen[indexOfBooking].id;\n        let ticketsLoaded = this.state.tickets.findIndex((ticket) => {\n            return ticket.bookingId === bookingId\n        })\n\n        if (ticketsLoaded !== -1) return;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings/\" + bookingId + \"/ticketsBooked\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            alert('Gebuchte Tickets konnten nicht geladen werden.');\n            return;\n        }\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n    }\n\n    render() {\n        var buchungen = [];\n        this.state.buchungen.forEach((buchung) => {\n            var filteredTickets = this.state.tickets.filter((ticket) => {\n                return ticket.bookingId === buchung.id\n            })\n            buchungen.push(<BuchungsItem key={buchung.id} booking={buchung} tickets={filteredTickets}></BuchungsItem>)\n        });\n\n        return (\n            <Box className=\"BookingOverview\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n                <Box>\n                    {this.state.loading && <p className=\"loader\"></p>}\n                    {buchungen.length > 0 &&\n                        <Accordion onActive={(activeItems) => { this.loadTicketsHandler(activeItems[0]) }}>\n                            {buchungen}\n                        </Accordion>\n                    }\n                    {buchungen.length === 0 &&\n                        <Text>Keine Buchungen vorhanden</Text>\n                    }\n                </Box>\n            </Box>\n        );\n    }\n}\n\nexport default BookingOverview;\n","import React from 'react';\nimport { Box, Button, Text, TextInput, CheckBox } from 'grommet';\nimport Config from '../../config';\n\nclass PersonInput extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onInputHandler = this.onInputHandler.bind(this);\n        this.onCheckBox = this.onCheckBox.bind(this)\n        this.state = {\n            forename: \"\",\n            surname: \"\",\n            isWheelchairUser: false,\n        }\n    }\n\n    onInputHandler(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = event.target.value;\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    onCheckBox(event) {\n        const stateCopy = this.state;\n        stateCopy[event.target.name] = !stateCopy[event.target.name];\n        this.setState(stateCopy);\n        this.props.onInput(this.state)\n    }\n\n    render() {\n        return (\n            <Box>\n                <TextInput name=\"forename\" placeholder=\"Vorname des Gastes\" value={this.state.forename} onChange={this.onInputHandler}></TextInput>\n                <TextInput name=\"surname\" placeholder=\"Nachname des Gastes\" value={this.state.surname} onChange={this.onInputHandler}></TextInput>\n                <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n            </Box>\n        );\n    }\n\n}\n\nclass TicketBestellung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.WindowAbsolventTicket = this.WindowAbsolventTicket.bind(this);\n        this.WindowGuestTicket = this.WindowGuestTicket.bind(this);\n        this.WindowParkTicket = this.WindowParkTicket.bind(this);\n        this.ToOverview = this.ToOverview.bind(this);\n        this.ToOrder = this.ToOrder.bind(this);\n        this.ToPayment = this.ToPayment.bind(this);\n        this.createTickets = this.createTickets.bind(this);\n        this.createBooking = this.createBooking.bind(this);\n        this.onInputHandler = this.onInputHandler.bind(this);\n\n\n\n        this.state = {\n            guestcount: 0,\n            parkcount: 0,\n            step: 0,\n            persons: [],\n            personInputFields: [],\n            graduate: {\n                forename: \"\",\n                surname: \"\",\n                isWheelchairUser: false\n            },\n            bookingResult: null\n        };\n\n\n    }\n\n    // @Nils Für das generieren des Identifiers für das Ticket einfach erstmal eine Zufallszahl nehmen!\n    // Aber bitte eine extra Funktion für generieren des Ticket-Identifiers anlegen, dann können wir später gemeinsam den \"echten/sicheren\" Identifier-Generator programmieren\n\n    onInputHandler(event, type) {\n        if (type === \"forename\") {\n            this.setState({\n                graduate: {\n                    forename: event.target.value,\n                    surname: this.state.graduate.surname\n                }\n            })\n        } else {\n            this.setState({\n                graduate: {\n                    surname: event.target.value,\n                    forename: this.state.graduate.forename\n                }\n            })\n        }\n\n\n    }\n    //Wechsel der Ansichtenfenster\n    WindowAbsolventTicket() {\n        this.setState({ step: 0 })\n    }\n    WindowGuestTicket() {\n        this.setState({ step: 1 })\n    }\n    WindowParkTicket() {\n        this.setState({ step: 2 })\n    }\n    ToOverview() {\n        this.setState({ step: 3 })\n    }\n    ToPayment() {\n        this.setState({ step: 4 })\n    }\n    ToOrder() {\n        this.setState({ step: 5 })\n    }\n\n\n    //Funktion für die Counter und der Namen der Gäste\n    increment = (property) => {\n        if (property === \"guest\" && this.state.guestcount < 2) {\n\n            let personsIndex = this.state.persons.length;\n            let personInput = <PersonInput key={personsIndex} onInput={(personName) => { let personsList = this.state.persons; personsList[personsIndex] = personName; this.setState({ persons: personsList }) }}></PersonInput>\n            let personsList = this.state.persons;\n            personsList[personsIndex] = {};\n            this.state.personInputFields.push(personInput);\n            this.setState({ persons: personsList, personInputFields: this.state.personInputFields, guestcount: this.state.guestcount + 1 });\n\n        }\n        else if (property === \"park\" && this.state.parkcount < 3) {\n            this.setState({ parkcount: this.state.parkcount + 1 });\n        }\n    }\n    decrement = (property) => {\n        if (property === \"guest\" && this.state.guestcount > 0) {\n\n            this.state.personInputFields.pop();\n            this.state.persons.pop();\n\n            this.setState({ guestcount: this.state.guestcount - 1, personInputFields: this.state.personInputFields, persons: this.state.persons });\n        }\n        else if (property === \"park\" && this.state.parkcount > 0) {\n            this.setState({ parkcount: this.state.parkcount - 1 });\n        }\n    }\n\n\n    async createBooking() {\n        let userId = \"1\";\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/bookings\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({ userId: userId })\n        }).catch(console.log);\n        // Error Handling für Benutzer\n        if (!response) {\n            this.setState({ step: 100 });\n            return;\n        }\n\n\n        var result = await response.json().catch(console.log);\n        console.log(result)\n        this.setState({ bookingResult: result });\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n        console.log(result);\n\n        await this.createTickets();\n    }\n\n    async createTickets() {\n        console.log(this.state)\n        let bookingResult = this.state.bookingResult.id;\n        for (let element of this.state.persons) {\n            console.log(element);\n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer 16888740f668f0c4b660e0fd259fc0f0b7b784493a114ca44ad9528192384ca3fc7e85c71bb32c25c52637677b850b95739d9f7128014fe42a904efb027f46f91c342428c74fb734487898bbf64d796b565fa54b8099015388212e45e72b36b859e729aaf343d885fd976d10be72c5e4a172d0223b34a361ed796944c912cfdef23a2d5e4cf2fbf3cf0febe0843fa7e9b2d18d26d299745451f2930f24766077f2b3520f920bde85fe2d7f012c06bd47384aa402789e9c8c640da8aa3c43b442f649710e3a589b5c72ebf3e621987740f3af49fae6d2a484f50f40466091ae6c249ccbb116c209ccadffe899a819eabc82b54f69e7da3599f74f371015709150',\n                },\n                body: JSON.stringify({\n                    bookingId: bookingResult,\n                    ticketType: 1,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: element.isWheelchairUser,\n                })\n            }).catch(console.log);\n            // Error Handling für Benutzer\n            if (!response.ok) {\n                this.setState({ step: 100 });\n                return;\n            }\n            var result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n            console.log(result)\n        }\n        //Ticket für Absolvent in DB schreiben\n        response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            },\n            body: JSON.stringify({\n                bookingId: bookingResult,\n                ticketType: 0,\n                forename: this.state.graduate.forename,\n                surname: this.state.graduate.surname,\n                isWheelchairUser: false,\n            })\n        }).catch(console.log);\n        // Error Handling für Benutzer\n        if (!response.ok) {\n            this.setState({ step: 100 });\n            return;\n         }\n\n        result = await response.json().catch(console.log);\n\n        if (!result) {\n            this.setState({ step: 100 });\n            return;\n        }\n        console.log(result)\n        this.ToOrder();\n\n        //Parkticket in DB schreiben\n        for (let element of this.state.parkcount) {\n            console.log(element);\n                response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/ticketsBooked\", {\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n                },\n                body: JSON.stringify({\n                    bookingId: bookingResult,\n                    ticketType: 2,\n                    forename: element.forename,\n                    surname: element.surname,\n                    isWheelchairUser: element.isWheelchairUser,\n                })\n            }).catch(console.log);\n            // Error Handling für Benutzer\n            if (!response.ok) {\n                this.setState({ step: 100 });\n                return;\n            }\n            result = await response.json().catch(console.log);\n            if (!result) {\n                this.setState({ step: 100 });\n                return;\n            }\n            console.log(result)\n        }\n\n    }\n\n\n\n\n    render() {\n        console.log(this.state.persons)\n\n        return (\n            <Box className=\"TicketBestellung\" direction=\"column\" gap=\"medium\" pad=\"medium\">\n\n                {this.state.step === 0 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte tragen Sie ihren Namen in die Felder ein und bestätigen Sie die Eingabe mit dem Button!</Text>\n                        <TextInput name=\"forename\" placeholder=\"Vorname des Absolventen\" value={this.state.graduate.forename} onChange={(event) => this.onInputHandler(event, \"forename\")}></TextInput>\n                        <TextInput name=\"surname\" placeholder=\"Nachname des Absolventen\" value={this.state.graduate.surname} onChange={(event) => this.onInputHandler(event, \"surname\")}></TextInput>\n                        <CheckBox name=\"isWheelchairUser\" label=\"Rollstuhlfahrer bitte ankreuzen\" value={this.state.graduate.isWheelchairUser} onChange={this.onCheckBox} checked={this.state.isWheelchairUser} />\n\n                        <Button label=\" Ein Absolventen Ticket kaufen\" onClick={this.WindowGuestTicket} gap=\"small\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 1 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Begleitpersonen Sie mitnehmen wollen.</Text>\n                        <Button onClick={() => this.increment(\"guest\")} className=\"guestcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"guest\")} className=\"guestcount\" label=\"-\"></Button>\n                        <h2>{this.state.guestcount}</h2>\n                        {this.state.personInputFields}\n                        <Button onClick={this.WindowAbsolventTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.WindowParkTicket} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 2 &&\n                    <Box gap=\"small\">\n                        <Text>Bitte geben sie an, wie viele Parktickets Sie benötigen.</Text>\n                        <Button onClick={() => this.increment(\"park\")} className=\"parkcount\" label=\"+\"></Button>\n                        <Button onClick={() => this.decrement(\"park\")} className=\"parkcount\" label=\"-\"></Button>\n                        <h2>Anzahl der Parktickets: {this.state.parkcount}</h2>\n                        <Button onClick={this.WindowGuestTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.ToOverview} label=\"Weiter\"></Button>\n                    </Box>\n                }\n\n                {this.state.step === 3 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button onClick={this.WindowParkTicket} label=\"Zurück\"></Button>\n                        <Button onClick={this.ToPayment} label=\"Zahlungspflichtig bestellen\"></Button>\n                    </Box>\n                }\n                {this.state.step === 4 &&\n                    <Box gap=\"small\">\n                        <Text>Sie haben folgende Tickets Zahlungspflichtig bestellt.  <br />\n                    Bitte überweisen Sie folgenden Betrag auf das Konto: XXXXYYYYZZZZ.<br />\n                    Geben Sie ihren Namen als Verwendungszweck an.<br />\n                    Nach Rechnungseingang erhalten Sie Ihre Tickets an ihr Wallet gesendet.<br />\n                        </Text>\n                        <Text>Sie haben folgende Tickets bestellt: <br />\n                    Absolventent: 1 <br />\n                    Begleitpersonen: {this.state.guestcount} <br />\n                    Parkticket {this.state.parkcount}\n                        </Text>\n                        <Button label=\"Buchung erstellen\" onClick={this.createBooking}></Button>\n                    </Box>\n                }\n                {this.state.step === 5 &&\n                    <Box gap=\"small\">\n                        Erfolgreich bestellt!\n                    </Box>\n                }\n\n                {this.state.step === 100 &&\n                    <Box gap=\"small\">\n                        <Text>Ein Fehler im Bestellvorgang ist aufgetreten!</Text>\n                    </Box>\n                }\n\n\n            </Box>\n        );\n    }\n}\n\nexport default TicketBestellung;\n","import React from 'react';\n\nimport UserContext from '../AppContexts/UserContext';\n\nimport { Menu, Header, Box } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport UserMainMenu from './Components/UserMainMenu';\nimport TicketOverview from './Components/TicketOverview';\nimport BookingOverview from './Components/BookingOverview';\nimport TicketBestellung from './Components/TicketBestellung';\n\nclass Ticketshop extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Box className=\"Guest\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/guest\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <Switch>\n                    <Route path=\"/guest/buy\">\n                        <TicketBestellung></TicketBestellung>\n                    </Route>\n                    <Route path=\"/guest/tickets/\">\n                        <TicketOverview></TicketOverview>\n                    </Route>\n                    <Route path=\"/guest/bookings\">\n                        <BookingOverview></BookingOverview>\n                    </Route>\n                    <Route path=\"/guest/\">\n                        <UserMainMenu></UserMainMenu>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default Ticketshop;\n","import React from 'react';\nimport jsQR from 'jsqr';\nimport { Box, Button } from 'grommet';\n\nclass QRScanner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.video = React.createRef();\n    this.canvasElement = React.createRef();\n    this.startScan = this.startScan.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  componentWillUnmount(){\n    this.stopScan();\n  }\n\n  tick() {\n    if (!this.video || !this.video.current) return;\n    if (this.video.current.readyState === this.video.current.HAVE_ENOUGH_DATA) {\n      this.canvasElement.current.height = 320;\n      this.canvasElement.current.width = 320;\n      this.canvas.drawImage(this.video.current, 0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let imageData = this.canvas.getImageData(0, 0, this.canvasElement.current.width, this.canvasElement.current.height);\n      let code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: \"dontInvert\" });\n      if (code) {\n        // Selecting the right search pattern\n        // This should be defined via props: contentType\n        switch (this.props.contentType) {\n          case 'ETHEREUM_ADDRESS':\n            let match = code.data.match(/(?:ethereum:)(?<address>0x[A-Za-z\\d]*)/);\n            if (match && match.groups.address) {\n              this.stopScan();\n              this.props.onDone(match.groups.address);\n              return;\n            }\n            break;\n          case 'ETHEREUM_SIGNATURE':\n            // TODO: enter regex\n            break;\n          case 'IP_ADDRESS':\n            // TODO: enter regex\n            break;\n          case 'JSON_DATA':\n            // TODO: enter regex\n            break;\n          default:\n            this.stopScan();\n            this.props.onDone(code.data);\n            return;\n        }\n      }\n    }\n    requestAnimationFrame(this.tick);\n  }\n\n  startScan() {\n    if (!navigator.mediaDevices) return alert('Der Browser unterstützt diese Funktion nicht.');\n    const constraints = { video: { facingMode: \"environment\", width: 320, height: 320 } }\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then((stream) => {\n        /* use the stream */\n        this.canvas = this.canvasElement.current.getContext(\"2d\");\n        this.video.current.srcObject = stream;\n        this.video.current.setAttribute('playsinline', true);\n        this.video.current.play();\n        requestAnimationFrame(this.tick);\n        this.setState({ isScanning: true });\n      })\n      .catch(function (err) {\n        console.error(err);\n        /* handle the error */\n        alert('Sorry, Kamera-Stream konnte nicht geladen werden.');\n      });\n  }\n\n  stopScan() {\n    if (!this.video || !this.video.current || !this.video.current.srcObject) return;\n    let videoTracks = this.video.current.srcObject.getVideoTracks();\n    videoTracks[0].stop();\n    this.setState({ isScanning: false });\n  }\n\n  render() {\n    return (\n      <Box className=\"QRScanner\">\n        <div>\n          <canvas ref={this.canvasElement} hidden={!this.state.isScanning} />\n          <video ref={this.video} hidden />\n        </div>\n        {!this.state.isScanning && <Button label={this.props.label || \"Scan\"} onClick={this.startScan}></Button>}\n      </Box>\n    );\n  }\n}\n\nexport default QRScanner;\n","import React from 'react';\nimport { Button } from 'grommet';\nimport './Dialog.css';\n\nclass Dialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { };\n    }\n\n    render() {\n        return (\n            <div className=\"dialog\">\n                <div className=\"dialog-background-box\"></div>\n                <div className=\"dialog-center\">\n                    <div className=\"dialog-content\">\n                        <div className=\"dialog-header\">\n                            <h1>{this.props.title}</h1>\n                            <Button className=\"abort\" onClick={this.props.onAbort}>X</Button>\n                        </div>\n                        <div className=\"dialog-body\">\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dialog;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents a ticket reader on a remote device.\n * Use this class to connect to a RemoteTicketReader.\n */\nclass TicketReader {\n\n    constructor() {\n        this._iceCandidatesHandler = this._iceCandidatesHandler.bind(this);\n        this._dataChannelOpenHandler = this._dataChannelOpenHandler.bind(this);\n        this._receiveChannelHandler = this._receiveChannelHandler.bind(this);\n        this._dataChannelClosedHandler = this._dataChannelClosedHandler.bind(this);\n        this._connectionChangeHandler = this._connectionChangeHandler.bind(this);\n        this._generateAnswer = this._generateAnswer.bind(this);\n        this._messageHandler = this._messageHandler.bind(this);\n\n        // Map for requests sent via datachannel. Usage is: uuid =>  { resolve: resolve, reject: reject }\n        this.requestMap = new Map();\n\n        // Collection of all local icecandidates\n        this.icecandidates = [];\n\n        // Collection for all icecandidates that the master will provide\n        this.remoteICECandidates = [];\n\n        /**\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        // Finally prepare connection\n        this._initConnection();\n    }\n\n    /**\n     * Method that initializes the peer connection.\n     */\n    async _initConnection() {\n        const servers = null;\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this._iceCandidatesHandler);\n        this.localPeerConnection.addEventListener('connectionstatechange', this._connectionChangeHandler);\n        this.localPeerConnection.addEventListener('datachannel', this._receiveChannelHandler);\n    }\n\n    _iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.answer && !this.qrcode) {\n            setTimeout(this._generateAnswer, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    _connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    _dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n    }\n\n    _dataChannelClosedHandler(event) {\n        console.debug(event);\n    }\n\n    _messageHandler(event) {\n        console.debug(event.data);\n        try{\n            let response = JSON.parse(event.data);\n            if(response.reqId){\n                let callbacks = this.requestMap.get(response.reqId);\n                if(response.error){\n                    callbacks['reject'](response.error);\n                } else {\n                    callbacks['resolve'](response.result);\n                }\n            }\n        } catch(error){\n            console.error(error);\n        }\n    }\n\n    _receiveChannelHandler(event) {\n        this.dataChannel = event.channel;\n        this.dataChannel.addEventListener('message', this._messageHandler);\n        this.dataChannel.addEventListener('open', this._dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this._dataChannelClosedHandler);\n    }\n\n    _createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    readTicketRemote(identifier) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"getTicket\",\n                params: [identifier]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    obliterateTicketRemote(identifier, signature) {\n        return new Promise((resolve, reject) => {\n            let reqId = this._createUUID();\n            this.requestMap.set(reqId, { resolve: resolve, reject: reject });\n            const msg = {\n                type: \"Request\",\n                reqId: reqId,\n                context: \"ticketMirror\",\n                method: \"obliterateTicket\",\n                params: [identifier, signature]\n            }\n            try {\n                this.dataChannel.send(JSON.stringify(msg));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Method to set the config received from the master.\n     * @param {Object} config - A JS Object containing the offer and ice candidates from the master. \n     */\n    async setMasterConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.offer)).catch(console.error);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(console.error);\n            this.remoteICECandidates.push(candidate);\n        });\n\n        // Creating answer\n        this.answer = await this.localPeerConnection.createAnswer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.answer).catch(console.error);\n    }\n\n    _generateAnswer(){\n        let data = { answer: this.answer, candidates: this.icecandidates };\n        this.onAnswer(data);\n    }\n\n    /**\n     * Dumps all settings to JSON. Use this method to restore a broken session.\n     */\n    toJSON() {\n        let lstore = {\n            localDescription: this.localPeerConnection.currentLocalDescription,\n            remoteDescription: this.localPeerConnection.currentRemoteDescription,\n            candidates: this.remoteICECandidates\n        }\n        return JSON.stringify(lstore);\n    }\n\n}\n\nexport default TicketReader;","import React from 'react';\nimport { Box, Button, Text } from 'grommet';\nimport QRScanner from '../Utilities/Components/QRScanner';\nimport Dialog from '../Utilities/Components/Dialog';\n\nimport TicketReader from '../EventManagement/Classes/TicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\nclass Entrance extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { connected: null, currentTicket: null };\n        this.connectTicketReader = this.connectTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n        this.capturedTicketHandler = this.capturedTicketHandler.bind(this);\n        this.obliterateTicketHandler = this.obliterateTicketHandler.bind(this);\n        this.closeTicketViewHandler = this.closeTicketViewHandler.bind(this);\n        /**\n         * @type {TicketReader}\n         */\n        this.ticketReader = null;\n    }\n\n    translateTicketType(ticketType){\n        switch (ticketType) {\n            case \"0\": return \"Absolvent\";\n            case \"1\": return \"Begleitperson\";\n            case \"2\": return \"Parkticket\";\n            default: break;\n        }\n    }\n\n    connectTicketReader() {\n        let ticketReader = new TicketReader();\n        ticketReader.onReady = () => {\n            this.ticketReader = this.state.connectTR;\n            this.setState({ connectTR: null });\n        };\n        ticketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"disconnected\":\n                    this.setState({ connected: connectionState });\n                    break;\n                case 'failed':\n                    this.setState({ connected: connectionState });\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    this.setState({ connected: connectionState });\n                    break;\n                default:\n                    break;\n            }\n        };\n        ticketReader.onAnswer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ TRQRCode: url, connectTRStep: 1 });\n        };\n        this.setState({ connectTR: ticketReader, connectTRStep: 0 });\n    }\n\n    scanDoneHandler(binaryString) {\n        let obj = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectTR.setMasterConfig(obj);\n    }\n\n    /**\n     * @typedef TicketCodeData\n     * @property {String} id - Hex string of the identifier\n     * @property {String} sIG - Secret ingredient of the user to calculate the hash \n     */\n\n    /**\n     * Handler for the scanner when the ticket was scanned\n     * @param {TicketCodeData} data - The data from the QR-Code of the ticket\n     */\n    async capturedTicketHandler(data) {\n        try {\n            let ticketData = JSON.parse(data);\n            if (!ticketData.id || !ticketData.sIG) throw Error(\"Fehlende Angaben im Ticket-QR-Code. Möglicherweise liegt eine Fälschung vor.\");\n            let ticket = await this.ticketReader.readTicketRemote(ticketData.id);\n            this.setState({ currentTicket: ticket, currentSecretIngredient: ticketData.sIG });\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    /**\n     * Obliterates a ticket in the IDB\n     */\n    async obliterateTicketHandler() {\n        try {\n            await this.ticketReader.obliterateTicketRemote(this.state.currentTicket.identifier, this.state.currentSecretIngredient);\n            alert('Erfolgreich entwertet!');\n            this.closeTicketViewHandler();\n        } catch (error) {\n            alert(error);\n        }\n    }\n\n    closeTicketViewHandler() {\n        this.setState({ currentTicket: null, currentSecretIngredient: null });\n    }\n\n    render() {\n        return (\n            <Box className=\"Entrance\" pad=\"medium\">\n                {!this.state.connected &&\n                    <Box>\n                        <p>Wenn Sie dieses Gerät als Ticket Leser verwenden möchten, müssen Sie es erst mit dem Event-Manager verbinden.</p>\n                        <p>Bitte stellen Sie sicher, dass dieses Gerät mit dem selben lokalen Netzwerk, wie der Event-Manager verbunden ist.</p>\n                        <Button onClick={this.connectTicketReader} label=\"Ticket Reader Aktivieren\"></Button>\n                        {this.state.connectTR &&\n                            <Dialog title=\"Als Ticket Reader verbinden\" onAbort={() => { this.setState({ connectTR: null }); }}>\n                                {this.state.connectTRStep === 0 &&\n                                    <div>\n                                        <div className=\"scanner\">\n                                            <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte den Code des Initiators scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                                {this.state.connectTRStep === 1 &&\n                                    <div>\n                                        <div className=\"qrcode\">\n                                            {!this.state.TRQRCode && <div className=\"loader\">Loading...</div>}\n                                            {this.state.TRQRCode && <img src={this.state.TRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                        </div>\n                                        <div className=\"description\">\n                                            <p>Bitte nun mit dem Initiator Gerät scannen</p>\n                                        </div>\n                                    </div>\n                                }\n                            </Dialog>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'connected' &&\n                    <Box>\n                        <p>Sie sind verbunden</p>\n                        {this.state.currentTicket === null && <QRScanner onDone={this.capturedTicketHandler} label=\"Scanvorgang starten\"></QRScanner>}\n                        {this.state.currentTicket &&\n                            <Box>\n                                <h1>{this.state.currentTicket.surname}, {this.state.currentTicket.forename}</h1>\n                                <Text size=\"2em\" pad=\"small\">{this.translateTicketType(this.state.currentTicket.ticketType)}</Text>\n                                <Text size=\"2em\" pad=\"small\">{(this.state.currentTicket.isValid && !this.state.currentTicket.isUsed) ? 'OK' : 'Ungültiges Ticket!'}</Text>\n                                <Box gap=\"small\">\n                                    <Button label=\"Entwerte Ticket\" onClick={this.obliterateTicketHandler}></Button>\n                                    <Button label=\"Schließen\" onClick={this.closeTicketViewHandler}></Button>\n                                </Box>\n                            </Box>\n                        }\n                    </Box>\n                }\n                {this.state.connected === 'disconnected' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte warten Sie einen Moment...</p>\n                        <p className=\"loader\"></p>\n                    </Box>\n                }\n                {this.state.connected === 'failed' &&\n                    <Box>\n                        <p>Die Verbindung wurde unterbrochen!</p>\n                        <p>Bitte aktivieren Sie den Reader erneut.</p>\n                        <Button onClick={() => { this.setState({ connected: null }); this.connectTicketReader() }} label=\"Ticket Reader Aktivieren\"></Button>\n                    </Box>\n                }\n            </Box>\n        );\n    }\n}\n\nexport default Entrance;\n","import Web3 from 'web3';\nimport Config from '../../config';\n\n/**\n * Class for basic operations and preparations for the local caching of ticket data\n */\nclass LocalTicketMirror {\n\n    constructor() {\n\n        // Binding \"this\" to methods that get called from other contexts\n        this._createDB = this._createDB.bind(this);\n        this.saveTicketMirror = this.saveTicketMirror.bind(this);\n        this.getTicketList = this.getTicketList.bind(this);\n\n        // Check if Indexed DB (IDB) technology is supported in the current browser\n        if (!window.indexedDB) {\n            throw Error(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\n        }\n\n        // Collection for DB Requests that happen before initialization of the DB connection instance (this.db)\n        this.waitingForIDBReadyQueue = [];\n\n        // Finally initializing DB connection\n        this._initDB();\n    }\n\n    /**\n     * Initializes connection to IDB and saves the connection\n     * instance to \"this.db\"\n     */\n    _initDB() {\n        console.debug('Initializing IDB Connection');\n        var request = window.indexedDB.open(Config.IDB_NAME, 1);\n\n        request.addEventListener('upgradeneeded', this._createDB);\n        request.addEventListener('success', (ev) => {\n            console.debug('IDB Connection established');\n            this.db = ev.target.result;\n            this.waitingForIDBReadyQueue.forEach((resolve) => {\n                resolve(this.db);\n            });\n        });\n        request.addEventListener('error', (ev) => {\n            console.error(\"Database error: \" + ev.target.errorCode);\n        });\n    }\n\n    /**\n     * Eventhandler for cases where the IDB has to be created / initialized\n     * Only for internal use.\n     * @param {Event} event \n     */\n    _createDB(event) {\n        this.db = event.target.result;\n\n        // Create an objectStore for this database\n        this.db.createObjectStore(\"tickets\", { keyPath: \"identifier\" });\n    }\n\n    /**\n     * Getter for the IDB Connection. Only for internal use.\n     * @returns Returns a Promis that is resolved with a IDBConnection when it is ready.\n     */\n    _getIDB() {\n        return new Promise((resolve) => {\n            if (this.db) {\n                resolve(this.db);\n            } else {\n                this.waitingForIDBReadyQueue.push(resolve);\n            }\n        });\n    }\n\n    /**\n     * Method that writes data to the IDB datastore \"tickets\"\n     */\n    async saveTicketMirror(tickets) {\n        try {\n            var db = await this._getIDB();\n\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            objectStore.clear();\n\n            tickets.forEach((ticket) => {\n                objectStore.add(ticket);\n            });\n        }catch(error){\n            console.error(error);\n            alert('Es ist ein Fehler bei der Indexed DB aufgetreten');\n        }\n    }\n\n    /**\n     * A local representation of a ticket joined out of the private db and the smart contract\n     * @typedef {Object} Ticket\n     * @property {String} identifier\n     * @property {Boolean} isValid\n     * @property {Boolean} isUsed\n     * @property {String} ticketType \n     */\n\n    /**\n     * For frontend purposes to get all tickets out of the db.\n     * @returns {Ticket[]} Returns an array of tickets\n     */\n    getTicketList() {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.getAll();\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var tickets = event.target.result;\n                return resolve(tickets);\n            };\n        });\n    }\n\n    /**\n     * Fetches a ticket by its identifier\n     * @param {String} identifier - Unique identifier of the ticket\n     * @returns {Ticket} Returns a promise that resolves as the ticket\n     */\n    getTicket(identifier) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readonly\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = function (event) {\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Ticket does not exist.\");\n                return resolve(ticket);\n            };\n        });\n    }\n\n    /**\n     * Obliterates a ticket selected by its unique identifer.\n     * The secretIngredient of the owner is checked to validate the persons identity.\n     * @param {String} identifier - Unique identifier of the ticket\n     * @param {String} secretIngredient - Specific secretIngredient of the user that was used to generate the identifer\n     * @returns {Promise} Returns a promise that is resolved with null or rejected with an error message\n     */\n    obliterateTicket(identifier, secretIngredient) {\n        return new Promise(async (resolve, reject) => {\n            var db = await this._getIDB().catch(console.error);\n            if (!db) return reject();\n            var objectStore = db.transaction(\"tickets\", \"readwrite\").objectStore(\"tickets\");\n            var request = objectStore.get(identifier);\n            request.onerror = reject;\n            request.onsuccess = (event) => {\n                // Get the old value that we want to update\n                var ticket = event.target.result;\n                if (!ticket) return reject(\"Das Ticket existiert nicht.\");\n\n                // Check secretIngredient and identifier hash\n                var valuesForHash = secretIngredient + ticket.forename + ticket.surname + ticket.ticketType;\n                var checkSum = Web3.utils.sha3(valuesForHash);\n\n                if (checkSum !== identifier) return reject(\"Die Identität des Tickets konnte nicht verifiziert werden.\");\n\n                // Check validity and if it was not used before\n                if (!ticket.isValid) return reject(\"Das Ticket ist nicht gültig.\");\n                if (ticket.isUsed) return reject(\"Das Ticket wurde breits entwertet.\");\n\n                ticket.isUsed = true;\n\n                // Put this updated object back into the database.\n                var requestUpdate = objectStore.put(ticket);\n                requestUpdate.onerror = reject;\n                requestUpdate.onsuccess = resolve;\n            };\n        });\n    }\n\n}\n\nexport default LocalTicketMirror;","import React from 'react';\nimport { Box, Button, List, CheckBox } from 'grommet';\n\n// eslint-disable-next-line\nimport LocalTicketMirror from '../Classes/LocalTicketMirror';\n\nimport UserContext from '../../AppContexts/UserContext';\nimport Config from '../../config';\n\nclass EntranceDashboard extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = { lockDataset: false, tickets: [] };\n        this.handleDumpMirror = this.handleDumpMirror.bind(this);\n        this.showTickets = this.showTickets.bind(this);\n        this.lockHandler = this.lockHandler.bind(this);\n        if (!this.props.localTicketMirror) throw new Error(\"Missing LocalTicketMirror\");\n        this.showTickets();\n    }\n\n    translateTicketType(ticketType) {\n        switch (ticketType) {\n            case \"0\": return \"Absolvent\";\n            case \"1\": return \"Begleitperson\";\n            case \"2\": return \"Parkticket\";\n            default: break;\n        }\n    }\n\n    async handleDumpMirror() {\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/tickets/\", {\n            method: 'GET',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log);\n\n        if (!response.ok) {\n            return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n        }\n\n        var tickets = await response.json().catch(console.log);\n\n        if (!tickets) return alert('Beim Laden der Tickets ist ein Fehler aufgetreten.');\n\n        ltm.saveTicketMirror(tickets);\n\n        this.showTickets();\n    }\n\n    async showTickets() {\n        // Reading out of idb all tickets\n        /**\n         * @type LocalTicketMirror\n         */\n        let ltm = this.props.localTicketMirror;\n        let tickets = await ltm.getTicketList().catch(console.error);\n        if (!tickets) return;\n\n        this.setState({ tickets, lockDataset: (tickets.length > 0 ? true : false) });\n    }\n\n    lockHandler(event){\n        let ok = window.confirm('Sind Sie sich sicher, dass sie den Datensatz erneut herunterladen möchten? Sie werden alle Daten zu bisher eingelösten Tickets verlieren.'); \n        if(ok){\n            this.setState({ lockDataset: event.target.checked });\n        }\n    }\n\n    render() {\n        return (\n            <Box className=\"EntranceDashboard\" pad=\"medium\" gap=\"small\">\n                <Box direction=\"row\" gap=\"small\">\n                    <Button label=\"Ticketdaten für den Offline-Einlass herunterladen\" onClick={this.handleDumpMirror} disabled={this.state.lockDataset}></Button>\n                    <CheckBox label=\"Datensatz schützen\" toggle={true} onChange={this.lockHandler} checked={this.state.lockDataset}></CheckBox>\n                </Box>\n                <List\n                    primaryKey={(ticket) => { return <b key={ticket.identifier + 't'}>{ticket.surname || 'Unkown'}, {ticket.forename || 'Unkown'} - {this.translateTicketType(ticket.ticketType)} {ticket.isWheelchairUser ? '!Rollstuhlfahrer!' : ''}</b> }}\n                    secondaryKey={(ticket) => { return <span key={ticket.identifier + 's'}>{ticket.isValid ? 'gültig' : 'ungültig'} - {ticket.isUsed ? 'benutzt' : 'unbenutzt'}</span> }}\n                    data={this.state.tickets}\n                />\n            </Box>\n        );\n    }\n}\n\nexport default EntranceDashboard;\n","// eslint-disable-next-line\nimport adapter from 'webrtc-adapter';\n\n/**\n * Represents an object holder for diverse connectio objects to the ticket reader.\n */\nclass RemoteTicketReader {\n\n    constructor() {\n        // Binding \"this\" to the event handlers\n        this.iceCandidatesHandler = this.iceCandidatesHandler.bind(this);\n        this.dataChannelOpenHandler = this.dataChannelOpenHandler.bind(this);\n        this.generateOfferCode = this.generateOfferCode.bind(this);\n        this.dataChannelClosedHandler = this.dataChannelClosedHandler.bind(this);\n        this.connectionChangeHandler = this.connectionChangeHandler.bind(this);\n        this.setTicketReaderConfig = this.setTicketReaderConfig.bind(this);\n        this.messageHandler = this.messageHandler.bind(this);\n\n        // Defining a unique id for this instance\n        this.uuid = this.createUUID();\n\n        // Initializing empty event listeners to prevent \"undefined\" errors\n\n        /**\n         * @public\n         * This eventlistener is called when the \n         * ticket reader changed its connection state. Please implement externally.\n         * @param {String} connectionState - State of the connection.\n         */\n        this.onConnectionChanged = function (connectionState) { };\n\n        /**\n         * @public\n         * This eventlistener is called once when the \n         * ticket reader datachannel is ready to use after initiaization. Please implement externally.\n         */\n        this.onReady = function () { };\n\n        /**\n         * @public\n         * This eventlistener is called when the data \n         * for the connection offer is generated. Please implement externally.\n         * @param {Object} config - The config.\n         */\n        this.onOffer = function (config) { };\n\n        /**\n         * This callback is for onGetTicket eventlistener.\n         * @callback onGetTicketCallback\n         * @param {Object} ticket - The ticket as JS Object.\n         * @param {String} [errorMessage] - In case of ticket = null an error a message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires an identifier and a callback \n         * that needs to be called with the ticket as JS Object.\n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {onGetTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onGetTicket = function (identifier, callback) { };\n\n        /**\n         * This callback is for onObliterateTicket eventlistener.\n         * @callback onObliterateTicketCallback\n         * @param {Boolean} success - Whether the obliterating was successful or not.\n         * @param {String} [errorMessage] - In case of success = false, an error message should be provided.\n         */\n\n        /**\n         * @public\n         * This eventlistener requires identifier and the secret ingredient and a callback \n         * that needs to be called with true or false depending if successfully obliterated or not. \n         * Please implement externally.\n         * @param {String} identifier - Identifier of the ticket.\n         * @param {String} secretIngredient - Secret ingredient used for generating the identifier of the ticket.\n         * @param {onObliterateTicketCallback} callback - Callback that should be called with a ticket Object.\n         */\n        this.onObliterateTicket = function (identifier, secretIngredient, callback) { };\n\n        // Initializing the RTC connection\n        this.initConnection();\n    }\n\n    /**\n     * @private\n     * Prepares RTCPeerConnection and datachannels for\n     * the connection with a ticket reader client.\n     */\n    initConnection() {\n        const servers = null;\n        const dataConstraint = null;\n\n        this.icecandidates = [];\n\n        this.localPeerConnection = new RTCPeerConnection(servers);\n        this.localPeerConnection.addEventListener('icecandidate', this.iceCandidatesHandler);\n\n        this.localPeerConnection.addEventListener('connectionstatechange', this.connectionChangeHandler);\n\n        this.dataChannel = this.localPeerConnection.createDataChannel('sendDataChannel', dataConstraint);\n        this.dataChannel.addEventListener('message', this.messageHandler);\n        this.dataChannel.addEventListener('open', this.dataChannelOpenHandler);\n        this.dataChannel.addEventListener('close', this.dataChannelClosedHandler);\n\n        this.createOffer();\n    }\n\n    /**\n     * @private\n     * Eventhandler for new icecandidates from the RTCPeerConnection.\n     * Only for internal use.\n     * @param {RTCPeerConnectionIceEvent} event \n     */\n    iceCandidatesHandler(event) {\n        this.icecandidates.push(event.candidate);\n        if (this.offer && !this.qrcode) {\n            setTimeout(this.generateOfferCode, 200); // Set a delay to collect some more icecandidates\n        }\n    }\n\n    /**\n     * @private\n     * Eventhandler for changed connection states.\n     * Only for internal use. For external event-listening, the \"onConnectionChanged\" property\n     * should be implemented!\n     * @param {Event} event \n     */\n    connectionChangeHandler(event) {\n        console.debug(event);\n        let connectionState = event.target.connectionState;\n\n        switch (connectionState) {\n            case \"connected\":\n                // The connection has become fully connected\n                break;\n            case \"disconnected\":\n                break;\n            case \"failed\":\n                // One or more transports has terminated unexpectedly or in an error\n                break;\n            case \"closed\":\n                // The connection has been closed\n                break;\n            default:\n                break;\n        }\n\n        this.onConnectionChanged(connectionState);\n\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is ready.\n     * @param {Event} event \n     */\n    dataChannelOpenHandler(event) {\n        console.debug(event);\n        this.onReady();\n        this.dataChannel.send('Hallo Client!');\n    }\n\n    /**\n     * @private\n     * Eventhandler for the case when the datachannel is closed.\n     * @param {Event} event \n     */\n    dataChannelClosedHandler(event) {\n        console.debug('Data Channel Closed', event);\n    }\n\n    /**\n     * @private\n     * Eventhandler for new incoming messages via the datachannel.\n     * @param {Event} event \n     */\n    messageHandler(event) {\n        console.debug(\"Message received:\", event.data);\n        var msg;\n        try {\n            msg = JSON.parse(event.data);\n        } catch (e) {\n            console.error(e);\n            console.debug(\"Message was:\", event.data);\n            return;\n        }\n\n        /** Messages look like this...\n         * msg = {\n                type: \"Request\",     \n                reqId: Unique String,\n                context: String,\n                method: String,\n                params: [Any]\n            }\n         */\n\n        /** Answer Messages should look like this...\n        * msg = {\n               type: \"Answer\",\n               reqId: Unique String,\n               result: Any,\n               error: String\n           }\n        */\n\n        // Switching between different request types and contexts\n        switch (msg.context) {\n            case \"ticketMirror\":\n                if (msg.method === \"getTicket\") {\n                    this.onGetTicket(msg.params[0], (ticket, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: ticket,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                } else if (msg.method === \"obliterateTicket\") {\n                    this.onObliterateTicket(msg.params[0], msg.params[1], (success, errorMsg) => {\n                        let answerMsg = {\n                            reqId: msg.reqId,\n                            result: success,\n                            error: errorMsg\n                        }\n                        try {\n                            this.dataChannel.send(JSON.stringify(answerMsg));\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * Method to create unique id.\n     */\n    createUUID() {\n        var dt = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            return (c === 'x' ? r : (r & 0x3 & 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     * @private\n     * Method that creates a new connection configuration offer.\n     */\n    async createOffer() {\n        this.offer = await this.localPeerConnection.createOffer().catch(console.error);\n        await this.localPeerConnection.setLocalDescription(this.offer).catch(console.error);\n    }\n\n    /**\n     * @private\n     * Method to generate a complete configuration for the\n     * ticketreader client.\n     */\n    async generateOfferCode() {\n        let data = { offer: this.offer, candidates: this.icecandidates };\n        this.onOffer(data);\n    }\n\n    /**\n     * @typedef {Object} TicketReaderConfig\n     * @property {RTCSessionDescriptionInit} answer\n     * @property {RTCIceCandidate[]} candidates\n     */\n\n    /**\n     * @public\n     * Method to set the connection config received from the\n     * ticketreader client.\n     * @param {TicketReaderConfig} config \n     */\n    async setTicketReaderConfig(config) {\n        // Setting remote description\n        await this.localPeerConnection.setRemoteDescription(new RTCSessionDescription(config.answer)).catch(this.handleError);\n\n        // Adding ice candidates from remote\n        config.candidates.forEach((candidate) => {\n            this.localPeerConnection.addIceCandidate(candidate).catch(this.handleError);\n        });\n    }\n\n}\nexport default RemoteTicketReader;","import React from 'react';\nimport { Box, Button, List } from 'grommet';\nimport QRScanner from '../../Utilities/Components/QRScanner';\nimport Dialog from '../../Utilities/Components/Dialog';\n\nimport RemoteTicketReader from '../Classes/RemoteTicketReader';\n\nimport QRCode from 'qrcode';\nimport pako from 'pako';\n\n/**\n * The main unit (master) to which instances of TicketReader can connect.\n */\nclass TicketReaderManager extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.connectRemoteTicketReader = this.connectRemoteTicketReader.bind(this);\n        this.scanDoneHandler = this.scanDoneHandler.bind(this);\n    }\n\n    scanDoneHandler(binaryString){\n        let config = JSON.parse(pako.inflate(binaryString, { to: 'string' }));\n        this.state.connectRTR.setTicketReaderConfig(config);\n    }\n\n    /**\n     * Initiates the RTC Peer connection to an instance of TicketReader on another device.\n     */\n    connectRemoteTicketReader() {\n        let remoteTicketReader = new RemoteTicketReader();\n        remoteTicketReader.onReady = () => {\n            this.setState({ connectRTR: null });\n            this.props.onRTR(remoteTicketReader);\n        };\n        remoteTicketReader.onOffer = async (config) => {\n            // Compress data\n            let binaryString = pako.deflate(JSON.stringify(config), { level: 9, to: \"string\" });\n\n            // Create QR Code\n            let url = await QRCode.toDataURL(binaryString).catch(console.error);\n            this.setState({ RTRQRCode: url });\n        }\n        this.setState({ connectRTR: remoteTicketReader, addRTRStep: 0 });\n    }\n\n    render() {\n        return (\n            <Box className=\"TicketReaderManager\" pad=\"medium\">\n                <p>\n                    Derzeit sind {this.props.RTRList.length} Ticket Leser verbunden.\n                </p>\n                <List\n                    primaryKey={(rtr) => { return <b key={rtr.uuid + 't'}> {rtr.uuid} - {rtr.localPeerConnection.connectionState} </b> }}\n                    secondaryKey={(rtr) => { return <span key={rtr.uuid + 's'}> Click to remove </span> }}\n                    onClickItem={this.props.onRemoveRTR}\n                    data={this.props.RTRList}\n                />\n                <Button onClick={this.connectRemoteTicketReader} label=\"Ticket Leser Hinzufügen\"></Button>\n                {this.state.connectRTR &&\n                    <Dialog title=\"Remote Ticket Reader Hinzufügen\" onAbort={() => { this.setState({ connectRTR: null }); }}>\n                        {this.state.addRTRStep === 0 &&\n                            <div>\n                                <div className=\"ticket-reader-qrcode\">\n                                    {!this.state.RTRQRCode && <div className=\"loader\">Loading...</div>}\n                                    {this.state.RTRQRCode && <img src={this.state.RTRQRCode} width=\"100%\" alt=\"Ein QR-Code sollte hier angezeigt werden.\" />}\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte mit dem Zielgerät scannen</p>\n                                </div>\n                                <div className=\"ticket-reader-action\">\n                                    <Button onClick={() => { this.setState({ addRTRStep: 1 }); }} label=\"Weiter\"></Button>\n                                </div>\n                            </div>\n                        }\n                        {this.state.addRTRStep === 1 &&\n                            <div>\n                                <div className=\"ticket-reader-scanner\">\n                                    <QRScanner onDone={this.scanDoneHandler} label=\"Scanvorgang starten\"></QRScanner>\n                                </div>\n                                <div className=\"ticket-reader-description\">\n                                    <p>Bitte nun den Code des Zielgeräts scannen</p>\n                                </div>\n                            </div>\n                        }\n                    </Dialog>\n                }\n            </Box>\n        );\n    }\n\n}\n\nexport default TicketReaderManager;","import React from 'react';\n//import './TicketOverview.css';\nimport { Box, Button, Select, Text, List, TextInput } from 'grommet';\nimport Config from '../../config';\nimport { CSVReader } from 'react-papaparse';\n\nclass Hauptansicht extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.getConfigured = this.getConfigured.bind(this);\n    }\n\n    getConfigured(key) {\n        var wert = this.props.mapTest.get(key);\n        if (!wert)\n            return <Text key={key}>Nicht erledigt</Text>;\n        if (wert)\n            return <Text key={key}>Erledigt</Text>;\n    }\n\n    render() {\n        var Ansicht = [];\n        if (this.props.initializeStep === 0) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"start\">\n                <Text textAlign=\"center\" weight=\"bold\" size=\"xxlarge\">\n                    Guten Tag und Herzlich Wilkommen zum Ticketsystem.\n                </Text>\n                <Box pad=\"medium\"></Box>\n                <Text>\n                    Die nächsten Schritte dienen zur Initalisierung des Systems.\n                    Sie werden durch die notwendigen Vorbereitungsschritte geführt.\n                </Text>\n                <Text textAlign=\"center\">\n                    Für die Initalisierung sind folgende Schritte notwendig\n                </Text>\n            </Box>\n        }\n        if (this.props.initializeStep === 6) {\n            Ansicht[0] = <Box pad=\"medium\" key=\"end\">\n                <Text textAlign=\"center\">\n                    Herzlich Glückwunsch Sie haben das Ticketsystem erfolgreich konfiguriert!\n                    Mit Zurück gelangen Sie wieder zur ersten Ansicht und können erneut durch die Konfiguration navigieren.\n                </Text>\n            </Box>\n        }\n\n        Ansicht[1] =\n            <Box>\n                <List\n                    primaryKey=\"initializeStep\"\n                    secondaryKey=\"doneSteps\"\n                    data={[\n                        { initializeStep: <Text size=\"large\" weight=\"bold\" key=\"header\">Vorbereitsungsschritt</Text>, doneSteps: <Text size=\"large\" weight=\"bold\" key=\"headerZustand\">Zustand</Text> },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusDB\"> Initalisieren der Datenbank</Text>, doneSteps: this.getConfigured(\"DB\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminAccount\">Hinzufügen eines Administratorbenutzers</Text>, doneSteps: this.getConfigured(\"AA\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusMS\">Initialisieren des Mailservers</Text>, doneSteps: this.getConfigured(\"MS\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusAdminWallet\">Einrichten des Master-Wallets</Text>, doneSteps: this.getConfigured(\"AW\") },\n                        { initializeStep: <Text weight=\"normal\" key=\"StatusListe\">Einlesen der Absolventen-Liste und Erstellung der One Time Passwörter</Text>, doneSteps: this.getConfigured(\"AL\") },\n                    ]}\n                />\n            </Box>\n        return Ansicht;\n    }\n}\n\nclass AddWallet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { httpProvider: \"\" };\n        this.configureTheAdminWallet = this.configureTheAdminWallet.bind(this);\n    }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminWallet() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/generateWallet\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                http_provider: this.state.httpProvider,\n            })\n\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            var address = response.json().catch(console.log)\n            this.props.setWalletAddress(address.wallet_address);\n            this.props.changeValueOfmapTest(\"AW\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzufügen des Wallets für den Master-User:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <TextInput\n                    placeholder=\"HTTP-Provider DNS:Port\"\n                    value={this.state.httpProvider}\n                    onChange={(event) => { this.setState({ httpProvider: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminWallet} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DeploySmartContract extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { walletBalance: \"\", neededBalance: \"\" };\n        this.deploySmartContract = this.deploySmartContract.bind(this);\n        this.getBalanceFromWallet = this.getBalanceFromWallet.bind(this);\n        this.getPriceOfContract = this.getPriceOfContract.bind(this);\n    }\n\n    async getPriceOfContract() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/shopConfig\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token\n            }\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n                    alert(rückgabe.message)\n        }\n\n        var data = await response.json().catch(console.log)\n\n        if (!data) return\n\n        console.log(data)\n\n    }\n\n    async getBalanceFromWallet() {\n        var Web3 = require('web3');\n        var web3 = new Web3(new Web3.providers.HttpProvider(this.props.httpProvider));\n        web3.eth.getBalance(\"0x6c1afA1A56d92EeFd99926636b1a1c284B0CE298\", (error, response) => {\n            if (error) {\n                console.log(\"Fehler beim Abruf der Balance des Wallets\");\n            }\n            if (!response) {\n                console.log(\"Fehler beim Abruf der Balance des Wallets\");\n                alert(response.message);\n            }\n            console.log(response)\n\n            if (response) {\n                var balance = response;\n                console.log(balance)\n                this.setState({ walletBalance: balance });\n            }\n        });\n    }\n\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async deploySmartContract() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/deployContract\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"DC\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Smart Contract auf der Blockchain veröffentlichen:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <TextInput\n                    placeholder=\"HTTP-Provider DNS:Port\"\n                    value={this.state.httpProvider}\n                    onChange={(event) => { this.setState({ httpProvider: event.target.value }) }}\n                />\n                <Button label=\"TEST\" onClick={this.getPriceOfContract}></Button>\n            </Box>\n            <Button onClick={this.configureTheAdminWallet} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\n\n\nclass ConfigureAdminAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { email: \"\", password: \"\" };\n        this.configureTheAdminAcc = this.configureTheAdminAcc.bind(this);\n    }\n\n    //TODO: CONFIUGRE WALLET ANPASSEN AUF URI \n    async configureTheAdminAcc() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/adminUser\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: this.state.email,\n                password: this.state.password,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"AA\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Hinzufügen des Administratorbenutzers:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">E-Mail-Adresse</Text>\n                <TextInput\n                    placeholder=\"E-Mail\"\n                    value={this.state.email}\n                    onChange={(event) => { this.setState({ email: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Passwort\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Button onClick={this.configureTheAdminAcc} label=\"Hinzufügen\"></Button>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureDatabase extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", user: \"\", password: \"\", db: \"\", port: \"\" };\n        this.configureTheDatabase = this.configureTheDatabase.bind(this);\n    }\n\n    //TODO: Problem bei body \n    async configureTheDatabase() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/database\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                host: this.state.host,\n                user: this.state.user,\n                password: this.state.password,\n                database: this.state.db,\n                port: this.state.port,\n            })\n        }).catch(console.log)\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"DB\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Konfigurieren der Datenbank:</Text>\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Datenbank-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Datenbank-Host eingeben\"\n                    value={this.state.host}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Text weight=\"bold\">Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Datenbank:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Datenbank eingeben\"\n                    value={this.state.db}\n                    onChange={(event) => { this.setState({ db: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"medium\">\n                <Button onClick={this.configureTheDatabase} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ConfigureMailserver extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { host: \"\", port: null, conncetion: true, user: \"\", password: \"\", standardMail: \"\", standardPrefix: \"\" };\n        this.configureTheMailserver = this.configureTheMailserver.bind(this);\n    }\n    async configureTheMailserver() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"/setup/mailserver\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json'\n            },\n\n            body: JSON.stringify({\n                host: this.state.host,\n                port: this.state.port,\n                secure: this.state.conncetion,\n                user: this.state.user,\n                password: this.state.password,\n                default_from: this.state.standardMail,\n                default_subject_prefix: this.state.standardPrefix,\n            })\n        }).catch(console.log)\n\n        if (!response.ok) {\n            const rückgabe = await response.json().catch(console.log);\n            switch (response.status) {\n                case 400: alert(rückgabe.message); break;\n                case 410: alert(rückgabe.message); break;\n                case 500: alert(rückgabe.message); break;\n                default:\n                    alert(rückgabe.message)\n            }\n        }\n\n        if (response.ok) {\n            this.props.changeValueOfmapTest(\"MS\");\n            this.props.changeStep();\n        }\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht = <Box>\n            <Text size=\"large\" weight=\"bold\">Konfigurieren des Mailservers:</Text>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Mailserver-Host:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Mailserver-Host eingeben\"\n                    value={this.state.textInput}\n                    onChange={(event) => { this.setState({ host: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Port:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Port eingeben\"\n                    value={this.state.port}\n                    onChange\n                    ={(event) => { this.setState({ port: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Sichere Verbindung:</Text>\n                <Select\n                    options={['true', 'false']}\n                    value={this.state.conncetion}\n                    onChange={({ value, option }) => { this.setState({ conncetion: option }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\"> Benutzer:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Benutzer eingeben\"\n                    value={this.state.user}\n                    onChange={(event) => { this.setState({ user: event.target.value }) }}\n                />\n            </Box>\n\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Passwort: </Text>\n                <TextInput\n                    placeholder=\"Hier bitte das Passwort eingeben\"\n                    value={this.state.password}\n                    onChange={(event) => { this.setState({ password: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Mail:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte die Standard Mail eingeben\"\n                    value={this.state.standardMail}\n                    onChange={(event) => { this.setState({ standardMail: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Text weight=\"bold\">Standard Subject Prefix:</Text>\n                <TextInput\n                    placeholder=\"Hier bitte den Standard Prefix eingeben\"\n                    value={this.state.standardPrefix}\n                    onChange={(event) => { this.setState({ standardPrefix: event.target.value }) }}\n                />\n            </Box>\n            <Box pad=\"small\">\n                <Button onClick={this.configureTheMailserver} label=\"Abschließen\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n        //TODO STANDARD (????)\n    }\n}\n\nclass AbsolventenListe extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { listeEingelesen: false, finished: false, initialeListe: [], dateiTyp: \"CSV\", path: \"\" };\n        this.useListAndSendMail = this.useListAndSendMail.bind(this);\n    }\n\n    //TODO FUNKTION ERSTELLEN\n    async useListAndSendMail() {\n        var response = await fetch(Config.BACKEND_BASE_URI + \"\", {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer f1df51e1835233014368105514f07a70e9f2255b279e5535810d7fbf2d565cc1d692d8b06d53f6157423bb3c63b97e5a42adfbe6277e48dc028d8043683acca13b1b9f83773015ff5f3533e9ad08943bac2eb003f24fc3e6c910d2e83e69f39ec1d3e3ac98d4d2965312670810aab8ec152338654bcab32e7c82cbe83545b0b5f307feed1976239fbe2718c97abab76768e6dcdb3e243fcead76ef2bc2ca72045f748da22dee9881a3aefe0b18ce9dd6d34eb4032ed56e1cb4d8bf11d2ff0d663b65f3ee2b2da04af8bc3b0473c4046fdc53248905d3499955f635c6ed9bb7e2defb03b54414ac617e4f73c96e6639bf1b89111458f5d830387f0c51e2c5a5d6',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n\n        var data = await response.json().catch(console.log)\n\n        if (!data.message) return\n\n        this.setState({ finished: true })\n        this.props.changeValueOfmapTest(\"AL\");\n        this.props.changeStep();\n    }\n\n    //Eingelesene Daten entgegennehmen und in den State schreiben\n    handleOnDrop = (data) => {\n        var liste = [];\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n\n        data.forEach((data) => {\n            console.log(data.data)\n            liste.push(data.data)\n        });\n\n        this.setState({ listeEingelesen: true, initialeListe: liste })\n    }\n\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    handleOnRemoveFile = (data) => {\n        console.log('---------------------------')\n        console.log(data)\n        console.log('---------------------------')\n    }\n\n\n    render() {\n        var Ansicht = [];\n        var emailList = this.state.initialeListe;\n        Ansicht = <Box>\n            <Box pad=\"medium\">\n                <Text size=\"large\" weight=\"bold\">Einlesen der Absolventen Liste</Text>\n            </Box>\n\n            {!this.state.listeEingelesen && !this.state.finished &&\n                <Box className=\"Eingaben\">\n                    <Box pad=\"medium\">\n                        <Text>Bitte eine Liste in der folgenden Darstellung einlesen:</Text>\n                        <span><Text weight=\"bold\">Header: </Text><Text>E-Mail; Name</Text></span>\n                        <span><Text weight=\"bold\">Datensatz 1: </Text><Text>Beispiel@web.de; Mustermann, Max</Text></span>\n                    </Box>\n                    <CSVReader\n                        onDrop={this.handleOnDrop}\n                        onError={this.handleOnError}\n                        config={{\n                            delimiter: \";\",\n                            header: true\n                        }}\n                        addRemoveButton\n                        onRemoveFile={this.handleOnRemoveFile}\n                    >\n                        <span>Drop CSV file here or click to upload.</span>\n                    </CSVReader>\n                </Box>\n            }\n\n            {this.state.listeEingelesen && !this.state.finished &&\n                <List className=\"langeListe\" pad=\"medium\"\n                    primaryKey=\"E-Mail\"\n                    secondaryKey=\"Name\"\n                    data={emailList}\n                />\n            }\n            <Box pad=\"medium\">\n                <Button onClick={this.useListAndSendMail} label=\"Abschließen\"></Button>\n            </Box>\n\n            {this.state.listeEingelesen && this.state.finished &&\n                <Text>Bitte den Nächsten Schritt</Text>\n            }\n\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass SystemInitalisierung extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.changeStep = this.changeStep.bind(this);\n        this.changeValueOfmapTest = this.changeValueOfmapTest.bind(this);\n        this.setWalletAddress = this.setWalletAddress.bind(this);\n        this.state = {\n            initializeStep: 0,\n            mapTest: new Map([[\"AW\", false], [\"DB\", false], [\"MS\", false], [\"AL\", false], [\"AA\", false], [\"DC\", false]]),\n            walletAddress: \"\",\n            httpProvider: \"\",\n        };\n    }\n    // TODO: Step fürs Aufsetzen von Master-User mit Wallet\n    // TODO: Step fürs Initialisieren der DB\n    // TODO: Step fürs Aufladen des Backend-Wallets mit Ether...\n\n    // Function to Change the Value of the state of Configuration\n    changeValueOfmapTest(key) {\n        this.setState(this.state.mapTest.set(key, true));\n    }\n\n    setWalletAddress(address) {\n        this.setState({ walletAddress: address });\n    }\n\n    setHttpProvider(httpProvider) {\n        this.setState({ httpProvider: httpProvider });\n    }\n\n    changeStep() {\n        var value;\n        if (this.state.initializeStep > 5) {\n            value = 0;\n        }\n        if (this.state.initializeStep < 6) {\n            value = 1 + this.state.initializeStep;\n        }\n        this.setState({ initializeStep: value });\n\n    }\n\n    render() {\n        return (\n            <Box className=\"SystemInitalisierung\" direction=\"column\" gap=\"medium\" pad=\"medium\" align=\"center\">\n                {this.state.initializeStep === 0 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}></Hauptansicht>}\n\n                {this.state.initializeStep === 1 && <ConfigureDatabase changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureDatabase>}\n\n                {this.state.initializeStep === 2 && <ConfigureAdminAccount changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureAdminAccount>}\n\n                {this.state.initializeStep === 3 && <ConfigureMailserver changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></ConfigureMailserver>}\n\n                {this.state.initializeStep === 4 && <AddWallet setWalletAddress={this.setWalletAddress.bind(this)} changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></AddWallet>}\n\n                {this.state.initializeStep === 4 && <DeploySmartContract httpProvider={this.state.httpProvider} walletAddress={this.state.walletAddress} changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></DeploySmartContract>}\n\n                {this.state.initializeStep === 5 && <AbsolventenListe changeValueOfmapTest={this.changeValueOfmapTest.bind(this)}\n                    changeStep={this.changeStep.bind(this)}></AbsolventenListe>}\n\n                {this.state.initializeStep === 6 && <Hauptansicht mapTest={this.state.mapTest} initializeStep={this.state.initializeStep}\n                    changeStep={this.changeStep.bind(this)}></Hauptansicht>}\n\n                {this.state.initializeStep === 0 && <Button onClick={this.changeStep} label=\"Konfiguration Beginnen\"></Button>}\n                {this.state.initializeStep !== 0 && this.state.initializeStep < 6 && <Button onClick={this.changeStep} label=\"Schritt Überspringen\"></Button>}\n                {this.state.initializeStep === 6 && <Box pad=\"medium\"> <Button label=\"Zurück\" onClick={this.changeStep}></Button></Box>}\n            </Box>\n        );\n    }\n}\n\nexport default SystemInitalisierung;\n","import React from 'react';\nimport { Box, Button, Text, TextInput } from 'grommet';\n\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementConfMaxTickets extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            Absolvententickets: \"\",\n            Begleitertickets: \"\",\n            Parktickets: \"\",            \n        }\n        this.changeValues = this.changeValues.bind(this);\n        this.setValuesAndChangeStep = this.setValuesAndChangeStep.bind(this)\n    }\n\n    async changeValues() {\n        /* TODO: NEU EINFÜGEN UND ANPASSEN \n            var response = await fetch(Config.BACKEND_BASE_URI + \"/api/v2/setup/\", {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer 91ba3c0f6ae8d56c4714260a8dbb7c6ce606797be4fb79eedfc73e4d6f212d255487b44e9c1b264deca11183605744c4c8c70d01b097872b41551c7a5dc8af3b7b7f755388835c67b8b094de2253e9ac95850e0575717ea5c3a9efa7239a0adaa70f6fcffec09f4b25ee4b6118fe0e9483f0d3faf8be0976a608460b0ad2156c0ddcc5f483db50404c2f6567b16a6087682d10c4ec22935be53f164a206d3f592baad81c301496b5ff5fca105e65a4121e1f0ae327d9eb5ae8f3f754fdbe7187f6a83e9e6fbe789268d8292521760e1b3f1dcb2a162b55a5b8b8089b21b996e1875f14b0b705a9cbcc806f4f3c4ac229cd3740175b0bf610bd514447430d2f15',\n            }\n        }).catch(console.log)\n\n        if (!response) return\n        */\n        //var data = await response.json().catch(console.log)\n\n        //if (!data) return\n        /*\n        var kopieTickets = this.state.tickets;\n        kopieTickets = kopieTickets.concat(data);\n\n        this.setState({ tickets: kopieTickets });\n        */\n    }\n\n\n    setValuesAndChangeStep (){\n        this.props.setMaxTicketMenge(this.state.Absolvententickets, this.state.Begleitertickets, this.state.Parktickets)\n        this.props.changeInitializeStep(0)\n    }\n\n    render() {\n        var Ansicht = [];\n        return (\n            Ansicht[0]=\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xxlarge\">Ticketkonfiguration</Text>\n                <Box pad=\"medium\"></Box>\n                Hier können die maximalen Tickets, die ein Benutzer (Absolvent) erwerben kann, konfiguriert werden. \n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Absolvententickets:</Text>\n                    <TextInput\n                        placeholder=\"Absolvententickets\"\n                        value={this.state.Absolvententickets}\n                        onChange={(event) => { this.setState({ Absolvententickets: event.target.value }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Begleitertickets:</Text>\n                    <TextInput\n                        placeholder=\"Begleitertickets\"\n                        value={this.state.Begleitertickets}\n                        onChange={(event) => { this.setState({ Begleitertickets: event.target.value }) }}\n                    />\n                </Box>\n                <Box pad=\"medium\">\n                    <Text weight=\"bold\">Parktickets:</Text>\n                    <TextInput\n                        placeholder=\"Parktickets\"\n                        value={this.state.Parktickets}\n                        onChange={(event) => { this.setState({ Parktickets: event.target.value }) }}\n                    />\n                </Box>\n                <Button label=\"Bestätigen\" onClick={this.setValuesAndChangeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementConfMaxTickets;\n","import React from 'react';\nimport { Box, Button } from 'grommet';\n\nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementSalesStatistics extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        this.changeStep = this.changeStep.bind(this);\n    }\n\n    changeStep (){\n        this.props.changeInitializeStep(0)\n\n    }\n    \n\n    render() {\n        return (\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                \n                <Button label=\"Bestätigen\" onClick={this.changeStep}></Button>\n            </Box >\n        );\n    }\n}\nexport default ShopManagementSalesStatistics;\n","import React from 'react';\nimport { Box, Button, Text } from 'grommet';\n \nimport './ShopManagement.css';\nimport './ShopManagement.js';\n\nclass ShopManagementViewBookings extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        this.changeStep = this.changeStep.bind(this);\n    }\n    changeStep(){\n        this.props.changeInitializeStep(0);\n    }\n\n    render(){\n        var ansicht = [];\n        return(\n            ansicht[0] =\n            <box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                <Text weight=\"bold\" size=\"xlarge\">Bestellungsübersicht</Text>\n                <Box pad=\"medium\"></Box>\n                <Text>Hier können die Bestellungen eingesehen und freigegeben werden.</Text>\n                <Box pad=\"medium\"></Box>\n                <Button label=\"Zurück zur Übersicht\" onClick={this.changeStep}></Button>\n            </box>\n        );\n    }\n\n}\nexport default ShopManagementViewBookings;","import React from 'react';\nimport { Box, Button, Text, DataTable } from 'grommet';\nimport Config from '../../config';\nimport './ShopManagement.css';\nimport ShopManagementConfMaxTickets from './ShopManagementConfMaxTickets';\nimport ShopManagementSalesStatistics from './ShopManagementSalesStatistics'\nimport ShopManagementViewBookings from './ShopManagementViewBookings'\n\nimport UserContext from '../../AppContexts/UserContext'\n\nclass DataQuickViewMaxTickets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagamentConfTickets = this.callShopManagamentConfTickets.bind(this);\n\n    }\n    callShopManagamentConfTickets() {\n        var value = 1;\n        this.props.changeInitializeStep(value);\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"purchaseableTicketsPerPerson\" className=\"quickViewOuterBox\" >\n            <Text>Anzahl der Tickets die ein Absolvent erwerben kann:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'Tickettype',\n                        header: <Text weight=\"bold\">Tickettyp</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Freigebene Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.maxTicketmenge}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Ticketanzahl konfigurieren\" onClick={this.callShopManagamentConfTickets}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewPayment extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    switchBooleanToString() {\n        var bezahloptionenArray = [];\n        for (let [key, value] of this.props.konfigurierteBezahloptionen) {\n            var switcher = \"\";\n            if (!value) {\n                switcher = \"Nicht Konfiguriert\"\n            }\n            if (value) {\n                switcher = \"Konfiguriert\"\n            }\n            bezahloptionenArray.push({ bezahlOption: key, konfiguriert: switcher })\n        }\n        return bezahloptionenArray;\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[0] = <Box name=\"paymentOptions\" className=\"quickViewOuterBox\">\n            <Text>Übersicht der Konfigurierten Bezahloptionen:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'bezahlOption',\n                        header: <Text weight=\"bold\">Bezahloption</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'konfiguriert',\n                        header: <Text weight=\"bold\">Ist Konfiguriert</Text>,\n                    },\n                ]}\n                data={this.switchBooleanToString()}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Bezahloptionen konfigurieren\"></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\nclass DataQuickViewBookings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.callShopManagementViewBookings = this.callShopManagementViewBookings.bind(this);\n    }\n\n    callShopManagementViewBookings() {\n        var value = 3;\n        this.props.changeInitializeStep(value);\n    }\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"statusBookings\" className=\"quickViewOuterBox\">\n            <Text>Anzahl und Status der Buchungen im System:</Text>\n            <Box className=\"platzhalter\" ></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'status',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.statusBookings}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box className=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Buchungen \" onClick={this.callShopManagementViewBookings}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewSalesStatistics extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n\n        this.callShopManagementSalesStatistics = this.callShopManagementSalesStatistics.bind(this)\n    }\n\n    callShopManagementSalesStatistics() {\n        var value = 4;\n        this.props.changeInitializeStep(value);\n    }\n\n\n    render() {\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"statusSales\" className=\"quickViewOuterBox\">\n            <Text>Anzahl und Status der Ticketbuchungen im System:</Text>\n            <Box pad=\"small\"></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'status',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Anzahl',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={this.props.statusSales}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box Class-Name=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Tickets verwalten\" onClick={this.callShopManagementSalesStatistics}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass DataQuickViewManageSales extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    \n\n    callShopManagementManageSales() {\n        var value = 5;\n        this.props.changeInitializeStep(value);\n    }\n\n\n    render() {\n        var salesStatus;\n        if(this.props.salesStatus){salesStatus = {Beschreibung: \"Ticketverkauf\", Status: \"Aktiv\"};};\n        if(!this.props.salesStatus){salesStatus= {Beschreibung: \"Ticketverkauf\", Status: \"Deaktiviert\"};};\n\n        var Ansicht = [];\n        Ansicht[1] = <Box name=\"boxManageSales\" className=\"quickViewOuterBox\">\n            <Text>Anzeige für den Status und das aktivieren und \n                deaktivieren des Ticketverkaufs</Text>\n            <Box pad=\"small\"></Box>\n            <DataTable className=\"quickViewDatatables\"\n                columns={[\n                    {\n                        property: 'Beschreibung',\n                        header: <Text weight=\"bold\">Status</Text>,\n                        primary: true,\n                    },\n                    {\n                        property: 'Status',\n                        header: <Text weight=\"bold\">Anzahl</Text>,\n                    },\n                ]}\n                data={salesStatus}\n            />\n            <Box className=\"platzhalter\" ></Box>\n            <Box Class-Name=\"ButtonBox\">\n                <Button className=\"buttonInDash\" label=\"Status ändern\" onClick={this.callShopManagementManageSales}></Button>\n            </Box>\n        </Box>\n        return Ansicht;\n    }\n}\n\nclass ShopManagement extends React.Component {\n\n    static contextType = UserContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            initializeStep: 0,\n            openBookings: 0,\n            salesStatus: true,\n            maxTicketmenge: [{ Tickettype: \"Absolvententickets\", Anzahl: 1 },\n            { Tickettype: \"Begleitertickets\", Anzahl: 2 },\n            { Tickettype: \"Parkttickets\", Anzahl: 1 }],\n            konfigurierteBezahloptionen: new Map([[\"Paypal\", false], [\"Überweisung\", false]]),\n            statusBookings:\n                [{ status: \"Gebucht\", Anzahl: 0 },\n                { status: \"Offen\", Anzahl: 0 },\n                { status: \"Stornieren\", Anzahl: 0 }],\n            statusSales:\n                [{ status: \"Verfügbar\", Anzahl: 0 },\n                { status: \"Verkauft\", Anzahl: 0 },\n                { status: \"Beantragt\", Anzahl: 0 },\n                { status: \"Stornieren\", Anzahl: 0 }],\n        }\n        this.changeInitializeStep = this.changeInitializeStep.bind(this);\n        this.setMaxTicketMenge = this.setMaxTicketMenge.bind(this);\n        this.getBookings = this.getBookings.bind(this);\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n\n    changeInitializeStep(value) {\n        this.setState({ initializeStep: value });\n    }\n\n    componentDidMount(){\n        this.getBookings();\n    }\n\n    async getBookings(){\n        const response = await fetch(Config.BACKEND_BASE_URI + '/api/v2/bookings/', {\n            method: 'GET',\n            mose: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + this.context.token,\n            },\n        }).catch(console.log);\n\n        if (!response.ok) {\n            switch (response.status) {\n                case 500:\n                    alert(\"Die Anmeldung ist aufgrund eines Server-Fehlers fehlgeschlagen. Bitte versuchen Sie es später erneut.\");\n                    break;\n                case 501:\n                    alert(\"Der Server kann die gewünschte Anfrage nicht ausführen.\");\n                    break;\n                default:\n                    alert(response.message);\n            }\n            return;\n        } else {\n            const rückgabe = await response.json().catch(console.log);\n            if (rückgabe) {\n                console.log(rückgabe.length);\n                var bezahlt = 0;\n                var unbezahlt = 0;\n                for(var test = 0; test < rückgabe.length; test++){\n                    if(rückgabe[test].paidAt !== null){\n                        bezahlt = bezahlt + 1;\n                    }\n                    if(rückgabe[test].paidAt === null){\n                        unbezahlt = unbezahlt + 1;\n                    }\n                }\n                this.setBookings(bezahlt, unbezahlt);\n            }\n        }\n    }\n\n    setBookings(bezahlt, unbezahlt){\n        var data = [{ status: \"Gebucht\", Anzahl: bezahlt },\n        { status: \"Offen\", Anzahl: unbezahlt },\n        { status: \"Stornieren\", Anzahl: 0 }];\n        this.setState({statusBookings: data});\n    }\n\n    //TODO AUS KONFIG ABRUFEN und mit SHOPMANGEMENT CONFTICKETS VERKNÜPFEN\n    setMaxTicketMenge(Absolvententickets, Begleitertickets, Parkttickets) {\n        var data = [{ Tickettype: \"Absolvententickets\", Anzahl: Absolvententickets },\n        { Tickettype: \"Begleitertickets\", Anzahl: Begleitertickets },\n        { Tickettype: \"Parkttickets\", Anzahl: Parkttickets }]\n        this.setState({maxTicketmenge: data});\n    }\n    setSalesStatus(status){\n        this.setState({salesStatus: status});\n    }\n\n    render() {\n        return (\n            <Box className=\"outerBoxOverview\" direction=\"column\" align=\"center\">\n                {this.state.initializeStep === 0 && <Box>\n                    <Box>\n                        <Text size=\"xxlarge\" weight=\"bold\">Hallo das ist die Übersicht der Shop Verwaltung</Text>\n                        <Box pad=\"medium\"></Box>\n                        <Button label=\"QuickView aktualisieren\" onClick={this.componentDidMount}></Button>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewMaxTickets maxTicketmenge={this.state.maxTicketmenge} changeInitializeStep={this.changeInitializeStep}></DataQuickViewMaxTickets>\n                        <DataQuickViewPayment konfigurierteBezahloptionen={this.state.konfigurierteBezahloptionen}></DataQuickViewPayment>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewBookings statusBookings={this.state.statusBookings} changeInitializeStep={this.changeInitializeStep}></DataQuickViewBookings>\n                        <DataQuickViewSalesStatistics statusSales={this.state.statusSales} changeInitializeStep={this.changeInitializeStep}></DataQuickViewSalesStatistics>\n                    </Box>\n                    <Box ClassName=\"twoGroupedBoards\" direction=\"row\" wrap=\"true\">\n                        <DataQuickViewManageSales salesStatus={this.state.salesStatus} setSalesStatus={this.setSalesStatus} changeInitializeStep={this.changeInitializeStep}></DataQuickViewManageSales>\n\n                    </Box>\n                </Box>}\n                {this.state.initializeStep === 1 && <ShopManagementConfMaxTickets\n                    maxTicketmenge={this.state.maxTicketmenge} setMaxTicketMenge={this.setMaxTicketMenge}\n                    changeInitializeStep={this.changeInitializeStep}></ShopManagementConfMaxTickets>}\n\n                {this.state.initializeStep === 3 && <ShopManagementViewBookings\n                    changeInitializeStep={this.changeInitializeStep}\n                ></ShopManagementViewBookings>}\n                {this.state.initializeStep === 4 && <ShopManagementSalesStatistics changeInitializeStep={this.changeInitializeStep}>\n                </ShopManagementSalesStatistics>}\n            </Box>\n        );\n    }\n}\n\nexport default ShopManagement;\n","import React from 'react';\nimport { Box, Header, Menu } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport EntranceDashboard from './Components/EntranceDashboard';\nimport TicketReaderManager from './Components/TicketReaderManager';\nimport SystemInitalisierung from './Components/SystemInitalisierung';\nimport ShopManagement from './Components/ShopManagement';\nimport UserContext from '../AppContexts/UserContext';\n\nimport LocalTicketMirror from './Classes/LocalTicketMirror';\n\n// eslint-disable-next-line\nimport RemoteTicketReader from './Classes/RemoteTicketReader';\n\nclass EventManagement extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rTRHandler = this.rTRHandler.bind(this);\n\n        // Required code for offline ticket data sync\n        this.localTicketMirror = new LocalTicketMirror();\n\n        // RTRList should be an array of remoteTicketReaders\n        this.state = { RTRList: [] };\n    }\n\n    /**\n     * Handler for new connected remote ticket readers\n     * @param {RemoteTicketReader} remoteTicketReader \n     */\n    rTRHandler(remoteTicketReader) {\n        // Adding the remote ticket reader to the list\n        let RTRList = this.state.RTRList;\n        RTRList.push(remoteTicketReader);\n        this.setState({ RTRList: RTRList });\n\n        // In case the rtr is dicsonnected, it should be removed from the list in the view state\n        remoteTicketReader.onConnectionChanged = (connectionState) => {\n            switch (connectionState) {\n                case \"connected\":\n                    // The connection has become fully connected\n                    break;\n                case \"disconnected\":\n                    break;\n                case \"failed\":\n                    // One or more transports has terminated unexpectedly or in an error\n                    this.removeRTR(remoteTicketReader);\n                    break;\n                case \"closed\":\n                    // The connection has been closed\n                    break;\n                default:\n                    break;\n            }\n            this.forceUpdate();\n        }\n\n        // Setting eventhandler for reading a ticket\n        remoteTicketReader.onGetTicket = (identifier, callback) => {\n            // Trying to get the ticket from the IDB\n            this.localTicketMirror.getTicket(identifier).then((ticket) => {\n                callback(ticket);\n            }).catch((error) => {\n                // In case of an error, providing an error msg\n                callback(null, error);\n            });\n        }\n\n        // Setting eventhandler for obliterating a ticket\n        remoteTicketReader.onObliterateTicket = (identifier, secretIngredient, callback) => {\n            this.localTicketMirror.obliterateTicket(identifier, secretIngredient).then((result) => {\n                callback(result);\n            }).catch((error) => {\n                callback(null, error)\n            });\n        }\n    }\n\n    removeRTR(remoteTicketReader) {\n        console.debug(\"Attempting to remove closed remote ticket reader\");\n        let RTRList = this.state.RTRList;\n        let idx = RTRList.indexOf(remoteTicketReader);\n        RTRList.splice(idx, 1);\n        this.setState({ RTRList: RTRList });\n    }\n\n    render() {\n        return (\n\n            <Box className=\"EventManagement\">\n                <Header background=\"brand\" justify=\"between\" pad=\"10px\">\n                    <Link to=\"/eventmgmt\">Home</Link>\n                    {\n                        <UserContext.Consumer>\n                            {userContext => <Menu label=\"Account\" items={[{ label: 'Logout', onClick: userContext.logout }]} />}\n                        </UserContext.Consumer>\n                    }\n                </Header>\n                <ul>\n                    <li><Link to=\"/eventmgmt/rtrm\">Manage Remote Ticket Readers</Link></li>\n                    <li><Link to=\"/eventmgmt/entrancedb\">Show Entrance Dashboard</Link></li>\n                    <li><Link to=\"/eventmgmt/ticketshop\">Manage Ticketshop</Link></li>\n                    <li><Link to=\"/eventmgmt/SystemInitalisierung\">System Initalisieren</Link></li>\n                    <li><Link to=\"/eventmgmt/ShopManagement\">Shop Management</Link></li>\n                </ul>\n                <Switch>\n                    <Route path=\"/eventmgmt/rtrm\">\n                        <TicketReaderManager RTRList={this.state.RTRList} onRTR={this.rTRHandler}></TicketReaderManager>\n                    </Route>\n                    <Route path=\"/eventmgmt/entrancedb\">\n                        <EntranceDashboard localTicketMirror={this.localTicketMirror} onRemoveRTR={() => { }}></EntranceDashboard>\n                    </Route>\n                    <Route path=\"/eventmgmt/ShopManagement\">\n                        <ShopManagement></ShopManagement>\n                    </Route>\n                    <Route path=\"/eventmgmt/SystemInitalisierung\">\n                        <SystemInitalisierung></SystemInitalisierung>\n                    </Route>\n                    <Route path=\"/eventmgmt/ticketshop\">\n                        <Box pad=\"medium\">Hier müsste dann sowas wie ein Ticketshop Management Dashboard hin...</Box>\n                    </Route>\n                </Switch>\n            </Box>\n        );\n    }\n}\n\nexport default EventManagement;\n","import React from 'react';\nimport './App.css';\n\nimport UserContext from './AppContexts/UserContext';\nimport AccountManagement from './AccountManagement/AccountManagement'\nimport Ticketshop from './Ticketshop/Ticketshop';\nimport Entrance from './Entrance/Entrance';\nimport EventManagement from './EventManagement/EventManagement';\nimport { Grommet, grommet } from 'grommet';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport config from './config';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { userContext: null };\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.init = this.init.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init() {\n    let ls = JSON.parse(localStorage.getItem('userContext'));\n    this.setState({ userContext: ls ? ls : null }, this.login);\n  }\n\n  logout() {\n    if (this.state.userContext.user.role === 0) {\n      let ok = window.confirm('Sollen auch eventuell lokal gespeicherten Daten für den Einlass unwiederruflich gelöscht werden?', \"Nein\");\n      if (ok) {\n        window.indexedDB.deleteDatabase(config.IDB_NAME);\n      }\n    }\n    localStorage.clear();\n    this.setState({ userContext: null });\n    window.location.assign('#/login');\n  }\n\n  login() {\n    if (this.state.userContext === null) {\n      window.location.assign('#/login/');\n    } else {\n      if (this.state.userContext.user.role === 0 && (window.location.hash === \"\" || window.location.hash.includes('login'))) {\n        window.location.assign('#/eventmgmt/');\n      }\n      if (this.state.userContext.user.role === 1 && (window.location.hash === \"\" || !window.location.hash.includes('guest') || window.location.hash.includes(\"login\"))) {\n        window.location.assign('#/guest/');\n      }\n    }\n  }\n\n  render() {\n    return (\n      <UserContext.Provider value={Object.assign(this.state.userContext || {}, { logout: this.logout, login: this.login, reloadLocalStorage: this.init })}>\n\n        <Grommet theme={grommet}>\n          <Switch>\n            <Route exact path=\"/\">\n              <ul>\n                <li><Link to=\"/guest\">Ticketshop</Link></li>\n                <li><Link to=\"/entrance\">Einlass-Management</Link></li>\n                <li><Link to=\"/eventmgmt\">Event-Management</Link></li>\n                <li><Link to=\"/login\">Anmelden</Link></li>\n              </ul>\n            </Route>\n          </Switch>\n          <Switch>\n            <Route path=\"/guest\">\n              <Ticketshop eigenschaft1=\"test\"></Ticketshop>\n            </Route>\n            <Route path=\"/entrance\">\n              <Entrance></Entrance>\n            </Route>\n            <Route path=\"/eventmgmt\">\n              <EventManagement></EventManagement>\n            </Route>\n            <Route path=\"/login\">\n              <AccountManagement></AccountManagement>\n            </Route>\n          </Switch>\n        </Grommet>\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\n// eslint-disable-next-line\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}